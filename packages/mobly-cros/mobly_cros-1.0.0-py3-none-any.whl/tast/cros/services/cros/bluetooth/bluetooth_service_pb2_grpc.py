# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from tast.cros.services.cros.bluetooth import bluetooth_service_pb2 as tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tast/cros/services/cros/bluetooth/bluetooth_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BluetoothServiceStub(object):
    """BluetoothService allows bluetooth remote tests make calls to the
    local BluetoothFacade, an abstraction layer on top of the bluez and floss
    bluetooth stacks.

    This service provides an endpoint for each method in the BluetoothFacade
    interface, as well as endpoints for switching between bluez and floss. The
    SetBluetoothStack method should be called first to specify the stack to use
    and configure the DUT appropriately, then Enable to turn on bluetooth before
    making other method calls.

    Note: This service is for interacting with the bluetooth stack directly, not
    for performing UI actions. For UI-based bluetooth actions, use the
    BluetoothUIService instead.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetupBluetoothFacade = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/SetupBluetoothFacade',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.SetBluetoothStack = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/SetBluetoothStack',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetBluetoothStackRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.StackType = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/StackType',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.StackTypeResponse.FromString,
                _registered_method=True)
        self.Reset = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/Reset',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.ResetRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.AdapterProperties = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/AdapterProperties',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.AdapterPropertiesResponse.FromString,
                _registered_method=True)
        self.IsPoweredOn = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/IsPoweredOn',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsPoweredOnResponse.FromString,
                _registered_method=True)
        self.SetPowered = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/SetPowered',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetPoweredRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.SetLLPrivacy = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/SetLLPrivacy',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetLLPrivacyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.StartDiscovery = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/StartDiscovery',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.StopDiscovery = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/StopDiscovery',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.IsDiscovering = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/IsDiscovering',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsDiscoveringResponse.FromString,
                _registered_method=True)
        self.IsDiscoverable = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/IsDiscoverable',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsDiscoverableResponse.FromString,
                _registered_method=True)
        self.SetDiscoverable = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/SetDiscoverable',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetDiscoverableRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.SetDiscoverableWithTimeout = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/SetDiscoverableWithTimeout',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetDiscoverableWithTimeoutRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.IsPairable = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/IsPairable',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsPairableResponse.FromString,
                _registered_method=True)
        self.SetPairable = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/SetPairable',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetPairableRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Address = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/Address',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.AddressResponse.FromString,
                _registered_method=True)
        self.Name = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/Name',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.NameResponse.FromString,
                _registered_method=True)
        self.UUIDs = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/UUIDs',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.UUIDsResponse.FromString,
                _registered_method=True)
        self.Devices = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/Devices',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DevicesResponse.FromString,
                _registered_method=True)
        self.HasDevice = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/HasDevice',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.HasDeviceRequest.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.HasDeviceResponse.FromString,
                _registered_method=True)
        self.RemoveDevice = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/RemoveDevice',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.RemoveDeviceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ConnectDevice = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/ConnectDevice',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.ConnectDeviceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.DisconnectDevice = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/DisconnectDevice',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DisconnectDeviceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.WaitForConnectState = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/WaitForConnectState',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.WaitForConnectStateRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.DeviceProperties = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/DeviceProperties',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DevicePropertiesRequest.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DevicePropertiesResponse.FromString,
                _registered_method=True)
        self.DeviceIsConnected = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/DeviceIsConnected',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceIsConnectedRequest.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceIsConnectedResponse.FromString,
                _registered_method=True)
        self.DeviceIsPaired = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/DeviceIsPaired',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceIsPairedRequest.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceIsPairedResponse.FromString,
                _registered_method=True)
        self.DeviceAddress = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/DeviceAddress',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceAddressRequest.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceAddressResponse.FromString,
                _registered_method=True)
        self.DeviceName = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/DeviceName',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceNameRequest.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceNameResponse.FromString,
                _registered_method=True)
        self.DeviceAlias = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/DeviceAlias',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceAliasRequest.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceAliasResponse.FromString,
                _registered_method=True)
        self.DiscoverDevice = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/DiscoverDevice',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DiscoverDeviceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.PairDevice = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/PairDevice',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.PairDeviceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.EnabledOnBoot = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/EnabledOnBoot',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.EnabledOnBootResponse.FromString,
                _registered_method=True)
        self.SetEnabledOnBoot = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/SetEnabledOnBoot',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetEnabledOnBootRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.SetDebugLogLevels = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/SetDebugLogLevels',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetDebugLogLevelsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.IsWBSSupported = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/IsWBSSupported',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsWBSSupportedResponse.FromString,
                _registered_method=True)
        self.IsSWBSupported = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/IsSWBSupported',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsSWBSupportedResponse.FromString,
                _registered_method=True)
        self.GetPasskey = channel.unary_unary(
                '/tast.cros.bluetooth.BluetoothService/GetPasskey',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.GetPasskeyRequest.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.GetPasskeyResponse.FromString,
                _registered_method=True)


class BluetoothServiceServicer(object):
    """BluetoothService allows bluetooth remote tests make calls to the
    local BluetoothFacade, an abstraction layer on top of the bluez and floss
    bluetooth stacks.

    This service provides an endpoint for each method in the BluetoothFacade
    interface, as well as endpoints for switching between bluez and floss. The
    SetBluetoothStack method should be called first to specify the stack to use
    and configure the DUT appropriately, then Enable to turn on bluetooth before
    making other method calls.

    Note: This service is for interacting with the bluetooth stack directly, not
    for performing UI actions. For UI-based bluetooth actions, use the
    BluetoothUIService instead.
    """

    def SetupBluetoothFacade(self, request, context):
        """SetupBluetoothFacade initialize the BluetoothFacade
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetBluetoothStack(self, request, context):
        """SetBluetoothStack configures the DUT to use the specified bluetooth stack
        and initializes the BluetoothFacade as needed.

        Enable should be called after this if to ensure the adapter is powered on
        if it is to be used beyond calling IsPoweredOn.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StackType(self, request, context):
        """StackType returns the BluetoothStackType the facade uses.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Reset resets the default adapter and turns it back on if powerOn is true.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdapterProperties(self, request, context):
        """AdapterProperties collects and returns the default adapter's properties.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsPoweredOn(self, request, context):
        """IsPoweredOn returns true if the default adapter is enabled.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPowered(self, request, context):
        """SetPowered sets the default adapter's enabled state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLLPrivacy(self, request, context):
        """SetLLPrivacy sets the LL privacy enabled state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartDiscovery(self, request, context):
        """StartDiscovery starts the discovery of remote devices.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopDiscovery(self, request, context):
        """StopDiscovery stops the discovery of remote devices.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsDiscovering(self, request, context):
        """IsDiscovering checks if the adapter is discovering.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsDiscoverable(self, request, context):
        """IsDiscoverable returns true if the default adapter is discoverable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDiscoverable(self, request, context):
        """SetDiscoverable sets whether the default adapter is discoverable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDiscoverableWithTimeout(self, request, context):
        """SetDiscoverableWithTimeout sets whether the default adapter is
        discoverable. If discoverable is true, it will be set as discoverable for
        the provided timeout in seconds.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsPairable(self, request, context):
        """IsPairable returns true if the default adapter is pairable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPairable(self, request, context):
        """SetPairable sets whether the default adapter is pairable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Address(self, request, context):
        """Address returns the address of the default adapter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Name(self, request, context):
        """Name returns the name of the default adapter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UUIDs(self, request, context):
        """UUIDs returns the UUIDs of the default adapter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Devices(self, request, context):
        """Devices returns the addresses of all known devices.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasDevice(self, request, context):
        """HasDevice checks if the adapter knows the device with the given address.
        A device is known if is paired or if it has been discovered by the adapter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDevice(self, request, context):
        """RemoveDevice removes/forgets a known device with the given address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectDevice(self, request, context):
        """ConnectDevice connects to a device with the given address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisconnectDevice(self, request, context):
        """DisconnectDevice disconnects the device with the given address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitForConnectState(self, request, context):
        """WaitForConnectState waits the device to be connected or disconnected.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeviceProperties(self, request, context):
        """DeviceProperties collects and returns a known device's properties.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeviceIsConnected(self, request, context):
        """DeviceIsConnected checks whether the device with the given address is
        connected.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeviceIsPaired(self, request, context):
        """DeviceIsPaired checks whether the device with the given address is paired.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeviceAddress(self, request, context):
        """DeviceAddress returns the address of a known device with the given name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeviceName(self, request, context):
        """DeviceName returns the name of a known device with the given address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeviceAlias(self, request, context):
        """DeviceAlias returns the alias of a known device with the given address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverDevice(self, request, context):
        """DiscoverDevice will start discovery, wait until a device is found, and then
        stop discovery. A non-nil error return indicates that the adapter was able
        to successfully discover the device before the timeout was reached.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PairDevice(self, request, context):
        """PairDevice pairs a peer device with the given address and authentication
        pin. Device can be assumed to be both paired and connect to the DUT if this
        returns without error.

        DiscoverDevice should be called prior to PairDevice to ensure that the
        adapter knows of the device for pairing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnabledOnBoot(self, request, context):
        """EnabledOnBoot returns the value of the system setting that determines if
        the bluetooth adapter is enabled on boot.
        Note: This requires the chrome ui to have been loaded with the signin
        profile test extension key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEnabledOnBoot(self, request, context):
        """SetEnabledOnBoot sets the value of the system setting that determines if
        the bluetooth adapter is enabled on boot.
        Note: This requires the chrome ui to have been loaded with the signin
        profile test extension key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDebugLogLevels(self, request, context):
        """SetDebugLogLevels sets the debug log level.
        Note: Setting log level is only supported for bluez at this time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsWBSSupported(self, request, context):
        """IsWBSSupported returns true if the adapter supports Wide-Band Speech (WBS).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsSWBSupported(self, request, context):
        """IsSWBSupported returns true if the adapter supports SWB.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPasskey(self, request, context):
        """GetPasskey monitors the bonding process for specified address and return
        passkey for keyboard pairing.

        This blocks until the passkey is returned or timeout is hit.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BluetoothServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetupBluetoothFacade': grpc.unary_unary_rpc_method_handler(
                    servicer.SetupBluetoothFacade,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SetBluetoothStack': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBluetoothStack,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetBluetoothStackRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'StackType': grpc.unary_unary_rpc_method_handler(
                    servicer.StackType,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.StackTypeResponse.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.ResetRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'AdapterProperties': grpc.unary_unary_rpc_method_handler(
                    servicer.AdapterProperties,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.AdapterPropertiesResponse.SerializeToString,
            ),
            'IsPoweredOn': grpc.unary_unary_rpc_method_handler(
                    servicer.IsPoweredOn,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsPoweredOnResponse.SerializeToString,
            ),
            'SetPowered': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPowered,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetPoweredRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SetLLPrivacy': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLLPrivacy,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetLLPrivacyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'StartDiscovery': grpc.unary_unary_rpc_method_handler(
                    servicer.StartDiscovery,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'StopDiscovery': grpc.unary_unary_rpc_method_handler(
                    servicer.StopDiscovery,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'IsDiscovering': grpc.unary_unary_rpc_method_handler(
                    servicer.IsDiscovering,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsDiscoveringResponse.SerializeToString,
            ),
            'IsDiscoverable': grpc.unary_unary_rpc_method_handler(
                    servicer.IsDiscoverable,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsDiscoverableResponse.SerializeToString,
            ),
            'SetDiscoverable': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDiscoverable,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetDiscoverableRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SetDiscoverableWithTimeout': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDiscoverableWithTimeout,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetDiscoverableWithTimeoutRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'IsPairable': grpc.unary_unary_rpc_method_handler(
                    servicer.IsPairable,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsPairableResponse.SerializeToString,
            ),
            'SetPairable': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPairable,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetPairableRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Address': grpc.unary_unary_rpc_method_handler(
                    servicer.Address,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.AddressResponse.SerializeToString,
            ),
            'Name': grpc.unary_unary_rpc_method_handler(
                    servicer.Name,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.NameResponse.SerializeToString,
            ),
            'UUIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.UUIDs,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.UUIDsResponse.SerializeToString,
            ),
            'Devices': grpc.unary_unary_rpc_method_handler(
                    servicer.Devices,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DevicesResponse.SerializeToString,
            ),
            'HasDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.HasDevice,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.HasDeviceRequest.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.HasDeviceResponse.SerializeToString,
            ),
            'RemoveDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDevice,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.RemoveDeviceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ConnectDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectDevice,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.ConnectDeviceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DisconnectDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.DisconnectDevice,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DisconnectDeviceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'WaitForConnectState': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitForConnectState,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.WaitForConnectStateRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DeviceProperties': grpc.unary_unary_rpc_method_handler(
                    servicer.DeviceProperties,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DevicePropertiesRequest.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DevicePropertiesResponse.SerializeToString,
            ),
            'DeviceIsConnected': grpc.unary_unary_rpc_method_handler(
                    servicer.DeviceIsConnected,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceIsConnectedRequest.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceIsConnectedResponse.SerializeToString,
            ),
            'DeviceIsPaired': grpc.unary_unary_rpc_method_handler(
                    servicer.DeviceIsPaired,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceIsPairedRequest.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceIsPairedResponse.SerializeToString,
            ),
            'DeviceAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.DeviceAddress,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceAddressRequest.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceAddressResponse.SerializeToString,
            ),
            'DeviceName': grpc.unary_unary_rpc_method_handler(
                    servicer.DeviceName,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceNameRequest.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceNameResponse.SerializeToString,
            ),
            'DeviceAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.DeviceAlias,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceAliasRequest.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceAliasResponse.SerializeToString,
            ),
            'DiscoverDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverDevice,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DiscoverDeviceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'PairDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.PairDevice,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.PairDeviceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'EnabledOnBoot': grpc.unary_unary_rpc_method_handler(
                    servicer.EnabledOnBoot,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.EnabledOnBootResponse.SerializeToString,
            ),
            'SetEnabledOnBoot': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEnabledOnBoot,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetEnabledOnBootRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SetDebugLogLevels': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDebugLogLevels,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetDebugLogLevelsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'IsWBSSupported': grpc.unary_unary_rpc_method_handler(
                    servicer.IsWBSSupported,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsWBSSupportedResponse.SerializeToString,
            ),
            'IsSWBSupported': grpc.unary_unary_rpc_method_handler(
                    servicer.IsSWBSupported,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsSWBSupportedResponse.SerializeToString,
            ),
            'GetPasskey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPasskey,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.GetPasskeyRequest.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.GetPasskeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tast.cros.bluetooth.BluetoothService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tast.cros.bluetooth.BluetoothService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BluetoothService(object):
    """BluetoothService allows bluetooth remote tests make calls to the
    local BluetoothFacade, an abstraction layer on top of the bluez and floss
    bluetooth stacks.

    This service provides an endpoint for each method in the BluetoothFacade
    interface, as well as endpoints for switching between bluez and floss. The
    SetBluetoothStack method should be called first to specify the stack to use
    and configure the DUT appropriately, then Enable to turn on bluetooth before
    making other method calls.

    Note: This service is for interacting with the bluetooth stack directly, not
    for performing UI actions. For UI-based bluetooth actions, use the
    BluetoothUIService instead.
    """

    @staticmethod
    def SetupBluetoothFacade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/SetupBluetoothFacade',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetBluetoothStack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/SetBluetoothStack',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetBluetoothStackRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StackType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/StackType',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.StackTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/Reset',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.ResetRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AdapterProperties(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/AdapterProperties',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.AdapterPropertiesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsPoweredOn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/IsPoweredOn',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsPoweredOnResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPowered(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/SetPowered',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetPoweredRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetLLPrivacy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/SetLLPrivacy',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetLLPrivacyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartDiscovery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/StartDiscovery',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopDiscovery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/StopDiscovery',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsDiscovering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/IsDiscovering',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsDiscoveringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsDiscoverable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/IsDiscoverable',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsDiscoverableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDiscoverable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/SetDiscoverable',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetDiscoverableRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDiscoverableWithTimeout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/SetDiscoverableWithTimeout',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetDiscoverableWithTimeoutRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsPairable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/IsPairable',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsPairableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPairable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/SetPairable',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetPairableRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Address(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/Address',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.AddressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Name(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/Name',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.NameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UUIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/UUIDs',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.UUIDsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Devices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/Devices',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DevicesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HasDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/HasDevice',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.HasDeviceRequest.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.HasDeviceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/RemoveDevice',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.RemoveDeviceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConnectDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/ConnectDevice',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.ConnectDeviceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisconnectDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/DisconnectDevice',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DisconnectDeviceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WaitForConnectState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/WaitForConnectState',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.WaitForConnectStateRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeviceProperties(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/DeviceProperties',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DevicePropertiesRequest.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DevicePropertiesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeviceIsConnected(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/DeviceIsConnected',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceIsConnectedRequest.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceIsConnectedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeviceIsPaired(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/DeviceIsPaired',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceIsPairedRequest.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceIsPairedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeviceAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/DeviceAddress',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceAddressRequest.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceAddressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeviceName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/DeviceName',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceNameRequest.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeviceAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/DeviceAlias',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceAliasRequest.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DeviceAliasResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DiscoverDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/DiscoverDevice',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.DiscoverDeviceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PairDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/PairDevice',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.PairDeviceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnabledOnBoot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/EnabledOnBoot',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.EnabledOnBootResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetEnabledOnBoot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/SetEnabledOnBoot',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetEnabledOnBootRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDebugLogLevels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/SetDebugLogLevels',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.SetDebugLogLevelsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsWBSSupported(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/IsWBSSupported',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsWBSSupportedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsSWBSupported(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/IsSWBSupported',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.IsSWBSupportedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPasskey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.bluetooth.BluetoothService/GetPasskey',
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.GetPasskeyRequest.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_bluetooth_dot_bluetooth__service__pb2.GetPasskeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
