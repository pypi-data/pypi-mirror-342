# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from tast.cros.services.cros.ui import screen_recorder_service_pb2 as tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tast/cros/services/cros/ui/screen_recorder_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ScreenRecorderServiceStub(object):
    """ScreenRecorderService provides functionalities to perform screen recording.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_unary(
                '/tast.cros.ui.ScreenRecorderService/Start',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2.StartRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/tast.cros.ui.ScreenRecorderService/Stop',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2.StopResponse.FromString,
                _registered_method=True)
        self.StreamScreenRecording = channel.unary_stream(
                '/tast.cros.ui.ScreenRecorderService/StreamScreenRecording',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2.StreamScreenRecordingRequest.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2.StreamScreenRecordingResponse.FromString,
                _registered_method=True)


class ScreenRecorderServiceServicer(object):
    """ScreenRecorderService provides functionalities to perform screen recording.
    """

    def Start(self, request, context):
        """Start creates a new media recorder and starts to record the screen.
        There can be only a single recording in progress at a time.
        If user does not specify the file name, the service will generate a
        temporary location for the recording and return that to the user in Stop().
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Stop stops and saves the recording to the specified location.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamScreenRecording(self, request, context):
        """StreamScreenRecording creates a new media recorder, records the screen and
        streams the content.
        Incremental data chunks can be appended to a file as they arrive and the
        resulting screen recording file will be valid.
        There can be only a single recording in progress at a time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ScreenRecorderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2.StartRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2.StopResponse.SerializeToString,
            ),
            'StreamScreenRecording': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamScreenRecording,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2.StreamScreenRecordingRequest.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2.StreamScreenRecordingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tast.cros.ui.ScreenRecorderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tast.cros.ui.ScreenRecorderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ScreenRecorderService(object):
    """ScreenRecorderService provides functionalities to perform screen recording.
    """

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.ui.ScreenRecorderService/Start',
            tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2.StartRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.ui.ScreenRecorderService/Stop',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2.StopResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamScreenRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/tast.cros.ui.ScreenRecorderService/StreamScreenRecording',
            tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2.StreamScreenRecordingRequest.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_ui_dot_screen__recorder__service__pb2.StreamScreenRecordingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
