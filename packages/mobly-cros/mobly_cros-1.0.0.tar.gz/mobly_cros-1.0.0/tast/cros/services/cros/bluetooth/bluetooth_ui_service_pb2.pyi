"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 The ChromiumOS Authors
Use of this source code is governed by a BSD-style license that can be
found in the LICENSE file.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _FastPairProtocol:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _FastPairProtocolEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_FastPairProtocol.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    FAST_PAIR_PROTOCOL_NULL: _FastPairProtocol.ValueType  # 0
    FAST_PAIR_PROTOCOL_INITIAL: _FastPairProtocol.ValueType  # 1
    FAST_PAIR_PROTOCOL_SUBSEQUENT: _FastPairProtocol.ValueType  # 2
    FAST_PAIR_PROTOCOL_RETROACTIVE: _FastPairProtocol.ValueType  # 3

class FastPairProtocol(_FastPairProtocol, metaclass=_FastPairProtocolEnumTypeWrapper): ...

FAST_PAIR_PROTOCOL_NULL: FastPairProtocol.ValueType  # 0
FAST_PAIR_PROTOCOL_INITIAL: FastPairProtocol.ValueType  # 1
FAST_PAIR_PROTOCOL_SUBSEQUENT: FastPairProtocol.ValueType  # 2
FAST_PAIR_PROTOCOL_RETROACTIVE: FastPairProtocol.ValueType  # 3
global___FastPairProtocol = FastPairProtocol

@typing.final
class PairWithFastPairNotificationRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROTOCOL_FIELD_NUMBER: builtins.int
    IS_KEYBOARD_FIELD_NUMBER: builtins.int
    protocol: global___FastPairProtocol.ValueType
    is_keyboard: builtins.bool
    def __init__(
        self,
        *,
        protocol: global___FastPairProtocol.ValueType = ...,
        is_keyboard: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["is_keyboard", b"is_keyboard", "protocol", b"protocol"]) -> None: ...

global___PairWithFastPairNotificationRequest = PairWithFastPairNotificationRequest

@typing.final
class ConfirmSavedDevicesStateRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_NAMES_FIELD_NUMBER: builtins.int
    @property
    def device_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        device_names: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["device_names", b"device_names"]) -> None: ...

global___ConfirmSavedDevicesStateRequest = ConfirmSavedDevicesStateRequest

@typing.final
class PairDeviceWithQuickSettingsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ADVERTISEDNAME_FIELD_NUMBER: builtins.int
    advertisedName: builtins.str
    def __init__(
        self,
        *,
        advertisedName: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["advertisedName", b"advertisedName"]) -> None: ...

global___PairDeviceWithQuickSettingsRequest = PairDeviceWithQuickSettingsRequest

@typing.final
class ForgetBluetoothDeviceRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_NAME_FIELD_NUMBER: builtins.int
    device_name: builtins.str
    def __init__(
        self,
        *,
        device_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["device_name", b"device_name"]) -> None: ...

global___ForgetBluetoothDeviceRequest = ForgetBluetoothDeviceRequest

@typing.final
class Battery(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PERCENTAGE_FIELD_NUMBER: builtins.int
    VALUE_IN_PERCENTAGE_FIELD_NUMBER: builtins.int
    percentage: builtins.str
    value_in_percentage: builtins.str
    def __init__(
        self,
        *,
        percentage: builtins.str | None = ...,
        value_in_percentage: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_percentage", b"_percentage", "percentage", b"percentage"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_percentage", b"_percentage", "percentage", b"percentage", "value_in_percentage", b"value_in_percentage"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_percentage", b"_percentage"]) -> typing.Literal["percentage"] | None: ...

global___Battery = Battery

@typing.final
class Device(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    IS_CONNECTED_FIELD_NUMBER: builtins.int
    BATTERY_INFORMATION_FIELD_NUMBER: builtins.int
    BATTERY_FIELD_NUMBER: builtins.int
    name: builtins.str
    is_connected: builtins.bool
    @property
    def battery_information(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Battery]: ...
    @property
    def battery(self) -> global___Battery:
        """Battery information is only provided if the Bluetooth device is connected
        with LE.
        """

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        is_connected: builtins.bool = ...,
        battery_information: collections.abc.Iterable[global___Battery] | None = ...,
        battery: global___Battery | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_battery", b"_battery", "battery", b"battery"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_battery", b"_battery", "battery", b"battery", "battery_information", b"battery_information", "is_connected", b"is_connected", "name", b"name"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_battery", b"_battery"]) -> typing.Literal["battery"] | None: ...

global___Device = Device

@typing.final
class CollectDeviceListResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICES_FIELD_NUMBER: builtins.int
    @property
    def devices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Device]: ...
    def __init__(
        self,
        *,
        devices: collections.abc.Iterable[global___Device] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["devices", b"devices"]) -> None: ...

global___CollectDeviceListResponse = CollectDeviceListResponse

@typing.final
class BluetoothDeviceDetailRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _MatchOption:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _MatchOptionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[BluetoothDeviceDetailRequest._MatchOption.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        MATCH_OPTION_CONNECTED: BluetoothDeviceDetailRequest._MatchOption.ValueType  # 0
        """MATCH_OPTION_CONNECTED specifies that the RPC should wait for the device
        to be connected before responding.
        """
        MATCH_OPTION_DISCONNECTED: BluetoothDeviceDetailRequest._MatchOption.ValueType  # 1
        """MATCH_OPTION_DISCONNECTED specifies that the RPC should wait for the
        device to be disconnected before responding.
        """
        MATCH_OPTION_REPORT_BATTERY: BluetoothDeviceDetailRequest._MatchOption.ValueType  # 2
        """MATCH_OPTION_REPORT_BATTERY specifies that the RPC should wait for the
        device battery information to be reported by the OS-Settings before
        responding.
        """
        MATCH_OPTION_NOT_REPORT_BATTERY: BluetoothDeviceDetailRequest._MatchOption.ValueType  # 3
        """MATCH_OPTION_NOT_REPORT_BATTERY specifies that the RPC should wait for
        the device battery information within the OS-Settings is no longer
        available before responding.
        """

    class MatchOption(_MatchOption, metaclass=_MatchOptionEnumTypeWrapper): ...
    MATCH_OPTION_CONNECTED: BluetoothDeviceDetailRequest.MatchOption.ValueType  # 0
    """MATCH_OPTION_CONNECTED specifies that the RPC should wait for the device
    to be connected before responding.
    """
    MATCH_OPTION_DISCONNECTED: BluetoothDeviceDetailRequest.MatchOption.ValueType  # 1
    """MATCH_OPTION_DISCONNECTED specifies that the RPC should wait for the
    device to be disconnected before responding.
    """
    MATCH_OPTION_REPORT_BATTERY: BluetoothDeviceDetailRequest.MatchOption.ValueType  # 2
    """MATCH_OPTION_REPORT_BATTERY specifies that the RPC should wait for the
    device battery information to be reported by the OS-Settings before
    responding.
    """
    MATCH_OPTION_NOT_REPORT_BATTERY: BluetoothDeviceDetailRequest.MatchOption.ValueType  # 3
    """MATCH_OPTION_NOT_REPORT_BATTERY specifies that the RPC should wait for
    the device battery information within the OS-Settings is no longer
    available before responding.
    """

    NAME_FIELD_NUMBER: builtins.int
    MATCH_OPTION_FIELD_NUMBER: builtins.int
    name: builtins.str
    match_option: global___BluetoothDeviceDetailRequest.MatchOption.ValueType
    """Device detail may not be up to date on UI immediately,
    this option specifies a particular indicator that must match before this
    RPC can respond.
    """
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        match_option: global___BluetoothDeviceDetailRequest.MatchOption.ValueType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_match_option", b"_match_option", "match_option", b"match_option"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_match_option", b"_match_option", "match_option", b"match_option", "name", b"name"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_match_option", b"_match_option"]) -> typing.Literal["match_option"] | None: ...

global___BluetoothDeviceDetailRequest = BluetoothDeviceDetailRequest

@typing.final
class BluetoothDeviceDetailResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_FIELD_NUMBER: builtins.int
    @property
    def device(self) -> global___Device: ...
    def __init__(
        self,
        *,
        device: global___Device | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["device", b"device"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["device", b"device"]) -> None: ...

global___BluetoothDeviceDetailResponse = BluetoothDeviceDetailResponse

@typing.final
class RenameBluetoothDeviceRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_FIELD_NUMBER: builtins.int
    CUSTOM_NAME_FIELD_NUMBER: builtins.int
    custom_name: builtins.str
    @property
    def device(self) -> global___Device: ...
    def __init__(
        self,
        *,
        device: global___Device | None = ...,
        custom_name: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["device", b"device"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["custom_name", b"custom_name", "device", b"device"]) -> None: ...

global___RenameBluetoothDeviceRequest = RenameBluetoothDeviceRequest
