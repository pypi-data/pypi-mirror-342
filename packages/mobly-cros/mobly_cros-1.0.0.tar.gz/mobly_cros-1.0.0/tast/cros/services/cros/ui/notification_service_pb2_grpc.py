# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from tast.cros.services.cros.ui import notification_service_pb2 as tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tast/cros/services/cros/ui/notification_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NotificationServiceStub(object):
    """NotificationService provides types and functions used to wait or close
    notifications in system tray.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Notifications = channel.unary_unary(
                '/tast.cros.ui.NotificationService/Notifications',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2.NotificationsResponse.FromString,
                _registered_method=True)
        self.CloseNotifications = channel.unary_unary(
                '/tast.cros.ui.NotificationService/CloseNotifications',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.WaitForNotification = channel.unary_unary(
                '/tast.cros.ui.NotificationService/WaitForNotification',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2.WaitForNotificationRequest.SerializeToString,
                response_deserializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2.WaitForNotificationResponse.FromString,
                _registered_method=True)
        self.WaitUntilNotificationGone = channel.unary_unary(
                '/tast.cros.ui.NotificationService/WaitUntilNotificationGone',
                request_serializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2.WaitUntilNotificationGoneRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class NotificationServiceServicer(object):
    """NotificationService provides types and functions used to wait or close
    notifications in system tray.
    """

    def Notifications(self, request, context):
        """Notifications returns an array of notifications in system tray.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseNotifications(self, request, context):
        """CloseNotifications closes all notifications in system tray.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitForNotification(self, request, context):
        """WaitForNotification waits for the first notification that satisfies all
        wait predicates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitUntilNotificationGone(self, request, context):
        """WaitUntilNotificationGone waits for the notifications that satisfies all
        predicates to disappear.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Notifications': grpc.unary_unary_rpc_method_handler(
                    servicer.Notifications,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2.NotificationsResponse.SerializeToString,
            ),
            'CloseNotifications': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseNotifications,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'WaitForNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitForNotification,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2.WaitForNotificationRequest.FromString,
                    response_serializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2.WaitForNotificationResponse.SerializeToString,
            ),
            'WaitUntilNotificationGone': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitUntilNotificationGone,
                    request_deserializer=tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2.WaitUntilNotificationGoneRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tast.cros.ui.NotificationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tast.cros.ui.NotificationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NotificationService(object):
    """NotificationService provides types and functions used to wait or close
    notifications in system tray.
    """

    @staticmethod
    def Notifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.ui.NotificationService/Notifications',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2.NotificationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.ui.NotificationService/CloseNotifications',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WaitForNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.ui.NotificationService/WaitForNotification',
            tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2.WaitForNotificationRequest.SerializeToString,
            tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2.WaitForNotificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WaitUntilNotificationGone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tast.cros.ui.NotificationService/WaitUntilNotificationGone',
            tast_dot_cros_dot_services_dot_cros_dot_ui_dot_notification__service__pb2.WaitUntilNotificationGoneRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
