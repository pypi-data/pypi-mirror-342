//
// Project NuriKit - Copyright 2025 SNU Compbio Lab.
// SPDX-License-Identifier: Apache-2.0
//

#include <vector>

#include <absl/algorithm/container.h>
#include <absl/base/attributes.h>
#include <absl/base/optimization.h>
#include <absl/log/absl_check.h>
#include <Eigen/Dense>

#include <gtest/gtest.h>

#include "nuri/eigen_config.h"
#include "test_utils.h"
#include "nuri/algo/optim.h"

namespace nuri {
namespace {
TEST(LBFGSBaseTest, Bmv) {
  MatrixXd vs {
    {  0.680375, -0.211234,  0.566198,   0.59688,   0.823295, -0.604897 },
    { -0.686642, -0.198111, -0.740419, -0.782382,   0.997849, -0.563486 },
    { -0.860489,  0.898654, 0.0519907, -0.827888,  -0.615572,  0.326454 },
    { -0.124725,   0.86367,   0.86162,  0.441905,  -0.431413,  0.477069 },
    { -0.203127,  0.629534,  0.368437,  0.821944, -0.0350187,  -0.56835 },
  };
  std::vector<MatrixXd> sys {
    MatrixXd {
              { 0.329554, 0.536459, 0.444451 },
              { 0.10794, 0.0452059, 0.257742 },
              { 0.270431, 0.0268018, 0.904459 },
              },
    MatrixXd {
              { 0.0258648, 0.678224, 0.22528 },
              { 0.407937, 0.275105, 0.0485744 },
              { 0.012834, 0.94555, 0.414966 },
              },
    MatrixXd {
              { 0.780465, 0.302214, 0.871657 },
              { 0.959954, 0.0845965, 0.873808 },
              { 0.52344, 0.941268, 0.804416 },
              },
    MatrixXd {
              { 0.279958, 0.291903, 0.375723 },
              { 0.668052, 0.119791, 0.76015 },
              { 0.658402, 0.339326, 0.542064 },
              },
    MatrixXd {
              { 0.900505, 0.840257, 0.70468 },
              { 0.762124, 0.282161, 0.136093 },
              { 0.239193, 0.437881, 0.572004 },
              },
  };
  std::vector<MatrixXd> wtts {
    MatrixXd {
              { 0.83239, 0.271423, 0.434594 },
              { -0.716795, 0.213938, -0.967399 },
              { -0.514226, -0.725537, 0.608354 },
              },
    MatrixXd {
              { 0.542715, 0.05349, 0.539828 },
              { -0.199543, 0.783059, -0.433371 },
              { -0.295083, 0.615449, 0.838053 },
              },
    MatrixXd {
              { 0.70184, -0.466669, 0.0795207 },
              { -0.249586, 0.520497, 0.0250707 },
              { 0.335448, 0.0632129, -0.921439 },
              },
    MatrixXd {
              { 0.786745, -0.29928, 0.37334 },
              { 0.912937, 0.17728, 0.314608 },
              { 0.717353, -0.12088, 0.84794 },
              },
    MatrixXd {
              { -0.385084, -0.105933, -0.547787 },
              { -0.624934, -0.447531, 0.112888 },
              { -0.166997, -0.660786, 0.813608 },
              },
  };

  MatrixXd ans {
    {  229.072270, 124.347662, -0.626007, 121.125489, 124.600417, 20.990036 },
    { -824.671415,   2.376489,  1.784288, -10.636928, -35.578127,  9.380931 },
    {   10.910744, 101.231874, -0.064632,  -8.956068,  -5.903956, 10.829057 },
    {  -21.902615,  33.871672, -1.589517,  29.352062, -29.766594,  6.473974 },
    {   -8.402572,  -1.122897, -0.644116,  22.679712, -11.173730,  2.297666 },
  };

  VectorXd p(8);
  ArrayXd xp(5);
  for (int i = 0; i < 5; ++i) {
    bool success = internal::lbfgs_bmv(p.head(6), xp.head(2),
                                       vs.row(i).transpose(),
                                       sys[i].transpose(), wtts[i]);
    ASSERT_TRUE(success);
    NURI_EXPECT_EIGEN_EQ(p.head(6).transpose(), ans.row(i));
  }
}
}  // namespace
}  // namespace nuri
