[project]
name = "iointel"
dynamic = ["version", "readme"]
description = "A framework to create agents, tasks, and workflows."
requires-python = ">= 3.10"
dependencies = [
    "pydantic>=2.10.3",
    "python-dotenv>=1.0.1",
    "httpx",
    "pytest>=8.3.4",
    "python-multipart>=0.0.20",
    "prefect>=3.2.2",
    "pydantic-ai==0.0.37",
    "marvin==3.0.1",
    "firecrawl>=1.15.0",
    "duckduckgo-search==8.0.0",
    "pyyaml>=6.0.2",
    "sqlalchemy-utils>=0.41.2",
    "pytest-retry>=1.7.0",
    "pytest-asyncio>=0.21.2",
]
keywords = ["Agents", "LLM", "framework", "AI", "tools"]
classifiers = [
    "Topic :: Software Development :: Libraries :: Python Modules",
]

testpaths = ["tests"]

[tool.pytest.ini_options]
timeout = 120
asyncio_mode = "auto"
norecursedirs = [
    "*.egg-info",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".vscode",
    "node_modules",
]

[project.optional-dependencies]
tests = [
    "pytest-asyncio>=0.18.2,!=0.22.0,<0.23.0",
    "pytest-rerunfailures>=10,<14",
    "pytest-sugar>=0.9,<2.0",
    "pytest>=7.0",
    "pytest-timeout",
    "pytest-xdist",
    "pytest-dotenv",
]

dev = [
    "pre-commit>=4.1.0",
]

tools = [
    "solders>=0.23.0",
    "solana>=0.36.2",
]

memory = [
    "sqlalchemy>=2.0.36",
    "sqlalchemy-utils>=0.41.2",
    "pgvector>=0.3.6",
    "langchain-openai>=0.2.14",
    "langchain-core>=0.3.28",
]

all = [
    "pydantic>=2.10.3",
    "python-dotenv>=1.0.1",
    "httpx",
    "pytest>=8.3.4",
    "python-multipart>=0.0.20",
    "marvin",
    "pydantic-ai>=0.0.37",
    "prefect>=3.2.2",
    "sqlalchemy>=2.0.36",
    "sqlalchemy-utils>=0.41.2",
    "pgvector>=0.3.6",
    "langchain-openai>=0.2.14",
    "langchain-core>=0.3.28",
    "solders>=0.23.0",
    "solana>=0.36.2",
    "r2r>=3.3.32",
    "firecrawl-py>=1.11.0",
    "wolframalpha>=5.1.3",
]

api = [
    "fastapi-cors>=0.0.6",
]

[build-system]
requires = ["hatchling", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["iointel"]

[tool.hatch.version]
path = "iointel/__init__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"
fragments = [
    {path = 'README.md'},
]
substitutions = [
    # convert GitHub issue/PR numbers and handles to links
    {pattern = '(\s+)#(\d+)', replacement = '\1[#\2](https://github.com/ionet-official/iointel/issues/\2)'},
    {pattern = '(\s+)@([\w\-]+)', replacement = '\1[@\2](https://github.com/\2)'},
    {pattern = '@@', replacement = '@'},
    # highlight sections which don't have anchors
    # see https://github.com/pypa/readme_renderer/issues/169#issuecomment-808577486
    {pattern = '(\n##+\s+[^<]*?)\n', replacement = '\1 (MISSING ANCHOR)\n'},
    # strip whitespace between section name and anchor
    {pattern = '(\n##+\s+.*?)\s*(<a .*\n)', replacement='\1\2'},
    # replace Github-styled callout (not supported on pypi) with just bold
    {pattern = '\[!(NOTE|TIP|IMPORTANT|WARNING|CAUTION)\]', replacement = '**\1**:'},
]

# [tool.uv.sources]
# pydantic-ai = { git = "https://github.com/webcoderz/pydantic-ai", rev = "webcoderz-model-settings" }
# marvin = { git = "https://github.com/webcoderz/marvin" }
