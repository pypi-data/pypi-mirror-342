[project]
name = "sqlalchemy-oceanbase"
description = "Sqlalchemy dialect for OceanBase mysql tenant"
authors = [{ name = "John Lyu", email = "lvjunhong@citics.com" }]
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
dependencies = ["sqlalchemy>=2.0.29", "pymysql>=1.1.0"]
dynamic = []
version = "0.1.6"


[project.entry-points."sqlalchemy.dialects"]
"mysql.oceanbase" = "sqlalchemy_oceanbase.base:OceanBaseDialect"
"mysql.asyncoceanbase" = "sqlalchemy_oceanbase.base:AsyncOceanBaseDialect"


[tool.poetry]
[tool.poetry.group.dev.dependencies]
pytest = ">=7.0.0"

[tool.poetry-dynamic-versioning]
enable = false

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }


[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
ignore-init-module-imports = true
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
    "B904", # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
