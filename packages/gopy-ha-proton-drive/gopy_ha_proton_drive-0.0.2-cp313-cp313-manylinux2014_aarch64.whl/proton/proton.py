
# python wrapper for package github.com/LouisBrunner/gopy-ha-proton-drive/go within overall package proton
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy gen -name=proton -output=/src/build/setuptools-gopy-docker -vm=python3.13 github.com/LouisBrunner/gopy-ha-proton-drive/go

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _proton
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from proton import proton
# and then refer to everything using proton. prefix
# packages imported by this package listed below:




# ---- Types ---

# Python type for slice []proton.Share
class Slice_proton_Share(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_proton.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_proton.IncRef(self.handle)
		else:
			self.handle = _proton.Slice_proton_Share_CTor()
			_proton.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_proton_Share.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_proton.DecRef(self.handle)
	def __str__(self):
		s = 'proton.Slice_proton_Share len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'proton.Slice_proton_Share([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _proton.Slice_proton_Share_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _proton.Slice_proton_Share_len(self.handle)
				return Slice_proton_Share(handle=_proton.Slice_proton_Share_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return Share(handle=_proton.Slice_proton_Share_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_proton.Slice_proton_Share_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_proton_Share.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = Share(handle=_proton.Slice_proton_Share_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_proton.Slice_proton_Share_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct proton.Client
class Client(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_proton.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_proton.IncRef(self.handle)
		else:
			self.handle = _proton.proton_Client_CTor()
			_proton.IncRef(self.handle)
	def __del__(self):
		_proton.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'proton.Client{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'proton.Client ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def DownloadFile(self, linkID):
		"""DownloadFile(str linkID) str _, str ferr"""
		return _proton.proton_Client_DownloadFile(self.handle, linkID)
	def DeleteFile(self, linkID):
		"""DeleteFile(str linkID) str"""
		return _proton.proton_Client_DeleteFile(self.handle, linkID)
	def MakeRootFolder(self, path):
		"""MakeRootFolder(str path) object, str"""
		return Folder(handle=_proton.proton_Client_MakeRootFolder(self.handle, path))
	def ListShares(self):
		"""ListShares() []object, str"""
		return Slice_proton_Share(handle=_proton.proton_Client_ListShares(self.handle))
	def SelectShare(self, shareID):
		"""SelectShare(str shareID) str"""
		return _proton.proton_Client_SelectShare(self.handle, shareID)

# Python type for struct proton.Credentials
class Credentials(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_proton.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_proton.IncRef(self.handle)
		else:
			self.handle = _proton.proton_Credentials_CTor()
			_proton.IncRef(self.handle)
			if  0 < len(args):
				self.UID = args[0]
			if "UID" in kwargs:
				self.UID = kwargs["UID"]
			if  1 < len(args):
				self.AccessToken = args[1]
			if "AccessToken" in kwargs:
				self.AccessToken = kwargs["AccessToken"]
			if  2 < len(args):
				self.RefreshToken = args[2]
			if "RefreshToken" in kwargs:
				self.RefreshToken = kwargs["RefreshToken"]
			if  3 < len(args):
				self.SaltedKeyPass = args[3]
			if "SaltedKeyPass" in kwargs:
				self.SaltedKeyPass = kwargs["SaltedKeyPass"]
	def __del__(self):
		_proton.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'proton.Credentials{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'proton.Credentials ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def UID(self):
		return _proton.proton_Credentials_UID_Get(self.handle)
	@UID.setter
	def UID(self, value):
		if isinstance(value, go.GoClass):
			_proton.proton_Credentials_UID_Set(self.handle, value.handle)
		else:
			_proton.proton_Credentials_UID_Set(self.handle, value)
	@property
	def AccessToken(self):
		return _proton.proton_Credentials_AccessToken_Get(self.handle)
	@AccessToken.setter
	def AccessToken(self, value):
		if isinstance(value, go.GoClass):
			_proton.proton_Credentials_AccessToken_Set(self.handle, value.handle)
		else:
			_proton.proton_Credentials_AccessToken_Set(self.handle, value)
	@property
	def RefreshToken(self):
		return _proton.proton_Credentials_RefreshToken_Get(self.handle)
	@RefreshToken.setter
	def RefreshToken(self, value):
		if isinstance(value, go.GoClass):
			_proton.proton_Credentials_RefreshToken_Set(self.handle, value.handle)
		else:
			_proton.proton_Credentials_RefreshToken_Set(self.handle, value)
	@property
	def SaltedKeyPass(self):
		return _proton.proton_Credentials_SaltedKeyPass_Get(self.handle)
	@SaltedKeyPass.setter
	def SaltedKeyPass(self, value):
		if isinstance(value, go.GoClass):
			_proton.proton_Credentials_SaltedKeyPass_Set(self.handle, value.handle)
		else:
			_proton.proton_Credentials_SaltedKeyPass_Set(self.handle, value)

# Python type for struct proton.Folder
class Folder(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_proton.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_proton.IncRef(self.handle)
		else:
			self.handle = _proton.proton_Folder_CTor()
			_proton.IncRef(self.handle)
	def __del__(self):
		_proton.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'proton.Folder{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'proton.Folder ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def FindBackup(self, instanceID, backupID):
		"""FindBackup(str instanceID, str backupID) str, str"""
		return _proton.proton_Folder_FindBackup(self.handle, instanceID, backupID)
	def Upload(self, instanceID, backupID, name, metadataJSON, contentPath):
		"""Upload(str instanceID, str backupID, str name, str metadataJSON, str contentPath) str"""
		return _proton.proton_Folder_Upload(self.handle, instanceID, backupID, name, metadataJSON, contentPath)
	def ListFilesMetadata(self, instanceID):
		"""ListFilesMetadata(str instanceID) []str, str"""
		return go.Slice_string(handle=_proton.proton_Folder_ListFilesMetadata(self.handle, instanceID))

# Python type for struct proton.Share
class Share(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_proton.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_proton.IncRef(self.handle)
		else:
			self.handle = _proton.proton_Share_CTor()
			_proton.IncRef(self.handle)
			if  0 < len(args):
				self.Name = args[0]
			if "Name" in kwargs:
				self.Name = kwargs["Name"]
			if  1 < len(args):
				self.ShareID = args[1]
			if "ShareID" in kwargs:
				self.ShareID = kwargs["ShareID"]
	def __del__(self):
		_proton.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'proton.Share{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'proton.Share ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Name(self):
		return _proton.proton_Share_Name_Get(self.handle)
	@Name.setter
	def Name(self, value):
		if isinstance(value, go.GoClass):
			_proton.proton_Share_Name_Set(self.handle, value.handle)
		else:
			_proton.proton_Share_Name_Set(self.handle, value)
	@property
	def ShareID(self):
		return _proton.proton_Share_ShareID_Get(self.handle)
	@ShareID.setter
	def ShareID(self, value):
		if isinstance(value, go.GoClass):
			_proton.proton_Share_ShareID_Set(self.handle, value.handle)
		else:
			_proton.proton_Share_ShareID_Set(self.handle, value)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def NewClient(creds, onAuthChange):
	"""NewClient(object creds, callable onAuthChange) object, str"""
	return Client(handle=_proton.proton_NewClient(creds.handle, onAuthChange))
def Login(username, password, mfa):
	"""Login(str username, str password, str mfa) object, str"""
	return Credentials(handle=_proton.proton_Login(username, password, mfa))


# ---- Functions ---


