# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AudioArtifact(BaseModel):
    """
    Audio artifact generated during a run
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the media")
    original_prompt: Optional[StrictStr] = Field(default=None, description="Original prompt used to generate the media")
    revised_prompt: Optional[StrictStr] = Field(default=None, description="Revised prompt used to generate the media")
    url: Optional[StrictStr] = Field(default=None, description="Remote location for the audio file")
    base64_audio: Optional[StrictStr] = Field(default=None, description="Base64-encoded audio data")
    length: Optional[StrictStr] = Field(default=None, description="Length of the audio")
    mime_type: Optional[StrictStr] = Field(default=None, description="MIME type of the audio")
    __properties: ClassVar[List[str]] = ["id", "original_prompt", "revised_prompt", "url", "base64_audio", "length", "mime_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AudioArtifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if original_prompt (nullable) is None
        # and model_fields_set contains the field
        if self.original_prompt is None and "original_prompt" in self.model_fields_set:
            _dict['original_prompt'] = None

        # set to None if revised_prompt (nullable) is None
        # and model_fields_set contains the field
        if self.revised_prompt is None and "revised_prompt" in self.model_fields_set:
            _dict['revised_prompt'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if base64_audio (nullable) is None
        # and model_fields_set contains the field
        if self.base64_audio is None and "base64_audio" in self.model_fields_set:
            _dict['base64_audio'] = None

        # set to None if length (nullable) is None
        # and model_fields_set contains the field
        if self.length is None and "length" in self.model_fields_set:
            _dict['length'] = None

        # set to None if mime_type (nullable) is None
        # and model_fields_set contains the field
        if self.mime_type is None and "mime_type" in self.model_fields_set:
            _dict['mime_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AudioArtifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "original_prompt": obj.get("original_prompt"),
            "revised_prompt": obj.get("revised_prompt"),
            "url": obj.get("url"),
            "base64_audio": obj.get("base64_audio"),
            "length": obj.get("length"),
            "mime_type": obj.get("mime_type")
        })
        return _obj


