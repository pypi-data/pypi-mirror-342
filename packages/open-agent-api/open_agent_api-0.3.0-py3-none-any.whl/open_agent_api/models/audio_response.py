# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AudioResponse(BaseModel):
    """
    Audio response from a model
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the audio response")
    content: Optional[StrictStr] = Field(default=None, description="Base64 encoded audio content")
    expires_at: Optional[StrictInt] = Field(default=None, description="Timestamp when the audio response expires")
    transcript: Optional[StrictStr] = Field(default=None, description="Text transcript of the audio")
    mime_type: Optional[StrictStr] = Field(default=None, description="MIME type of the audio")
    sample_rate: Optional[StrictInt] = Field(default=24000, description="Sample rate of the audio")
    channels: Optional[StrictInt] = Field(default=1, description="Number of audio channels")
    __properties: ClassVar[List[str]] = ["id", "content", "expires_at", "transcript", "mime_type", "sample_rate", "channels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AudioResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expires_at'] = None

        # set to None if transcript (nullable) is None
        # and model_fields_set contains the field
        if self.transcript is None and "transcript" in self.model_fields_set:
            _dict['transcript'] = None

        # set to None if mime_type (nullable) is None
        # and model_fields_set contains the field
        if self.mime_type is None and "mime_type" in self.model_fields_set:
            _dict['mime_type'] = None

        # set to None if sample_rate (nullable) is None
        # and model_fields_set contains the field
        if self.sample_rate is None and "sample_rate" in self.model_fields_set:
            _dict['sample_rate'] = None

        # set to None if channels (nullable) is None
        # and model_fields_set contains the field
        if self.channels is None and "channels" in self.model_fields_set:
            _dict['channels'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AudioResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "content": obj.get("content"),
            "expires_at": obj.get("expires_at"),
            "transcript": obj.get("transcript"),
            "mime_type": obj.get("mime_type"),
            "sample_rate": obj.get("sample_rate") if obj.get("sample_rate") is not None else 24000,
            "channels": obj.get("channels") if obj.get("channels") is not None else 1
        })
        return _obj


