# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.token_info import TokenInfo
from cobo_waas2.models.token_listing_request_source import TokenListingRequestSource
from cobo_waas2.models.token_listing_request_status import TokenListingRequestStatus
from cobo_waas2.models.wallet_subtype import WalletSubtype
from cobo_waas2.models.wallet_type import WalletType
from typing import Optional, Set
from typing_extensions import Self


class TokenListing(BaseModel):
    """
    Detailed information about a token listing request
    """  # noqa: E501
    request_id: StrictStr = Field(description="Unique identifier of the token listing request")
    chain_id: StrictStr = Field(description="chain_id of the blockchain where the token exists")
    contract_address: StrictStr = Field(description="Contract address of the token")
    wallet_type: WalletType
    wallet_subtype: WalletSubtype
    token: Optional[TokenInfo] = None
    status: TokenListingRequestStatus
    source: Optional[TokenListingRequestSource] = None
    feedback: Optional[StrictStr] = Field(default=None, description="Feedback provided by the admin for rejected requests")
    created_timestamp: Optional[StrictInt] = Field(default=None, description="Timestamp when the request was created (in milliseconds since Unix epoch)")
    updated_timestamp: Optional[StrictInt] = Field(default=None, description="Timestamp when the request was last updated (in milliseconds since Unix epoch)")
    __properties: ClassVar[List[str]] = ["request_id", "chain_id", "contract_address", "wallet_type", "wallet_subtype", "token", "status", "source", "feedback", "created_timestamp", "updated_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenListing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of token
        if self.token:
            _dict['token'] = self.token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenListing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "request_id": obj.get("request_id"),
            "chain_id": obj.get("chain_id"),
            "contract_address": obj.get("contract_address"),
            "wallet_type": obj.get("wallet_type"),
            "wallet_subtype": obj.get("wallet_subtype"),
            "token": TokenInfo.from_dict(obj["token"]) if obj.get("token") is not None else None,
            "status": obj.get("status"),
            "source": obj.get("source"),
            "feedback": obj.get("feedback"),
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp")
        })
        return _obj


