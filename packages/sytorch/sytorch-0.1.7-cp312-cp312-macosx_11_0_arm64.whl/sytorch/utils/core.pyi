from _typeshed import Incomplete
from collections.abc import Generator
from typing import Callable

def timestamp(): ...

class __as_slice:
    def __getitem__(self, idx): ...

as_slice: Incomplete

def as_kwargs(**kwargs): ...

class CallbackContext:
    callback_fn: Incomplete
    def __init__(self, callback_fn: Callable) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, exc_traceback: types.TracebackType | None) -> None: ...

__runtime_guard_enabled__: bool

def set_runtime_guard_enabled(enabled: bool) -> None: ...
def is_runtime_guard_enabled() -> bool: ...
def no_runtime_guard() -> Generator[None]: ...
def enable_runtime_guard() -> Generator[None]: ...

class ThreadSafeCounter:
    val: Incomplete
    lock: Incomplete
    def __init__(self) -> None: ...
    def allocate(self, n, return_iter: bool = True): ...
    def add(self) -> int: ...
    def increment(self, n: int = 1) -> None: ...
    def reset(self, value: int = 0) -> None: ...
    def __len__(self) -> int: ...
    @property
    def size(self) -> int: ...
    @property
    def value(self) -> int: ...
