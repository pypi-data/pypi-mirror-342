from _typeshed import Incomplete

__all__ = ['within_no_symbolic_context', 'set_symbolic_enabled', 'is_symbolic_enabled', 'no_symbolic']

def within_no_symbolic_context() -> bool: ...
def set_symbolic_enabled(enabled: bool = True) -> None: ...
def is_symbolic_enabled() -> bool: ...

class no_symbolic:
    prev_move: bool
    prev_within_ctx: bool
    def __init__(self) -> None: ...
    prev_mode: Incomplete
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, exc_traceback: types.TracebackType | None) -> None: ...

class enable_symbolic:
    prev_move: bool
    prev_within_ctx: bool
    def __init__(self) -> None: ...
    prev_mode: Incomplete
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, exc_traceback: types.TracebackType | None) -> None: ...
