"""
This type stub file was generated by cyright.
"""

from .core import baseItem, uiItem
from .c_types import *
from .types import *
from typing import Any

class TableColConfig(baseItem):
    """
    Configuration for a table column.

    A table column can be hidden, stretched, resized, etc.

    The states can be changed by the user, but also by the
    application.
    To listen for state changes use:
    - ToggledOpenHandler/ToggledCloseHandler to listen if the user
        requests the column to be shown/hidden.
    - ContentResizeHandler to listen if the user resizes the column.
    - HoveredHandler to listen if the user hovers the column.
    """
    @property
    def clicked(self): # -> tuple:
        """
        Readonly attribute: has the item just been clicked.
        The returned value is a tuple of len 5 containing the individual test
        mouse buttons (up to 5 buttons)
        If True, the attribute is reset the next frame. It's better to rely
        on handlers to catch this event.
        """
        ...
    
    @property
    def double_clicked(self): # -> bint[]:
        """
        Readonly attribute: has the item just been double-clicked.
        The returned value is a tuple of len 5 containing the individual test
        mouse buttons (up to 5 buttons)
        If True, the attribute is reset the next frame. It's better to rely
        on handlers to catch this event.
        """
        ...
    
    @property
    def hovered(self): # -> bint:
        """
        Readonly attribute: Is the mouse inside the region of the item.
        Only one element is hovered at a time, thus
        subitems/subwindows take priority over their parent.
        """
        ...
    
    @property
    def visible(self): # -> bint:
        """
        True if the column is not clipped and is enabled.
        """
        ...
    
    @property
    def show(self): # -> bool:
        """
        Writable attribute: Show the column.

        show = False differs from enabled=False as
        the latter can be changed by user interaction.
        Defaults to True.
        """
        ...
    
    @show.setter
    def show(self, value: bool): # -> None:
        ...
    
    @property
    def enabled(self): # -> bint:
        """
        Writable attribute (and can change with user interaction):
        Whether the table is hidden (user can control this
        in the context menu).
        """
        ...
    
    @enabled.setter
    def enabled(self, value: bool): # -> None:
        ...
    
    @property
    def stretch(self): # -> bool | None:
        """
        Writable attribute to enable stretching for this column.
        True: Stretch, using the stretch_weight factor
        False: Fixed width, using the width value.
        None: Default depending on Table policy.
        """
        ...
    
    @stretch.setter
    def stretch(self, value): # -> None:
        ...
    
    @property
    def default_sort(self): # -> bool:
        """
        Writable attribute: Default as a sorting column.
        """
        ...
    
    @default_sort.setter
    def default_sort(self, value: bool): # -> None:
        ...
    
    @property
    def no_resize(self): # -> bool:
        """Disable manual resizing"""
        ...
    
    @no_resize.setter
    def no_resize(self, value: bool): # -> None:
        ...
    
    @property
    def no_hide(self): # -> bool:
        """Disable ability to hide this column"""
        ...
    
    @no_hide.setter
    def no_hide(self, value: bool): # -> None:
        ...
    
    @property
    def no_clip(self): # -> bool:
        """Disable clipping for this column"""
        ...
    
    @no_clip.setter
    def no_clip(self, value: bool): # -> None:
        ...
    
    @property
    def no_sort(self): # -> bool:
        """Disable sorting for this column"""
        ...
    
    @no_sort.setter
    def no_sort(self, value: bool): # -> None:
        ...
    
    @property
    def prefer_sort_ascending(self): # -> bool:
        """Make the initial sort direction ascending when first sorting"""
        ...
    
    @prefer_sort_ascending.setter
    def prefer_sort_ascending(self, value: bool): # -> None:
        ...
    
    @property
    def prefer_sort_descending(self): # -> bool:
        """Make the initial sort direction descending when first sorting"""
        ...
    
    @prefer_sort_descending.setter
    def prefer_sort_descending(self, value: bool): # -> None:
        ...
    
    @property
    def no_sort_ascending(self): # -> bool:
        """Disable ability to sort in ascending order"""
        ...
    
    @no_sort_ascending.setter
    def no_sort_ascending(self, value: bool): # -> None:
        ...
    
    @property
    def no_sort_descending(self): # -> bool:
        """Disable ability to sort in descending order"""
        ...
    
    @no_sort_descending.setter
    def no_sort_descending(self, value: bool): # -> None:
        ...
    
    @property
    def no_header_label(self): # -> bool:
        """Don't display column header for this column"""
        ...
    
    @no_header_label.setter
    def no_header_label(self, value: bool): # -> None:
        ...
    
    @property
    def no_header_width(self): # -> bool:
        """Don't display column width when hovered"""
        ...
    
    @no_header_width.setter
    def no_header_width(self, value: bool): # -> None:
        ...
    
    @property
    def width(self): # -> float:
        """Requested fixed width of the column in pixels.
        Unused if in stretch mode.
        Set to 0 for auto-width.

        Note the width is used only when the column
        is initialized, and is not updated with resizes."""
        ...
    
    @width.setter
    def width(self, value: float): # -> None:
        ...
    
    @property
    def no_scaling(self): # -> bool:
        """
        boolean. Defaults to False.
        By default, the requested width and
        height are multiplied internally by the global
        scale which is defined by the dpi and the
        viewport/window scale.
        If set, disables this automated scaling.
        """
        ...
    
    @no_scaling.setter
    def no_scaling(self, value: bool): # -> None:
        ...
    
    @property
    def stretch_weight(self): # -> float:
        """Weight used when stretching this column. Must be >= 0."""
        ...
    
    @stretch_weight.setter
    def stretch_weight(self, value: float): # -> None:
        ...
    
    @property
    def no_reorder(self): # -> bool:
        """Disable manual reordering"""
        ...
    
    @no_reorder.setter
    def no_reorder(self, value: bool): # -> None:
        ...
    
    @property
    def label(self): # -> str:
        """
        Label in the header for the column
        """
        ...
    
    @label.setter
    def label(self, value: str): # -> None:
        ...
    
    @property
    def handlers(self): # -> list:
        """
        Writable attribute: bound handlers for the item.
        If read returns a list of handlers. Accept
        a handler or a list of handlers as input.
        This enables to do item.handlers += [new_handler].
        """
        ...
    
    @handlers.setter
    def handlers(self, value): # -> None:
        ...
    


class TableColConfigView:
    """
    A View of a Table which you can index to get the
    TableColConfig for a specific column.
    """
    def __init__(self) -> None:
        ...
    
    def __getitem__(self, col_idx: int) -> TableColConfig:
        """Get the column configuration for the specified column."""
        ...
    
    def __setitem__(self, col_idx: int, config: TableColConfig) -> None:
        """Set the column configuration for the specified column."""
        ...
    
    def __delitem__(self, col_idx: int) -> None:
        """Delete the column configuration for the specified column."""
        ...
    
    def __call__(self, col_idx: int, attribute: str, value) -> TableColConfig:
        """Set an attribute of the column configuration for the specified column."""
        ...
    


class TableRowConfig(baseItem):
    """
    Configuration for a table row.

    A table row can be hidden and its background color can be changed.
    """
    @property
    def show(self):
        """
        Writable attribute: Show the row.
        """
        ...
    
    @show.setter
    def show(self, value: bool): # -> None:
        ...
    
    @property
    def bg_color(self): # -> float:
        """Background color for the whole row.

        Set to 0 (default) to disable.
        This background color is applied on top
        of any row background color defined by
        the theme (blending)
        """
        ...
    
    @bg_color.setter
    def bg_color(self, value): # -> None:
        ...
    
    @property
    def min_height(self):
        ...
    
    @min_height.setter
    def min_height(self, value: float): # -> None:
        ...
    
    @property
    def handlers(self): # -> list:
        """
        Writable attribute: bound handlers for the item.
        If read returns a list of handlers. Accept
        a handler or a list of handlers as input.
        This enables to do item.handlers += [new_handler].
        """
        ...
    
    @handlers.setter
    def handlers(self, value): # -> None:
        ...
    


class TableRowConfigView:
    """
    A View of a Table which you can index to get the
    TableRowConfig for a specific row.
    """
    def __init__(self) -> None:
        ...
    
    def __getitem__(self, row_idx: int) -> TableRowConfig:
        """Get the column configuration for the specified column."""
        ...
    
    def __setitem__(self, row_idx: int, config: TableRowConfig) -> None:
        """Set the column configuration for the specified column."""
        ...
    
    def __delitem__(self, col_idx: int) -> None:
        """Delete the column configuration for the specified column."""
        ...
    
    def __call__(self, row_idx: int, attribute: str, value) -> TableRowConfig:
        """Set an attribute of the column configuration for the specified column."""
        ...
    


class TableElement:
    """
    Configuration for a table element.

    A table element can be hidden, stretched, resized, etc.
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def configure(self, *args, **kwargs): # -> None:
        ...
    
    @property
    def content(self): # -> uiItem | str | None:
        """
        Writable attribute: The item to display in the table cell.
        """
        ...
    
    @content.setter
    def content(self, value): # -> None:
        ...
    
    @property
    def tooltip(self): # -> uiItem | str | None:
        """
        Writable attribute: The tooltip configuration for the item.
        """
        ...
    
    @tooltip.setter
    def tooltip(self, value): # -> None:
        ...
    
    @property
    def ordering_value(self): # -> object | long long | None:
        """
        Writable attribute: The value used for ordering the table.

        Note ordering_value is automatically set to the value
        set in content when set to a string or number.
        """
        ...
    
    @ordering_value.setter
    def ordering_value(self, value): # -> None:
        ...
    
    @property
    def bg_color(self): # -> float[]:
        """
        Writable attribute: The background color for the cell.
        """
        ...
    
    @bg_color.setter
    def bg_color(self, value): # -> None:
        ...
    


class TablePlaceHolderParent(baseItem):
    """
    Placeholder parent to store items outside the rendering tree.
    Can be only be parent to items that can be attached to tables
    """
    ...


class TableRowView:
    """View class for accessing and manipulating a single row of a Table."""
    def __init__(self) -> None:
        ...
    
    def __enter__(self): # -> Self@TableRowView:
        """Start a context for adding items to this row."""
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> Literal[False]:
        """Convert children added during context into row values."""
        ...
    
    def __getitem__(self, col_idx: int): # -> TableElement | None:
        """Get item at specified column."""
        ...
    
    def __setitem__(self, col_idx: int, value): # -> None:
        """Set item at specified column."""
        ...
    
    def __delitem__(self, col_idx: int): # -> None:
        """Delete item at specified column."""
        ...
    


class TableColView:
    """View class for accessing and manipulating a single column of a Table."""
    def __init__(self) -> None:
        ...
    
    def __enter__(self): # -> Self@TableColView:
        """Start a context for adding items to this column."""
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> Literal[False]:
        """Convert children added during context into column values."""
        ...
    
    def __getitem__(self, row_idx: int): # -> TableElement | None:
        """Get item at specified row."""
        ...
    
    def __setitem__(self, row_idx: int, value): # -> None:
        """Set item at specified row."""
        ...
    
    def __delitem__(self, row_idx: int): # -> None:
        """Delete item at specified row."""
        ...
    
    @staticmethod
    def create(table: Table, col_idx: int): # -> TableColView:
        """Create a TableColView for the specified column."""
        ...
    


class Table(uiItem):
    """
    Table widget.
    
    A table is a grid of cells, where each cell can contain
    text, images, buttons, etc. The table can be used to
    display data, but also to interact with the user.
    """
    @property
    def col_config(self): # -> TableColConfigView:
        """
        Get the column configuration view.
        """
        ...
    
    @property
    def row_config(self): # -> TableRowConfigView:
        """
        Get the row configuration view.
        """
        ...
    
    @property
    def flags(self): # -> TableFlag:
        """
        Get the table flags.
        """
        ...
    
    @flags.setter
    def flags(self, value): # -> None:
        """
        Set the table flags.

        Args:
            value: A TableFlag value or combination of TableFlag values
        """
        ...
    
    @property
    def inner_width(self): # -> float:
        """
        With ScrollX disabled:
           - inner_width          ->  *ignored*
        With ScrollX enabled:
           - inner_width  < 0.  ->  *illegal* fit in known width
                 (right align from outer_size.x) <-- weird
           - inner_width  = 0.  ->  fit in outer_width:
                Fixed size columns will take space they need (if avail,
                otherwise shrink down), Stretch columns becomes Fixed columns.
           - inner_width  > 0.  ->  override scrolling width,
                generally to be larger than outer_size.x. Fixed column
                take space they need (if avail, otherwise shrink down),
                Stretch columns share remaining space!

        Defaults to 0.
        """
        ...
    
    @inner_width.setter
    def inner_width(self, value: float): # -> None:
        ...
    
    @property
    def header(self): # -> bint:
        """
        boolean. Defaults to True.
        Produce a table header based on the column labels.
        """
        ...
    
    @header.setter
    def header(self, value: bool): # -> None:
        ...
    
    @property
    def num_rows(self): # -> int:
        """
        Get the number of rows in the table.

        This corresponds to the maximum row
        index used in the table.
        """
        ...
    
    @property
    def num_cols(self): # -> int:
        """
        Get the number of columns in the table.

        This corresponds to the maximum column
        index used in the table.
        """
        ...
    
    @property
    def num_rows_visible(self): # -> int | None:
        """
        Override the number of visible rows in the table.

        By default (None), the number of visible rows
        is the same as the number of rows in the table.
        """
        ...
    
    @num_rows_visible.setter
    def num_rows_visible(self, value): # -> None:
        ...
    
    @property
    def num_cols_visible(self): # -> int | None:
        """
        Override the number of visible columns in the table.

        By default (None), the number of visible columns
        is the same as the number of columns in the table.
        """
        ...
    
    @num_cols_visible.setter
    def num_cols_visible(self, value): # -> None:
        ...
    
    @property
    def num_rows_frozen(self): # -> int:
        """
        Writable attribute: Number of rows
        with scroll frozen.
        Default is 0.
        """
        ...
    
    @num_rows_frozen.setter
    def num_rows_frozen(self, value: int): # -> None:
        ...
    
    @property
    def num_cols_frozen(self): # -> int:
        """
        Writable attribute: Number of columns
        with scroll frozen.
        Default is 0.
        """
        ...
    
    @num_cols_frozen.setter
    def num_cols_frozen(self, value: int): # -> None:
        ...
    
    def clear(self) -> None:
        """Release all items attached to the table.
        
        Does now clear row and column configurations.
        These are cleared only when the Table is released.
        """
        ...

    def __getitem__(self, key): # -> TableElement | None:
        """
        Get items at specific target
        """
        ...

    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        """
        Delete items at specific target
        """
        ...
    
    def __iter__(self): # -> Generator[pair[int, int], None, None]:
        """
        Iterate over the keys in the table.
        """
        ...
    
    def __len__(self): # -> size_t:
        """
        Get the number of items in the table.
        """
        ...
    
    def __contains__(self, key): # -> bint:
        """
        Check if a key is in the table.
        """
        ...
    
    def keys(self): # -> Generator[pair[int, int], None, None]:
        """
        Get the keys of the table.
        """
        ...
    
    def values(self): # -> Generator[Any, None, None]:
        """
        Get the values of the table.
        """
        ...
    
    def get(self, key, default=...): # -> TableElement | None:
        """
        Get the value at a specific key.
        """
        ...
    
    def swap(self, key1, key2): # -> None:
        """
        Swaps the items at the two keys.

        Same as
        tmp = table[key1]
        table[key1] = table[key2]
        table[key2] = tmp

        But much more efficient
        """
        ...
    
    def swap_rows(self, row1: int, row2: int): # -> None:
        """
        Swaps the rows at the two indices.
        """
        ...
    
    def swap_cols(self, col1: int, col2: int): # -> None:
        """
        Swaps the cols at the two indices.
        """
        ...
    
    def remove_row(self, row: int): # -> None:
        """
        Removes the row at the given index.
        """
        ...
    
    def insert_row(self, row: int, items=...): # -> None:
        """
        Inserts a row at the given index.
        """
        ...
    
    def set_row(self, row: int, items): # -> None:
        """
        Sets the row at the given index.
        """
        ...
    
    def append_row(self, items): # -> None:
        """
        Appends a row at the end of the table.
        """
        ...
    
    def remove_col(self, col: int): # -> None:
        """
        Removes the column at the given index.
        """
        ...
    
    def insert_col(self, col: int, items=...): # -> None:
        """
        Inserts a column at the given index.
        """
        ...
    
    def set_col(self, col: int, items): # -> None:
        """
        Sets the column at the given index.
        """
        ...
    
    def append_col(self, items): # -> None:
        """
        Appends a column at the end of the table.
        """
        ...
    
    def row(self, idx: int): # -> TableRowView:
        """Get a view of the specified row."""
        ...
    
    def col(self, idx: int): # -> TableColView:
        """Get a view of the specified column."""
        ...
    
    @property
    def next_row(self): # -> TableRowView:
        """Get a view of the next row."""
        ...
    
    @property
    def next_col(self): # -> TableColView:
        """Get a view of the next column."""
        ...
    
    def __enter__(self):
        """Raise an error if used as a context manager."""
        ...
    
    def sort_rows(self, ref_col: int, ascending: bool = ...): # -> None:
        """Sort the rows using the value in ref_col as index.
        
        The sorting order is defined using the items's ordering_value
        when ordering_value is not set, it defaults to:
        - The content string (if it is a string)
        - The content before its conversion into string
        - If content is an uiItem, it defaults to the UUID (item creation order)
        """
        ...
    
    def sort_cols(self, ref_row: int, ascending: bool = ...): # -> None:
        """Sort the columns using the value in ref_row as index.
        
        The sorting order is defined using the items's ordering_value
        when ordering_value is not set, it defaults to:
        - The content string (if it is a string) 
        - The content before its conversion into string
        - If content is an uiItem, it defaults to the UUID (item creation order)
        
        Parameters:
            ref_row : int 
                Row index to use for sorting
            ascending : bool, optional
                Sort in ascending order if True, descending if False.
                Defaults to True.
        """
        ...
    


