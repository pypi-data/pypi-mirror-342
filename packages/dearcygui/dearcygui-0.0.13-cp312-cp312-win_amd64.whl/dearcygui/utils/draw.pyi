"""
This type stub file was generated by cyright.
"""

import dearcygui as dcg

class DragPoint(dcg.DrawingList):
    def __init__(self, context: dcg.Context, *args, **kwargs) -> None:
        ...
    
    def setup_callbacks(self): # -> None:
        ...
    
    @property
    def radius(self):
        """Radius of the draggable point"""
        ...
    
    @radius.setter
    def radius(self, value): # -> None:
        ...
    
    @property
    def x(self):
        """X coordinate in screen space"""
        ...
    
    @x.setter
    def x(self, value): # -> None:
        ...
    
    @property
    def y(self):
        """Y coordinate in screen space"""
        ...
    
    @y.setter
    def y(self, value): # -> None:
        ...
    
    @property
    def clamp_inside(self): # -> bool:
        """
        If set, the point will be forced to remain
        in the plot visible area.
        """
        ...
    
    @clamp_inside.setter
    def clamp_inside(self, value): # -> None:
        """
        If set, the point will be forced to remain
        in the plot visible area.
        """
        ...
    
    @property
    def color(self): # -> Color:
        """Color of the displayed circle"""
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def on_hover(self): # -> Callback | None:
        """
        Callback that is called whenever the item
        is hovered
        """
        ...
    
    @on_hover.setter
    def on_hover(self, value): # -> None:
        ...
    
    @property
    def on_dragging(self): # -> Callback | None:
        """
        Callback that is called whenever the item
        changes position due to user interaction
        """
        ...
    
    @on_dragging.setter
    def on_dragging(self, value): # -> None:
        ...
    
    @property
    def on_dragged(self): # -> Callback | None:
        """
        Callback that is called whenever the item
        changes position due to user interaction and
        the user releases his interaction.
        """
        ...
    
    @on_dragged.setter
    def on_dragged(self, value): # -> None:
        ...
    
    def handler_dragging(self, _, __, drag_deltas): # -> None:
        ...
    
    def handler_dragged(self, _, __, drag_deltas): # -> None:
        ...
    
    def handler_hover(self): # -> None:
        ...
    
    def handler_visible_for_clamping(self, handler, plot: dcg.Plot): # -> None:
        ...
    
    @property
    def active(self): # -> bool:
        ...
    
    @property
    def activated(self): # -> bool:
        ...
    
    @property
    def clicked(self): # -> tuple:
        ...
    
    @property
    def double_clicked(self): # -> list:
        ...
    
    @property
    def deactivated(self): # -> bool:
        ...
    
    @property
    def pos_to_viewport(self): # -> Coord:
        ...
    
    @property
    def pos_to_window(self): # -> Coord:
        ...
    
    @property
    def pos_to_parent(self): # -> Coord:
        ...
    
    @property
    def rect_size(self): # -> Coord:
        ...
    
    @property
    def resized(self): # -> bool:
        ...
    
    @property
    def no_input(self): # -> bool:
        """
        Disable taking user inputs
        """
        ...
    
    @no_input.setter
    def no_input(self, value): # -> None:
        ...
    
    @property
    def capture_mouse(self): # -> bool:
        """See DrawInvisibleButton for a detailed description"""
        ...
    
    @capture_mouse.setter
    def capture_mouse(self, value): # -> None:
        ...
    
    @property
    def handlers(self): # -> list:
        ...
    
    @handlers.setter
    def handlers(self, value): # -> None:
        ...
    


class DrawStream(dcg.DrawingList):
    """A drawing element that draws its children in a FIFO time stream fashion.

    Each child is associated with an expiration time.
    When the expiration time is reached, the queue
    moves onto the next child.

    Only the first child in the queue is shown.

    if time_modulus is set, the time is taken modulo
    time_modulus, and the queue loops back once the end
    is reached.

    Usage:
    ```python
    stream = DrawStream(context)
    # Add drawing element that will expire after 2 seconds
    expiration_time = time.monotonic() + 2.0 
    stream.push(DrawCircle(context),
                expiration_time)
    ```
    """
    @property
    def time(self): # -> double:
        """Return the current time (monotonic clock mod time_modulus) in seconds"""
        ...
    
    @property
    def allow_no_children(self): # -> bint:
        """
        If True, if the expiration date of the last
        child expires, the item is allowed to have
        no child.

        If False (default), always keep at least one child.
        """
        ...
    
    @allow_no_children.setter
    def allow_no_children(self, value: bool): # -> None:
        ...
    
    @property
    def no_skip_children(self): # -> bint:
        """
        If True, will always show each child
        at least one frame, even if their
        expiration time is reached.
        """
        ...
    
    @no_skip_children.setter
    def no_skip_children(self, value: bool): # -> None:
        ...
    
    @property
    def time_modulus(self): # -> double:
        """
        If non-zero, the monotonic clock
        time will be applied this value as
        modulus, and the queue will loop back.
        """
        ...
    
    @time_modulus.setter
    def time_modulus(self, value: bool): # -> None:
        ...
    
    def clear(self, only_outdated=...): # -> None:
        """Clear the drawing queue and detaches the children
        
        if only_updated is True, only items
        with past timestamps are removed
        """
        ...
    
    def push(self, child, expiry_time: float): # -> None:
        """Push a drawing item to the queue.

        The item will be attached as child if it isn't already.
        Only items associated with a push() will be
        displayed.

        An item is allowed to be several times in the queue
        (it will be attach as child only once, but will appear
         several times in the queue)

        Elements in the queue remain there unless the
        item is deleted, or clear() is called.

        Parameters:
            child: Drawing element to attach
            expiry_time: Time when child should expire and drawing
                should move on to the next one in the queue.
                The time clock corresponds to time.monotonic().
        """
        ...
    


