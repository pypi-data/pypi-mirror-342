"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from pydantic import model_serializer
from skylight_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class ScrollRequestTypedDict(TypedDict):
    x: int
    y: int
    scroll_x: NotRequired[int]
    r"""Horizontal scroll amount"""
    scroll_y: NotRequired[int]
    r"""Vertical scroll amount"""
    step: NotRequired[Nullable[int]]
    r"""Optional step size for scroll movements. If not provided, movement will be continuous."""


class ScrollRequest(BaseModel):
    x: int

    y: int

    scroll_x: Optional[int] = 0
    r"""Horizontal scroll amount"""

    scroll_y: Optional[int] = 0
    r"""Vertical scroll amount"""

    step: OptionalNullable[int] = UNSET
    r"""Optional step size for scroll movements. If not provided, movement will be continuous."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["scroll_x", "scroll_y", "step"]
        nullable_fields = ["step"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
