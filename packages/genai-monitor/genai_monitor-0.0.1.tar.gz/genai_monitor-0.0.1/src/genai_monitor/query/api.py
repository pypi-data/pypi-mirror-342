# mypy: ignore-errors
"""Core query API implementation."""

from typing import List, Optional

from genai_monitor.common.structures.data import Conditioning, Model, Sample
from genai_monitor.db.manager import DBManager
from genai_monitor.db.schemas.tables import ConditioningTable, ModelTable, SampleTable


def get_conditionings() -> List[Conditioning]:
    results = DBManager.search(ConditioningTable)
    return [Conditioning.from_orm(result) for result in results]


def get_models() -> List[Model]:
    results = DBManager.search(ModelTable)
    return [Model.from_orm(result) for result in results]


def get_samples() -> List[Sample]:
    results = DBManager.search(SampleTable)
    return [Sample.from_orm(result) for result in results]


def get_sample_by_hash(hash_value: str) -> Optional[Sample]:
    results = DBManager.search(SampleTable, filters={"hash": hash_value})
    return Sample.from_orm(results[0]) if results else None


def get_sample_by_id(sample_id: int) -> Optional[Sample]:
    results = DBManager.search(SampleTable, filters={"id": sample_id})
    return Sample.from_orm(results[0]) if results else None


def get_conditioning_by_id(conditioning_id: int) -> Optional[Conditioning]:
    results = DBManager.search(ConditioningTable, filters={"id": conditioning_id})
    return Conditioning.from_orm(results[0]) if results else None


def get_model_by_id(model_id: int) -> Optional[Model]:
    results = DBManager.search(ModelTable, filters={"id": model_id})
    return Model.from_orm(results[0]) if results else None


class SampleQuery:
    """Query interface for samples."""

    def __init__(self, sample: Sample):
        self._sample = sample

    def get_conditioning(self) -> Optional[Conditioning]:
        """Get the conditioning used to generate this sample.

        Returns:
            Optional[Conditioning]: The conditioning if it exists, None otherwise.
        """
        if not self._sample.conditioning_id:
            return None

        results = DBManager.search(ConditioningTable, filters={"id": self._sample.conditioning_id})
        return Conditioning.from_orm(results[0]) if results else None

    def get_model(self) -> Optional[Model]:
        """Get the generator that created this sample.

        Returns:
            Optional[Model]: The generator if it exists, None otherwise.
        """
        if not self._sample.model_id:
            return None

        results = DBManager.search(ModelTable, filters={"id": self._sample.model_id})
        return Model.from_orm(results[0]) if results else None


class ModelQuery:
    """Query interface for generators."""

    def __init__(self, model: Model):
        self._model = model

    def get_samples(self, conditioning: Optional[Conditioning] = None) -> List[Sample]:
        """Get all samples generated by this generator.

        Args:
            conditioning: Optional conditioning to filter samples

        Returns:
            List of samples
        """
        filters = {"model_id": self._model.id}
        if conditioning:
            filters["conditioning_id"] = conditioning.id

        results = DBManager.search(SampleTable, filters=filters)
        return [Sample.from_orm(result) for result in results]


class ConditioningQuery:
    """Query interface for conditionings."""

    def __init__(self, conditioning: Conditioning):
        self._conditioning = conditioning

    def get_samples(self) -> List[Sample]:
        """Get all samples generated with this conditioning.

        Returns:
            List[Sample]: List of samples generated with this conditioning.
        """
        results = DBManager.search(SampleTable, filters={"conditioning_id": self._conditioning.id})
        return [Sample.from_orm(result) for result in results]
