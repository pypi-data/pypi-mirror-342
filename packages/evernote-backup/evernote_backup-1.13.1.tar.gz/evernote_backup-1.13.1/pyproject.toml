[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "evernote-backup"
version = "1.13.1"
description = "Backup & export all Evernote notes and notebooks."
authors = [
    { name = "vzhd1701", email = "vzhd1701@gmail.com" }
]
readme = "README.md"
license = "MIT"
keywords = ["evernote", "yinxiang", "backup", "export", "enex"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Natural Language :: English",
    "Environment :: Console",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Topic :: Internet",
    "Topic :: System :: Archiving :: Backup",
    "Topic :: Terminals",
    "Topic :: Utilities",
]
requires-python = ">=3.9,<4.0"
dependencies = [
    "xmltodict==0.13.0",
    "click==8.1.8",
    "click-option-group==0.5.7",
    "requests-oauthlib==1.3.1",
    "thrift (==0.21.0)",
    "evernote-plus (==1.28.1.dev2)",
    "requests-sse (==0.5.1)",
]

[project.urls]
repository = "https://github.com/vzhd1701/evernote-backup"
changelog = "https://github.com/vzhd1701/evernote-backup/blob/master/CHANGELOG.md"

[project.scripts]
evernote-backup = "evernote_backup.cli:main"

[tool.poetry]
include = ["CHANGELOG.md"]

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
pytest-mock = "^3.14.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"
mdformat = "0.7.17"
ruff = "0.11.5"

[tool.ruff]
target-version = "py39"

[tool.ruff.format]
line-ending = "lf"

[tool.ruff.lint]
exclude = [
    "evernote_client_api_tokenized.py",
]
select = [
    # Complexity
    #"PL",   # pylint
    #"C90",  # maccabe

    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    ##"COM",  # flake8-commas
    ##"D",    # pydocstyle
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle
    #"ERA",  # flake8-eradicate
    "EXE",  # flake8-executable
    "F",    # pyflakes
    ##"FBT",  # flake8-boolean-trap
    "FLY",  # pyflint
    ##"FURB", # refurb
    ##"G",    # flake8-logging-format
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "LOG",  # flake8-logging
    ##"N",    # pep8-naming
    "PERF", # perflint
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "Q",    # flake8-quotes
    ##"RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # ruff
    "S",    # flake8-bandit
    ##"SIM",  # flake8-simpify
    ##"SLF",  # flake8-self
    "SLOT", # flake8-slots
    "T100", # flake8-debugger
    "TID",  # flake8-tidy-imports
    "TRY",  # tryceratops
    "UP",   # pyupgrade
    "W",    # pycodestyle
    "YTT",  # flake8-2020
]
ignore = [
    "B904",     # raise from
    "DTZ901",   # timezone on datetime.max
    "E501",     # Line too long
    "PERF203",  # try inside loop
    "PT006",    # parametrize type
    "PT011",    # broad pytest catch
    "S301",     # unpickling from databse
    "TRY003",   # long exception messages
    "TRY301",   # abstract raise
]
external = [ "WPS" ]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "S",
    "PL",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.flake8]
select = "WPS"
ignore = [
    "WPS110", # wrong names
    "WPS111", # short variable name
    "WPS115", # upper-case constant
    "WPS432", # magic numbers
    # Complexity
    "WPS2",
    "WPS202", # too many module members
    "WPS210", # too many local vars
    "WPS211", # too many arguments
    "WPS213", # too many expressions
    "WPS214", # too many methods
    "WPS220", # deep nesting
    "WPS221", # jones complexity
    "WPS229", # too long try
]
per-file-ignores = [
    "./tests/*:WPS118,WPS301,WPS336,WPS420,WPS430,WPS431,WPS458,WPS473,WPS520,WPS604",
    "version.py:WPS410",
    "evernote_client_api_http.py:WPS116,WPS338",
    "evernote_client_api_tokenized.py:WPS347",
    "log_util.py:WPS301,WPS458",
    "note_formatter_util.py:WPS509",
    "note_storage.py:WPS615",
]
max-line-length = 88
count = true
exclude = [".*"]

[tool.black]
line-length = 88

[tool.isort]
profile = "black"
skip_gitignore = true

[tool.coverage]
    [tool.coverage.report]
    show_missing = true
    exclude_lines = [
        # Have to re-enable the standard pragma
        'pragma: no cover',

        # Don't complain about missing debug-only code:
        'def __repr__',
        'if self\.debug',

        # Don't complain if tests don't hit defensive assertion code:
        'raise AssertionError',
        'raise NotImplementedError',

        # Don't complain if non-runnable code isn't run:
        'if 0:',
        'if __name__ == .__main__.:'
    ]
    omit = [
        '*/tests/*'
    ]

[tool.mypy]
files = "evernote_backup"

disallow_untyped_defs = true
#disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true

warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true

check_untyped_defs = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "evernote_backup.evernote_client_api_tokenized"
ignore_errors = true

[[tool.mypy.overrides]]
module = "evernote_backup.cli"
disable_error_code = ["misc"]
