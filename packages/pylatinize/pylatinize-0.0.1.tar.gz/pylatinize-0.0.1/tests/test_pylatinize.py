import pytest
from pylatinize import PyLatinize, Normalization, default_mapping, emoji_mapping


class TestPylatinize:
    def test_decompose_shouldreturn_complexeol(self):
        input = "To insert this: \tPress these keys:\r\n√†, √®, √¨, √≤, √π, √Ä, √à, √å, √í, √ô \tCtrl+` (accent grave), the letter\r\n√°, √©, √≠, √≥, √∫, √Ω, √Å, √â, √ç, √ì, √ö, √ù\tCtrl+' (apostrophe), the letter\r\n√¢, √™, √Æ, √¥, √ª, √Ç, √ä, √é, √î, √õ\tCtrl+Shift+^ (caret), the letter\r\n√£, √±, √µ, √É, √ë, √ï\tCtrl+Shift+~ (tilde), the letter\r\n√§, √´, √Ø, √∂, √º, √ø, √Ñ, √ã, √è, √ñ, √ú, ≈∏\tCtrl+Shift+: (colon), the letter\r\n√•, √Ö\tCtrl+Shift+@ (At), a or A\r\n√¶, √Ü\tCtrl+Shift+& (ampersand), a or A\r\n≈ì, ≈í\tCtrl+Shift+& (ampersand), o or O\r\n√ß, √á\tCtrl+, (comma), c or C\r\n√∞, √ê\tCtrl+' (apostrophe), d or D\r\n√∏, √ò\tCtrl+/, o or O\r\n¬ø\tAlt+Ctrl+Shift+?\r\n¬°\tAlt+Ctrl+Shift+!\r\n√ü\tCtrl+Shift+&, s"
        expected = "To insert this: \tPress these keys:\r\na, e, i, o, u, A, E, I, O, U \tCtrl+` (accent grave), the letter\r\na, e, i, o, u, y, A, E, I, O, U, Y\tCtrl+' (apostrophe), the letter\r\na, e, i, o, u, A, E, I, O, U\tCtrl+Shift+^ (caret), the letter\r\na, n, o, A, N, O\tCtrl+Shift+~ (tilde), the letter\r\nae, e, i, oe, ue, y, Ae, E, I, Oe, Ue, Y\tCtrl+Shift+: (colon), the letter\r\na, A\tCtrl+Shift+@ (At), a or A\r\nae, AE\tCtrl+Shift+& (ampersand), a or A\r\n≈ì, ≈í\tCtrl+Shift+& (ampersand), o or O\r\nc, C\tCtrl+, (comma), c or C\r\nd, D\tCtrl+' (apostrophe), d or D\r\no, O\tCtrl+/, o or O\r\n¬ø\tAlt+Ctrl+Shift+?\r\n¬°\tAlt+Ctrl+Shift+!\r\nss\tCtrl+Shift+&, s"
        latinizer = PyLatinize(mappings=(default_mapping,))
        assert latinizer.decompose(input) == expected

    def test_decompose_shouldreturn_headshakinghorizontally(self):
        input = "üôÇ‚Äç‚ÜîÔ∏è"
        expected = "head shaking horizontally"
        latinizer = PyLatinize(mappings=(emoji_mapping,))
        assert latinizer.decompose(input) == expected

    def test_decompose_shouldreturn_nerdface(self):
        input = "ü§ì"
        expected = "nerd face"
        latinizer = PyLatinize(mappings=(emoji_mapping,))
        assert latinizer.decompose(input) == expected

    def test_decompose_shouldreturn_decomposedbasicunicodetext(self):
        input = "√©√°≈±≈ë√∫√≥√º√∂√≠√â√Å≈∞√ö≈ê√ì√ú√ñ√ç√¥≈à√∫√§√©√°√Ω≈æ≈•ƒç≈°ƒæ√î≈á√ö√Ñ√â√Å√ù≈Ω≈§ƒå≈†ƒΩ"
        expected = "eauououeoeiEAUUOOUeOeIonuaeeayztcslONUAeEAYZTCSL"
        latinizer = PyLatinize(mappings=(default_mapping,))
        assert latinizer.decompose(input) == expected

    def test_decompose_shouldreturn_complextext(self):
        input = "‰Ω†Â•Ω, ‰∏ñÁïå! This is a test with √ºmlauts(√º√∂√§) and emojis üòäüëç."
        expected = "‰Ω†Â•Ω, ‰∏ñÁïå! This is a test with uemlauts(ueoeae) and emojis smiling face with smiling eyesthumbs up."
        latinizer = PyLatinize(mappings=(default_mapping, emoji_mapping))
        assert latinizer.decompose(input) == expected

    def test_testdecompose_englishwithsymbolsandaccents(self):
        input = "I ‚ù§ cof√©e"
        expected = "I red heart cofee"
        latinizer = PyLatinize(mappings=(default_mapping, emoji_mapping))
        assert latinizer.decompose(input) == expected

    def test_testdecompose_germanwithumlauts(self):
        input = "Fu√üg√§nger√ºberg√§nge"
        expected = "Fussgaengeruebergaenge"
        latinizer = PyLatinize(mappings=(default_mapping, emoji_mapping))
        assert latinizer.decompose(input) == expected

    def test_testdecompose_russian(self):
        input = "–Ø –ª—é–±–ª—é –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–≤"
        expected = "Ya lyublyu edinorogov"
        latinizer = PyLatinize(mappings=(default_mapping, emoji_mapping))
        assert latinizer.decompose(input) == expected

    def test_testdecompose_arabic(self):
        input = "ÿ£ŸÜÿß ÿ£ÿ≠ÿ® ÿ≠ŸäÿØÿßÿ™"
        expected = "ana ahb hydat"
        latinizer = PyLatinize(mappings=(default_mapping, emoji_mapping))
        assert latinizer.decompose(input) == expected

    def test_testdecompose_vietnamese(self):
        input = "t√¥i y√™u nh·ªØng ch√∫ k·ª≥ l√¢n"
        expected = "toi yeu nhung chu ky lan"
        latinizer = PyLatinize(mappings=(default_mapping, emoji_mapping))
        assert latinizer.decompose(input) == expected

    def test_testdecompose_none_input(self):
        input = None
        latinizer = PyLatinize(mappings=(default_mapping, emoji_mapping))
        with pytest.raises(ValueError):
            latinizer.decompose(input)

    def test_testdecompose_emptyinput(self):
        input = ""
        latinizer = PyLatinize(mappings=(default_mapping, emoji_mapping))
        with pytest.raises(ValueError):
            latinizer.decompose(input)

    def test_testdecompose_invalidunicodestring(self):
        input = f"ValidPart {chr(0xD800)} AnotherValidPart"
        latinizer = PyLatinize(mappings=(default_mapping, emoji_mapping))
        with pytest.raises(ValueError):
            latinizer.decompose(input)


if __name__ == "__main__":
    pytest.main()
