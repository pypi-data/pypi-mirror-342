<?xml version="1.0" encoding="ISO-8859-1" ?>

<!--////////////////////////////////////////////////////////////////////////////
// <file>
//   <license>
//      Copyright (c) 2006-2022 Clemson University.
//
//      This file is part of the Clemson Webnucleo group's
//      libnucnet module, originally developed by David C. Adams
//      and Bradley S. Meyer.  For more information,
//      please see http://www.webnucleo.org.
//
//      This is free software; you can redistribute it and/or modify it
//      under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//
//      This software is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//
//      To obtain a copy of the GNU GPL, write to the Free Software
//      Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
//      USA
//   </license>
//
//   <description>
//     <abstract>
//       XML schema defining types to use with the Libnucnet__Nuc schema.
//     </abstract>
//     <keywords>
//       nuclear, data, schema, valid, types
//     </keywords>
//   </description>
//
//   <authors>
//     <current>
//       <author userid="mbradle" start_date="2007/08/06" />
//       <author userid="pallen" start_date="2007/08/06" />
//     </current>
//     <previous>
//     </previous>
//   </authors>
//
//   <compatibility>
//     Tested with xmllint: using libxml version 20629
//     compiled with: Threads Tree Output Push Reader Patterns Writer SAXv1
//     FTP HTTP DTDValid HTML Legacy C14N Catalog XPath XPointer XInclude
//     Iconv ISO8859X Unicode Regexps Automata Expr Schemas Schematron 
//     odules Debug Zlib 
//   </compatibility>
//
// </file>
/////////////////////////////////////////////////////////////////////////////-->


<xsd:schema
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:ndt="https://libnucnet.sourceforge.net/xsd_pub/2022-10-08/libnucnet__nuc__types/"
  targetNamespace="https://libnucnet.sourceforge.net/xsd_pub/2022-10-08/libnucnet__nuc__types/"
>

<xsd:import
  namespace="http://www.w3.org/XML/1998/namespace"
  schemaLocation="https://libnucnet.sourceforge.net/xsd_pub/w3c_copy/2005/08/xml.xsd"
/>

<!--============================================================================
// Simple types.
//===========================================================================-->

<xsd:simpleType name="z_type">
  <xsd:restriction base="xsd:nonNegativeInteger"/>
</xsd:simpleType>

<xsd:simpleType name="a_type">
  <xsd:restriction base="xsd:positiveInteger"/>
</xsd:simpleType>

<xsd:simpleType name="source_type">
  <xsd:restriction base="xsd:string"/>
</xsd:simpleType>

<xsd:simpleType name="mass_type">
  <xsd:restriction base="xsd:float"/>
</xsd:simpleType>

<xsd:simpleType name="spin_type">
  <xsd:restriction base="xsd:float">
    <xsd:minInclusive value="0.0"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="log10_partf_type">
  <xsd:restriction base="xsd:float">
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="t9_type">
  <xsd:restriction base="xsd:float">
    <xsd:minInclusive value="0.0"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="state_id_type">
  <xsd:restriction base="xsd:string">
    <xsd:pattern value="g|m\d{0,}"/>
  </xsd:restriction>
</xsd:simpleType>

<!--============================================================================
// Complex types.
//===========================================================================-->

<xsd:complexType name="nuclide_type">
  <xsd:sequence>
    <xsd:element name="z" type="ndt:z_type" />
    <xsd:element name="a" type="ndt:a_type" />
    <xsd:choice>
      <xsd:group ref="ndt:data"/>
      <xsd:element name="states" type="ndt:states_type" />
    </xsd:choice>
  </xsd:sequence>
  <xsd:attribute ref="xml:base"/>
</xsd:complexType>

<xsd:group name="data">
  <xsd:sequence>
    <xsd:element name="source" type="ndt:source_type" minOccurs="0" />
    <xsd:element name="mass_excess" type="ndt:mass_type" />
    <xsd:element name="spin" type="ndt:spin_type" />
    <xsd:element name="partf_table" type="ndt:partf_table_type" />
  </xsd:sequence>
</xsd:group>

<xsd:complexType name="states_type">
  <xsd:sequence>
    <xsd:element
       name="state"
       type="ndt:state_type"
       minOccurs="1" maxOccurs="unbounded"
    />
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="state_type">
  <xsd:group ref="ndt:data"/>
  <xsd:attribute name="id" type="ndt:state_id_type" use="required"/>
</xsd:complexType>

<xsd:complexType name="partf_table_type">
  <xsd:sequence>
    <xsd:element
      name="point" type="ndt:partf_table_point_type"
      minOccurs="0"
      maxOccurs="unbounded"
    />
  </xsd:sequence>
</xsd:complexType>


<xsd:complexType name="partf_table_point_type">
  <xsd:sequence>
    <xsd:element name="t9" type="ndt:t9_type" />
    <xsd:element name="log10_partf" type="ndt:log10_partf_type" />
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="nuclear_data_type">
  <xsd:sequence>
    <xsd:element name="nuclide" type="ndt:nuclide_type"
      minOccurs="1" maxOccurs="unbounded"
    />
  </xsd:sequence>
</xsd:complexType>

</xsd:schema> 
