Metadata-Version: 2.4
Name: rr-block
Version: 0.1.2
Summary: The remix and reactivate (RR) Block for PyTorch
Author-email: Anonymous <u2ido6jir@mozmail.com>
License: MIT
Project-URL: Homepage, https://github.com/
Project-URL: Repository, https://github.com/
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: GPU :: NVIDIA CUDA
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Typing :: Typed
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: torch>=1.8
Provides-Extra: dev
Requires-Dist: pytest>=8.0; extra == "dev"
Requires-Dist: build; extra == "dev"
Requires-Dist: twine; extra == "dev"

# Remix and Reactivate (RR)

The remix and reactivate (RR) Block official implementation for PyTorch.

## Installation

You can install this package using pip:

```bash
pip install rr-block
```

## Usage
Here is a simple example of how to use the RR block in your PyTorch model:

```python
import torch
import torch.nn as nn
from rr_block import RR

class SimpleModel(nn.Module):
    def __init__(self, input_dim, output_dim):
        super(SimpleModel, self).__init__()
        self.fc1 = nn.Linear(input_dim, 128)
        self.rr = RR(128, [nn.ReLU(), nn.Sigmoid()])
        self.fc2 = nn.Linear(128, output_dim)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = self.rr(x)
        x = self.fc2(x)
        return x

```

## Build and Development

To build the package from source, you can use the following commands:

```bash
pip install -e .
```
This will install the package in editable mode, allowing you to make changes to the source code and have them reflected in your Python environment.
