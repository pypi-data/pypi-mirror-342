# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawAnalyticsClient
from .. import core
from ..types.speech_to_text_translate_model import SpeechToTextTranslateModel
from ..core.request_options import RequestOptions
from ..types.call_analytics_response import CallAnalyticsResponse
from ..types.text_analytics_response import TextAnalyticsResponse
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawAnalyticsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AnalyticsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAnalyticsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAnalyticsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAnalyticsClient
        """
        return self._raw_client

    def call(
        self,
        *,
        file: core.File,
        questions: str,
        hotwords: typing.Optional[str] = OMIT,
        model: typing.Optional[SpeechToTextTranslateModel] = OMIT,
        with_diarization: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CallAnalyticsResponse:
        """
        Given an audio file of a call between two parties and a list of questions, This API analyzes the content and returns the transcript, along with responses to the questions. Each response is supported by reasoning and exact phrases extracted from the transcript.

        ⚠️ Important: Please use Batch API Notebook for call recordings more than 30 seconds.

        Duration Guidelines:
        - Files under 30 seconds: Use this direct API endpoint
        - Files over 30 seconds: Use our Batch API (required)

        Resources:
        1. Interactive Demo: [Try Call Analytics Playground](https://call-analytics-playground.streamlit.app/)
        2. Batch API Documentation: [View Notebook](https://github.com/sarvamai/sarvam-ai-cookbook/tree/main/notebooks/call-analytics/)

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        questions : str
            List of questions to be answered based on the call content. Each question should be a valid `JSON` object with the following structure: ```{id: string, text: string, description: string (optional), type: string, properties: object}```.
            The `type` field must be one of: `boolean`, `enum`, `short answer`, `long answer`, or `number`.
            For `enum` type questions, include an 'options' list in the properties.

        hotwords : typing.Optional[str]
            Optional comma-separated string of keywords specific to your domain. These keywords will be preserved as-is in the transcript.

        model : typing.Optional[SpeechToTextTranslateModel]
            Model to be used for converting speech to text in target language

        with_diarization : typing.Optional[bool]
            Include diarization in the output

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CallAnalyticsResponse
            Successful Response

        Examples
        --------
        from sarvamai import SarvamAI

        client = SarvamAI(
            api_subscription_key="YOUR_API_SUBSCRIPTION_KEY",
            api_key="YOUR_API_KEY",
        )
        client.analytics.call(
            questions="questions",
        )
        """
        response = self._raw_client.call(
            file=file,
            questions=questions,
            hotwords=hotwords,
            model=model,
            with_diarization=with_diarization,
            request_options=request_options,
        )
        return response.data

    def text(
        self, *, text: str, questions: str, request_options: typing.Optional[RequestOptions] = None
    ) -> TextAnalyticsResponse:
        """
        This endpoint performs comprehensive text analysis on provided content and answers specific questions about the text. Each response is supported by reasoning and the exact phrase extracted from the content.

        Parameters
        ----------
        text : str
            The text content to be analyzed. This should be a non-empty string containing the full text for analysis.

        questions : str
            List of questions to be answered based on the call content. Each question should be a valid JSON object with the following structure: ```{id: string, text: string, description: string (optional), type: string, properties: object}.```The `type` field must be one of: `boolean`, `enum`, `short answer`, `long answer`, or `number`. For `enum` type questions, include an 'options' list in the properties.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TextAnalyticsResponse
            Successful Response

        Examples
        --------
        from sarvamai import SarvamAI

        client = SarvamAI(
            api_subscription_key="YOUR_API_SUBSCRIPTION_KEY",
            api_key="YOUR_API_KEY",
        )
        client.analytics.text(
            text="Climate change is a critical global challenge that demands immediate attention. Rising temperatures, extreme weather events, and sea level rise are just a few of the consequences we're already experiencing. Scientists emphasize the urgency of limiting global warming to 1.5°C above pre-industrial levels to avoid the most severe consequences. This requires significant reductions in greenhouse gas emissions across all sectors of society.",
            questions="questions",
        )
        """
        response = self._raw_client.text(text=text, questions=questions, request_options=request_options)
        return response.data


class AsyncAnalyticsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAnalyticsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAnalyticsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAnalyticsClient
        """
        return self._raw_client

    async def call(
        self,
        *,
        file: core.File,
        questions: str,
        hotwords: typing.Optional[str] = OMIT,
        model: typing.Optional[SpeechToTextTranslateModel] = OMIT,
        with_diarization: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CallAnalyticsResponse:
        """
        Given an audio file of a call between two parties and a list of questions, This API analyzes the content and returns the transcript, along with responses to the questions. Each response is supported by reasoning and exact phrases extracted from the transcript.

        ⚠️ Important: Please use Batch API Notebook for call recordings more than 30 seconds.

        Duration Guidelines:
        - Files under 30 seconds: Use this direct API endpoint
        - Files over 30 seconds: Use our Batch API (required)

        Resources:
        1. Interactive Demo: [Try Call Analytics Playground](https://call-analytics-playground.streamlit.app/)
        2. Batch API Documentation: [View Notebook](https://github.com/sarvamai/sarvam-ai-cookbook/tree/main/notebooks/call-analytics/)

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        questions : str
            List of questions to be answered based on the call content. Each question should be a valid `JSON` object with the following structure: ```{id: string, text: string, description: string (optional), type: string, properties: object}```.
            The `type` field must be one of: `boolean`, `enum`, `short answer`, `long answer`, or `number`.
            For `enum` type questions, include an 'options' list in the properties.

        hotwords : typing.Optional[str]
            Optional comma-separated string of keywords specific to your domain. These keywords will be preserved as-is in the transcript.

        model : typing.Optional[SpeechToTextTranslateModel]
            Model to be used for converting speech to text in target language

        with_diarization : typing.Optional[bool]
            Include diarization in the output

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CallAnalyticsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from sarvamai import AsyncSarvamAI

        client = AsyncSarvamAI(
            api_subscription_key="YOUR_API_SUBSCRIPTION_KEY",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.analytics.call(
                questions="questions",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.call(
            file=file,
            questions=questions,
            hotwords=hotwords,
            model=model,
            with_diarization=with_diarization,
            request_options=request_options,
        )
        return response.data

    async def text(
        self, *, text: str, questions: str, request_options: typing.Optional[RequestOptions] = None
    ) -> TextAnalyticsResponse:
        """
        This endpoint performs comprehensive text analysis on provided content and answers specific questions about the text. Each response is supported by reasoning and the exact phrase extracted from the content.

        Parameters
        ----------
        text : str
            The text content to be analyzed. This should be a non-empty string containing the full text for analysis.

        questions : str
            List of questions to be answered based on the call content. Each question should be a valid JSON object with the following structure: ```{id: string, text: string, description: string (optional), type: string, properties: object}.```The `type` field must be one of: `boolean`, `enum`, `short answer`, `long answer`, or `number`. For `enum` type questions, include an 'options' list in the properties.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TextAnalyticsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from sarvamai import AsyncSarvamAI

        client = AsyncSarvamAI(
            api_subscription_key="YOUR_API_SUBSCRIPTION_KEY",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.analytics.text(
                text="Climate change is a critical global challenge that demands immediate attention. Rising temperatures, extreme weather events, and sea level rise are just a few of the consequences we're already experiencing. Scientists emphasize the urgency of limiting global warming to 1.5°C above pre-industrial levels to avoid the most severe consequences. This requires significant reductions in greenhouse gas emissions across all sectors of society.",
                questions="questions",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.text(text=text, questions=questions, request_options=request_options)
        return response.data
