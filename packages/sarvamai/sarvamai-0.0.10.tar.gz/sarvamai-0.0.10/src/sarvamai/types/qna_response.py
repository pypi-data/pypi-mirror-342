# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class QnaResponse(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    Unique identifier for the question-answer pair, corresponding to the question ID in the request.
    """

    question: str = pydantic.Field()
    """
    The original question text that was asked and analyzed.
    """

    reasoning: str = pydantic.Field()
    """
    Explanation or reasoning provided by the analysis model to justify the answer.
    """

    response: str = pydantic.Field()
    """
    The answer to the question, derived from the call analysis. The format may vary based on the question type (e.g., boolean, enum, text).
    """

    utterance: str = pydantic.Field()
    """
    Relevant excerpt from the call transcript that supports the answer. This provides direct evidence for the response.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
