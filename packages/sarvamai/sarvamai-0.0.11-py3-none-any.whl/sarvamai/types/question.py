# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .question_type import QuestionType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Question(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    Unique identifier for the question. This should be a short, distinct string or number.
    """

    text: str = pydantic.Field()
    """
    The actual text of the question to be answered based on the call content.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Optional description or context for the question. Use this to provide additional information to the LLM for better reasoning.
    """

    type: QuestionType = pydantic.Field()
    """
    The type of question, which determines how it should be answered and processed. Valid types are:
    - boolean: A yes/no question
    - enum: A question with predefined answer options
    - short answer: A question requiring a brief text response
    - long answer: A question requiring a detailed text response
    - number: A question expecting a numeric answer
    """

    properties: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Additional properties specific to the question type. For 'enum' types, this should include an 'options' list. 
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
