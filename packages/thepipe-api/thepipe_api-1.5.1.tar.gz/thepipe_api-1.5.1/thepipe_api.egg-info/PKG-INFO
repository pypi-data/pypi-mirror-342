Metadata-Version: 2.1
Name: thepipe_api
Version: 1.5.1
Summary: Document extraction, powered by multimodal LLMs.
Home-page: https://github.com/emcf/thepipe
Author: Emmett McFarlane
Author-email: emmett@thepi.pe
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: llama-index==0.10.50
Requires-Dist: aiohttp<4.0.0,>=3.8.6
Requires-Dist: charset-normalizer
Requires-Dist: colorama
Requires-Dist: requests
Requires-Dist: pillow
Requires-Dist: pydantic
Requires-Dist: supabase
Requires-Dist: markdownify==0.12.1
Requires-Dist: magika
Requires-Dist: scikit-learn
Requires-Dist: torch
Requires-Dist: torchvision
Requires-Dist: torchaudio
Requires-Dist: docx2txt
Requires-Dist: python-pptx
Requires-Dist: Pyarrow
Requires-Dist: poppler-utils
Requires-Dist: python-magic
Requires-Dist: pandas
Requires-Dist: pytesseract
Requires-Dist: cssutils
Requires-Dist: beautifulsoup4
Requires-Dist: PyMuPDF
Requires-Dist: pdf2image
Requires-Dist: python-dotenv
Requires-Dist: moviepy==1.0.3
Requires-Dist: openpyxl
Requires-Dist: pytube
Requires-Dist: ffmpeg-python
Requires-Dist: python-docx
Requires-Dist: pymupdf4llm
Requires-Dist: pytest-playwright
Requires-Dist: playwright
Requires-Dist: jwt
Requires-Dist: sentence-transformers
Requires-Dist: marker-pdf
Requires-Dist: modal

<div align="center">
  <a href="https://thepi.pe/">
    <img src="https://rpnutzemutbrumczwvue.supabase.co/storage/v1/object/public/assets/pipeline_small%20(1).png" alt="Pipeline Illustration" style="width:96px; height:72px; vertical-align:middle;">
    <h1>thepi.pe</h1>
  </a>
  <a>
    <img src="https://github.com/emcf/thepipe/actions/workflows/python-ci.yml/badge.svg" alt="python-gh-action">
  </a>
    <a href="https://codecov.io/gh/emcf/thepipe">
    <img src="https://codecov.io/gh/emcf/thepipe/graph/badge.svg?token=OE7CUEFUL9" alt="codecov">
  </a>
  <a href="https://raw.githubusercontent.com/emcf/thepipe/main/LICENSE">
    <img src="https://img.shields.io/badge/license-MIT-green" alt="MIT license">
  </a>
  <a href="https://www.pepy.tech/projects/thepipe-api">
    <img src="https://static.pepy.tech/badge/thepipe-api" alt="PyPI">
  </a>
  <a href="https://thepi.pe/">
    <img src="https://img.shields.io/website?url=https%3A%2F%2Fthepipe-api.up.railway.app%2F&label=API%20status" alt="Website">
  </a>
</div>

### Extract clean data from tricky documents ‚ö°

thepi.pe is a package that can scrape clean markdown and multimodal media from complex documents. It uses vision-language models (VLMs) under the hood for superior output quality, and works out-of-the-box with any LLM, VLM, or vector database. It can extract well-formatted data from a wide range of sources, including PDFs, URLs, Word docs, Powerpoints, Python notebooks, videos, audio, and more.

## Features üåü

- Scrape clean markdown, tables, and images from any document
- Scrape text, images, video, and audio from any file or URL
- Works out-of-the-box with vision-language models, vector databases, and RAG frameworks
- AI-native filetype detection, layout analysis, and structured data extraction
- Accepts a wide range of sources, including PDFs, URLs, Word docs, Powerpoints, Python notebooks, GitHub repos, videos, audio, and more

## Get started in 5 minutes üöÄ

```bash
pip install thepipe-api
```

Ensure you have two environment variables set: `LLM_SERVER_BASE_URL` and `LLM_SERVER_API_KEY`. For example:

```bash
LLM_SERVER_BASE_URL=https://api.openai.com
LLM_SERVER_API_KEY=your-api-key
```

You can use any LLM server that follows OpenAI format (such as [OpenAI](https://platform.openai.com/), a locally hosted [LiteLLM](https://github.com/BerriAI/litellm) instance, or a model provider such as [OpenRouter](https://openrouter.ai/)). A `DEFAULT_AI_MODEL` environment variable can be set to your VLM of choice. For example, you could use `google/gemini-2.0-flash-001` if using OpenRouter or `gpt-4o` if using OpenAI.

If you want full functionality with media-rich sources such as webpages, video, and audio, you can choose to install the following dependencies:

```bash
apt-get update && apt-get install -y git ffmpeg
python -m playwright install --with-deps chromium
```

### Scraping

```python
from openai import OpenAI
from thepipe.scraper import scrape_file
from thepipe.core import chunks_to_messages

# scrape clean markdown and images from a PDF
chunks = scrape_file(filepath="paper.pdf", ai_extraction=True)
```

### Chunking

To satisfy token limit constraints, the following chunking methods are available to split the content into smaller chunks.

- `chunk_by_document`: Returns one chunk with the entire content.
- `chunk_by_page`: Splits the content into chunks at each page (for example: each webpage, PDF page, or powerpoint slide).
- `chunk_by_length`: Splits the content into chunks by length.
- `chunk_by_section`: Splits the content into chunks by markdown section.
- `chunk_semantic`: Splits the content into chunks at spikes in semantic changes (experimental).

For example,

```python
from thepipe.core import chunk_by_page
from thepipe.chunker import chunk_by_page

# returns one chunk for the entire document
doc_chunks = scrape_file(filepath="paper.pdf", chunking_method=chunk_by_doc)

# you can also re-chunk later
page_chunks = chunk_by_page(doc_chunks)
```

> ‚ö†Ô∏è **It is important to be mindful of your model's token limit.**
> Be sure your prompt is within the token limit of your model. You can use chunking to split your messages into smaller chunks.

### OpenAI Integration ü§ñ

```python
# Initialize OpenAI client
client = OpenAI()

# Example chat messages to be sent to LLM
messages = [
  {
    "role": "user", "content": [
      {"type": "text", "text": "What is the paper about?"}
    ]
  }
]

# simply add the scraped chunks to the messages
messages += chunks_to_messages(chunks)

# call LLM with scraped chunks
response = client.chat.completions.create(
    model="gpt-4o",
    messages=messages,
)
```

The output from thepi.pe is a list of chunks containing all content and media within the source document. These chunks can easily be converted to a prompt format that is compatible with any LLM or VLM with `thepipe.core.chunks_to_messages`, which gives the following format:

```json
[
  {
    "role": "user",
    "content": [
      {
        "type": "text",
        "text": "..."
      },
      {
        "type": "image_url",
        "image_url": {
          "url": "data:image/jpeg;base64,..."
        }
      }
    ]
  }
]
```

It takes in an optional `text_only` parameter to only output text from the source document. This is useful for downstream use with LLMs that lack multimodal capabilities.

### LLamaIndex Integration ü¶ô

A chunk can be converted to LlamaIndex Document/ImageDocument with `.to_llamaindex`.

## Sponsors

Visit [Cal.com](https://cal.com/) for an open source scheduling tool that helps you book meetings with ease. It's the perfect solution for busy professionals who want to streamline their scheduling process.

<a href="https://cal.com/emmett-mcf/30min"><img alt="Book us with Cal.com" src="https://cal.com/book-with-cal-dark.svg" /></a>

Looking for enterprise-ready document processing and intelligent automation? Discover
how [Trellis AI](https://runtrellis.com/) can streamline your workflows and enhance productivity.

please consider supporting thepipe by [becoming a sponsor](mailto:emmett@thepi.pe).

## How it works üõ†Ô∏è

thepipe uses a combination of computer vision models and heuristics to scrape clean content from the source and process it for downstream use with [large language models](https://en.wikipedia.org/wiki/Large_language_model), or [vision-language models](https://en.wikipedia.org/wiki/Vision_transformer). You can feed these messages directly into the model, or alternatively you can chunk these messages for downstream storage in a vector database such as ChromaDB, LLamaIndex, or equivalent RAG framework.

## Supported File Types üìö

| Source                       | Input types                                                                          | Multimodal | Notes                                                                                                                                                                                                                                         |
| ---------------------------- | ------------------------------------------------------------------------------------ | ---------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Webpage                      | URLs starting with `http`, `https`, `ftp`                                            | ‚úîÔ∏è         | Scrapes markdown, images, and tables from web pages. `ai_extraction` available for AI content extraction from the webpage's screenshot                                                                                                        |
| PDF                          | `.pdf`                                                                               | ‚úîÔ∏è         | Extracts page markdown and page images. `ai_extraction` available to use a VLM for complex or scanned documents                                                                                                                               |
| Word Document                | `.docx`                                                                              | ‚úîÔ∏è         | Extracts text, tables, and images                                                                                                                                                                                                             |
| PowerPoint                   | `.pptx`                                                                              | ‚úîÔ∏è         | Extracts text and images from slides                                                                                                                                                                                                          |
| Video                        | `.mp4`, `.mov`, `.wmv`                                                               | ‚úîÔ∏è         | Uses Whisper for transcription and extracts frames                                                                                                                                                                                            |
| Audio                        | `.mp3`, `.wav`                                                                       | ‚úîÔ∏è         | Uses Whisper for transcription                                                                                                                                                                                                                |
| Jupyter Notebook             | `.ipynb`                                                                             | ‚úîÔ∏è         | Extracts markdown, code, outputs, and images                                                                                                                                                                                                  |
| Spreadsheet                  | `.csv`, `.xls`, `.xlsx`                                                              | ‚ùå         | Converts each row to JSON format, including row index for each                                                                                                                                                                                |
| Plaintext                    | `.txt`, `.md`, `.rtf`, etc                                                           | ‚ùå         | Simple text extraction                                                                                                                                                                                                                        |
| Image                        | `.jpg`, `.jpeg`, `.png`                                                              | ‚úîÔ∏è         | Uses pytesseract for OCR in text-only mode                                                                                                                                                                                                    |
| ZIP File                     | `.zip`                                                                               | ‚úîÔ∏è         | Extracts and processes contained files                                                                                                                                                                                                        |
| Directory                    | any `path/to/folder`                                                                 | ‚úîÔ∏è         | Recursively processes all files in directory                                                                                                                                                                                                  |
| YouTube Video (known issues) | YouTube video URLs starting with `https://youtube.com` or `https://www.youtube.com`. | ‚úîÔ∏è         | Uses pytube for video download and Whisper for transcription. For consistent extraction, you may need to modify your `pytube` installation to send a valid user agent header (see [this issue](https://github.com/pytube/pytube/issues/399)). |
| Tweet                        | URLs starting with `https://twitter.com` or `https://x.com`                          | ‚úîÔ∏è         | Uses unofficial API, may break unexpectedly                                                                                                                                                                                                   |
| GitHub Repository            | GitHub repo URLs starting with `https://github.com` or `https://www.github.com`      | ‚úîÔ∏è         | Requires GITHUB_TOKEN environment variable                                                                                                                                                                                                    |
