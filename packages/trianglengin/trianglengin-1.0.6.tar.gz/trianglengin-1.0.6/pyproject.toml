# File: pyproject.toml
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "trianglengin"
version = "1.0.6" # Updated version
authors = [{ name="Luis Guilherme P. M.", email="lgpelin92@gmail.com" }]
description = "Core engine (game logic, features, data) for a triangle puzzle game." # Updated description
readme = "README.md"
license = { file="LICENSE" }
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Games/Entertainment :: Puzzle Games",
    "Development Status :: 4 - Beta", # Consider updating status if appropriate for 1.0.0
]
dependencies = [
    "numpy>=1.20.0",
    "pydantic>=2.0.0",
    "typing_extensions>=4.0.0",
    "pygame>=2.1.0", # Added Pygame
    "typer[all]>=0.9.0", # Added Typer for CLI
    # Add other core dependencies as needed
]

[project.urls]
"Homepage" = "https://github.com/lguibr/trianglengin" # Updated URL
"Bug Tracker" = "https://github.com/lguibr/trianglengin/issues" # Updated URL

[project.scripts]
trianglengin = "trianglengin.cli:app"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.0.0",
    "ruff",
    "mypy",
    "build",
    "twine",
    "codecov",
    # Add Ray here if testing StatsCollectorActor locally
    # "ray>=2.8.0",
]

[tool.setuptools.packages.find]
where = ["."] # Search for packages in the root directory

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.json"] # Include non-code files

# --- Tool Configurations (Optional but Recommended) ---

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "UP", "B", "C4", "ARG", "SIM", "TCH", "PTH", "NPY"]
ignore = ["E501"] # Ignore line length errors if needed selectively

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Start with true, gradually reduce

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=trianglengin --cov-report=term-missing"
testpaths = [
    "tests",
]

[tool.coverage.run]
omit = [
    "*/__init__.py",
    "*/README.md",
    "trianglengin/config/*", # Config models are mostly declarative
    "trianglengin/utils/types.py", # Simple type aliases
    "trianglengin/core/structs/*", # Simple data structures
    "trianglengin/app.py", # UI App difficult to cover fully
    "trianglengin/cli.py", # CLI difficult to cover fully
    "trianglengin/visualization/core/fonts.py", # Font loading depends on system
    "tests/*", # Exclude tests from coverage report
]

[tool.coverage.report]
fail_under = 50 # Start with a reasonable target for core logic
show_missing = true