Metadata-Version: 2.4
Name: trianglengin
Version: 2.0.1
Summary: High-performance C++/Python engine for a triangle puzzle game.
Author-email: "Luis Guilherme P. M." <lgpelin92@gmail.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/lguibr/trianglengin
Project-URL: Bug Tracker, https://github.com/lguibr/trianglengin/issues
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: C++
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Games/Entertainment :: Puzzle Games
Classifier: Development Status :: 4 - Beta
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.20.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: typing_extensions>=4.0.0
Requires-Dist: pygame>=2.1.0
Requires-Dist: typer[all]>=0.9.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=3.0.0; extra == "dev"
Requires-Dist: pytest-mock>=3.0.0; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: build; extra == "dev"
Requires-Dist: twine; extra == "dev"
Requires-Dist: codecov; extra == "dev"
Dynamic: license-file


[![CI Status](https://github.com/lguibr/trianglengin/actions/workflows/ci_cd.yml/badge.svg)](https://github.com/lguibr/trianglengin/actions/workflows/ci_cd.yml)
[![codecov](https://codecov.io/gh/lguibr/trianglengin/graph/badge.svg?token=YOUR_CODECOV_TOKEN_HERE&flag=trianglengin)](https://codecov.io/gh/lguibr/trianglengin)
[![PyPI version](https://badge.fury.io/py/trianglengin.svg)](https://badge.fury.io/py/trianglengin)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python Version](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)

# Triangle Engine (`trianglengin`) v2
<img src="bitmap.png" alt="trianglengin logo" width="300"/>

**Version 2 introduces a high-performance C++ core for the game logic.**

This library provides the core components for a triangle puzzle game, suitable for reinforcement learning agents or other applications requiring a fast game engine. Interactive play/debug modes are included.

It encapsulates:

1.  **Core Game Logic (C++):** High-performance implementation of environment rules, state representation, actions, placement validation, and line clearing. ([`src/trianglengin/cpp/README.md`](src/trianglengin/cpp/README.md))
2.  **Python Interface:** A Python `GameState` wrapper providing a user-friendly API to interact with the C++ core. ([`src/trianglengin/game_interface.py`](src/trianglengin/game_interface.py))
3.  **Configuration (Python/Pydantic):** Models for environment settings (`EnvConfig`). ([`src/trianglengin/config/README.md`](src/trianglengin/config/README.md))
4.  **Utilities (Python):** General helpers, geometry functions, shared types. ([`src/trianglengin/utils/README.md`](src/trianglengin/utils/README.md))
5.  **UI Components (Python/Pygame/Typer):** Basic visualization, interaction handling, and CLI for interactive modes. ([`src/trianglengin/ui/README.md`](src/trianglengin/ui/README.md))

---

## ðŸŽ® The Ultimate Triangle Puzzle Guide ðŸ§©

*(Game rules remain the same)*

*(... Game rules section remains unchanged ...)*

---

## Purpose

The primary goal is to provide a self-contained, installable library with a high-performance C++ core and a Python interface for the triangle puzzle game. This allows different RL agent implementations or other applications to build upon a consistent and fast game backend. The interactive UI is included but only initialized when running the specific UI commands.

## Installation

**Prerequisites:**
*   A C++ compiler supporting C++17 (e.g., GCC, Clang, MSVC).
*   CMake (version 3.14 or higher).
*   Python (>= 3.10) and Pip.

```bash
# For standard use (once published or built):
pip install trianglengin

# Building from source (requires compiler and CMake):
git clone https://github.com/lguibr/trianglengin.git
cd trianglengin
pip install .
```
*(Note: `pygame` and `typer` will be installed as core dependencies).*

## Running Interactive Modes

After installing, you can run the interactive modes directly:

- **Play Mode:**
  ```bash
  trianglengin play [--seed 42] [--log-level INFO]
  ```
- **Debug Mode:**
  ```bash
  trianglengin debug [--seed 42] [--log-level DEBUG]
  ```

---

## Local Development & Testing

These instructions are for developers contributing to `trianglengin`.

1.  **Clone the Repository:**
    ```bash
    git clone https://github.com/lguibr/trianglengin.git
    cd trianglengin
    ```

2.  **Prerequisites:** Ensure you have a C++17 compiler and CMake installed.

3.  **Create and Activate Virtual Environment:** (venv or conda)
    ```bash
    # Example using venv
    python -m venv venv
    source venv/bin/activate # or .\venv\Scripts\activate on Windows
    ```
    **IMPORTANT:** Ensure your virtual environment is activated.

4.  **Install Build Dependencies:** (Needed even for core dev)
    ```bash
    pip install pybind11>=2.10 cmake wheel
    ```

5.  **Clean Previous Builds (Optional but Recommended):**
    ```bash
    rm -rf build/ src/trianglengin.egg-info/ dist/ src/trianglengin/trianglengin_cpp.*.so src/trianglengin/trianglengin_cpp*.cpp
    ```

6.  **Install in Editable Mode with Dev Dependencies:**
    *   **Make sure your virtual environment is active!**
    *   Run from the project root directory:
        ```bash
        # Installs core, UI, and dev tools
        pip install -e '.[dev]'
        ```
        This command compiles the C++ extension and installs the Python package so changes are reflected immediately. It also installs development tools.

7.  **Running Checks:**
    *   **Make sure your virtual environment is active!**
    *   **Tests & Coverage:**
        ```bash
        pytest tests/ --cov=src/trianglengin --cov-report=xml
        ```
        (Coverage measures core Python code, excluding UI).
        To just run tests: `pytest`
    *   **Linting:** `ruff check .`
    *   **Formatting:** `ruff format .`
    *   **Type Checking:** `mypy src/trianglengin/ tests/`

8.  **Troubleshooting Build/Import Errors:**
    *   Ensure compiler and CMake are installed and in PATH.
    *   Make sure the virtual environment is active *before* running `pip install -e`.
    *   Clean previous builds (Step 5).
    *   Check `pyproject.toml` and `setup.py` for correct configuration.
    *   Verify Pybind11 version compatibility.

---

## Project Structure (v2 - UI Included)

```
trianglengin/
â”œâ”€â”€ .github/workflows/      # GitHub Actions CI/CD
â”‚   â””â”€â”€ ci_cd.yml
â”œâ”€â”€ src/                    # Source root
â”‚   â””â”€â”€ trianglengin/       # Python package source
â”‚       â”œâ”€â”€ __init__.py     # Exposes core public API (GameState, EnvConfig, Shape)
â”‚       â”œâ”€â”€ game_interface.py # Python GameState wrapper class
â”‚       â”œâ”€â”€ py.typed        # PEP 561 marker
â”‚       â”œâ”€â”€ cpp/            # C++ Core Implementation ([src/trianglengin/cpp/README.md])
â”‚       â”‚   â”œâ”€â”€ CMakeLists.txt
â”‚       â”‚   â”œâ”€â”€ bindings.cpp
â”‚       â”‚   â”œâ”€â”€ config.h
â”‚       â”‚   â”œâ”€â”€ structs.h
â”‚       â”‚   â”œâ”€â”€ grid_data.h / .cpp
â”‚       â”‚   â”œâ”€â”€ grid_logic.h / .cpp
â”‚       â”‚   â”œâ”€â”€ shape_logic.h / .cpp
â”‚       â”‚   â””â”€â”€ game_state.h / .cpp
â”‚       â”œâ”€â”€ core/           # Core Python components (now minimal/empty)
â”‚       â”‚   â””â”€â”€ __init__.py
â”‚       â”œâ”€â”€ utils/          # General Python utilities ([src/trianglengin/utils/README.md])
â”‚       â”‚   â””â”€â”€ ... (geometry.py, types.py)
â”‚       â”œâ”€â”€ config/         # Core configuration models ([src/trianglengin/config/README.md])
â”‚       â”‚   â”œâ”€â”€ __init__.py
â”‚       â”‚   â””â”€â”€ env_config.py   # EnvConfig (Pydantic)
â”‚       â””â”€â”€ ui/             # UI Components ([src/trianglengin/ui/README.md])
â”‚           â”œâ”€â”€ __init__.py # Exposes UI API (Application, cli_app, DisplayConfig)
â”‚           â”œâ”€â”€ app.py      # Interactive mode application runner
â”‚           â”œâ”€â”€ cli.py      # CLI definition (play/debug)
â”‚           â”œâ”€â”€ config.py   # DisplayConfig (Pydantic)
â”‚           â”œâ”€â”€ interaction/    # User input handling ([src/trianglengin/ui/interaction/README.md])
â”‚           â”‚   â”œâ”€â”€ __init__.py
â”‚           â”‚   â”œâ”€â”€ event_processor.py
â”‚           â”‚   â”œâ”€â”€ input_handler.py
â”‚           â”‚   â”œâ”€â”€ play_mode_handler.py
â”‚           â”‚   â””â”€â”€ debug_mode_handler.py
â”‚           â””â”€â”€ visualization/  # Pygame rendering ([src/trianglengin/ui/visualization/README.md])
â”‚               â”œâ”€â”€ __init__.py
â”‚               â”œâ”€â”€ core/       # Core vis components ([src/trianglengin/ui/visualization/core/README.md])
â”‚               â”‚   â”œâ”€â”€ __init__.py
â”‚               â”‚   â”œâ”€â”€ colors.py
â”‚               â”‚   â”œâ”€â”€ coord_mapper.py
â”‚               â”‚   â”œâ”€â”€ fonts.py
â”‚               â”‚   â”œâ”€â”€ layout.py # NEW
â”‚               â”‚   â””â”€â”€ visualizer.py
â”‚               â””â”€â”€ drawing/    # Drawing functions ([src/trianglengin/ui/visualization/drawing/README.md])
â”‚                   â”œâ”€â”€ __init__.py
â”‚                   â”œâ”€â”€ grid.py
â”‚                   â”œâ”€â”€ highlight.py
â”‚                   â”œâ”€â”€ hud.py
â”‚                   â”œâ”€â”€ previews.py
â”‚                   â”œâ”€â”€ shapes.py
â”‚                   â””â”€â”€ utils.py
â”œâ”€â”€ tests/                  # Unit/Integration tests (Python) ([tests/README.md])
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ conftest.py
â”‚   â””â”€â”€ core/environment/
â”‚       â””â”€â”€ test_game_state.py # Tests the Python GameState wrapper
â”œâ”€â”€ .gitignore
â”œâ”€â”€ pyproject.toml          # Build config, dependencies
â”œâ”€â”€ setup.py                # C++ Extension build script
â”œâ”€â”€ README.md               # This file
â”œâ”€â”€ LICENSE
â””â”€â”€ MANIFEST.in
```

## Core Components (v2)

- **`trianglengin.cpp` (C++ Core)**: Implements the high-performance game logic (state, grid, shapes, rules). Not directly imported in Python.
- **`trianglengin.game_interface.GameState` (Python Wrapper)**: The primary Python class for interacting with the game engine. It holds a reference to the C++ game state object and provides methods like `step`, `reset`, `is_over`, `valid_actions`, `get_shapes`, `get_grid_data_np`.
- **`trianglengin.config.EnvConfig`**: Python Pydantic model for core environment configuration. Passed to C++ core during initialization.
- **`trianglengin.utils`**: General Python utility functions and types. ([`src/trianglengin/utils/README.md`](src/trianglengin/utils/README.md))

## UI Components (`trianglengin.ui`)

- **`trianglengin.ui.config.DisplayConfig`**: Pydantic model for UI display settings.
- **`trianglengin.ui.visualization`**: Python/Pygame rendering components. Uses data obtained from the `GameState` wrapper. ([`src/trianglengin/ui/visualization/README.md`](src/trianglengin/ui/visualization/README.md))
- **`trianglengin.ui.interaction`**: Python/Pygame input handling for interactive modes. Interacts with the `GameState` wrapper. ([`src/trianglengin/ui/interaction/README.md`](src/trianglengin/ui/interaction/README.md))
- **`trianglengin.ui.app.Application`**: Integrates UI components for interactive modes.
- **`trianglengin.ui.cli`**: Command-line interface (`trianglengin play`/`debug`).

## Contributing

Contributions are welcome! Please open an issue or submit a pull request on the [GitHub repository](https://github.com/lguibr/trianglengin). Ensure that changes maintain code quality (pass tests, linting, type checking) and keep READMEs updated. Building requires a C++17 compiler and CMake.
