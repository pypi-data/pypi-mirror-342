Metadata-Version: 2.3
Name: celldega
Version: 0.12.0
Requires-Dist: anndata==0.11.3
Requires-Dist: anywidget==0.9.6
Requires-Dist: dask==2024.11.2
Requires-Dist: geopandas~=0.14.3
Requires-Dist: imagecodecs~=2024.1.1
Requires-Dist: libpysal~=4.8.1
Requires-Dist: matplotlib~=3.8.4
Requires-Dist: pandas~=2.2.2
Requires-Dist: polars~=1.10.0
Requires-Dist: pyarrow~=15.0.2
Requires-Dist: scanpy~=1.10.2
Requires-Dist: shapely~=2.0.5
Requires-Dist: spatialdata-io~=0.1.7
Requires-Dist: spatialdata~=0.3.0
Requires-Dist: squidpy~=1.6.5
Requires-Dist: tifffile~=2024.4.18
Requires-Dist: zarr==2.18.7
Provides-Extra: dev
Requires-Dist: black; extra == 'dev'
Requires-Dist: jupyterlab; extra == 'dev'
Requires-Dist: pylint; extra == 'dev'
Requires-Dist: watchfiles; extra == 'dev'
Provides-Extra: docs
Requires-Dist: mkdocs; extra == 'docs'
Requires-Dist: mkdocs-material; extra == 'docs'
Requires-Dist: mkdocstrings[javascript]; extra == 'docs'
Requires-Dist: mkdocstrings[python]; extra == 'docs'
Provides-Extra: pre
Requires-Dist: pyvips~=2.2.2; extra == 'pre'
Description-Content-Type: text/markdown

# celldega

## Documentation
https://broadinstitute.github.io/celldega/

## Installation

```sh
pip install celldega
```

### Note on VIPS Installation
If running on a new Terra.bio workspace you will need to install vips in a startup script (e.g., startup_script.sh) with the following

```
#!/bin/bash
apt update
apt install -y libvips
apt install -y libvips-tools
apt install -y libvips-dev
```

Please see Terra.bio [documentation](https://support.terra.bio/hc/en-us/articles/360058193872-Preconfigure-a-Cloud-Environment-with-a-startup-script) for more information.

## Development installation

Create a virtual environment and and install celldega in *editable* mode with the
optional development dependencies:

```sh
python -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"
```

You then need to install the JavaScript dependencies and run the development server.

```sh
npm install
npm run dev
```

Open `example.ipynb` in JupyterLab, VS Code, or your favorite editor
to start developing. Changes made in `js/` will be reflected
in the notebook.

### PyPI
Increment version in `project.toml` and

```
$ hatch build
$ hatch publish
```

#### Hatch Development
```
$ hatch env prune      # Remove old environments
$ hatch env create     # Create a new environment based on pyproject.toml
$ hatch shell          # Activate the new environment
```

### NPM
Increment version in `package.json` and

```
$ npm run build
$ npm publish
```
