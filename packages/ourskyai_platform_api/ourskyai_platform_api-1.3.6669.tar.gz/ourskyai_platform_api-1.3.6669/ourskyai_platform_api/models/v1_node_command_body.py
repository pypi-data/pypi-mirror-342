# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.6669
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from ourskyai_platform_api.models.v1_halt import V1Halt
from ourskyai_platform_api.models.v1_reboot_system import V1RebootSystem
from ourskyai_platform_api.models.v1_restart_adb import V1RestartAdb
from ourskyai_platform_api.models.v1_send_flare import V1SendFlare
from ourskyai_platform_api.models.v1_start_perpetual_instruction_loop import V1StartPerpetualInstructionLoop
from ourskyai_platform_api.models.v1_stop_perpetual_instruction_loop import V1StopPerpetualInstructionLoop
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

V1NODECOMMANDBODY_ONE_OF_SCHEMAS = ["V1Halt", "V1RebootSystem", "V1RestartAdb", "V1SendFlare", "V1StartPerpetualInstructionLoop", "V1StopPerpetualInstructionLoop"]

class V1NodeCommandBody(BaseModel):
    """
    V1NodeCommandBody
    """
    # data type: V1StartPerpetualInstructionLoop
    oneof_schema_1_validator: Optional[V1StartPerpetualInstructionLoop] = None
    # data type: V1StopPerpetualInstructionLoop
    oneof_schema_2_validator: Optional[V1StopPerpetualInstructionLoop] = None
    # data type: V1Halt
    oneof_schema_3_validator: Optional[V1Halt] = None
    # data type: V1RebootSystem
    oneof_schema_4_validator: Optional[V1RebootSystem] = None
    # data type: V1RestartAdb
    oneof_schema_5_validator: Optional[V1RestartAdb] = None
    # data type: V1SendFlare
    oneof_schema_6_validator: Optional[V1SendFlare] = None
    if TYPE_CHECKING:
        actual_instance: Union[V1Halt, V1RebootSystem, V1RestartAdb, V1SendFlare, V1StartPerpetualInstructionLoop, V1StopPerpetualInstructionLoop]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(V1NODECOMMANDBODY_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = V1NodeCommandBody.construct()
        error_messages = []
        match = 0
        # validate data type: V1StartPerpetualInstructionLoop
        if not isinstance(v, V1StartPerpetualInstructionLoop):
            error_messages.append(f"Error! Input type `{type(v)}` is not `V1StartPerpetualInstructionLoop`")
        else:
            match += 1
        # validate data type: V1StopPerpetualInstructionLoop
        if not isinstance(v, V1StopPerpetualInstructionLoop):
            error_messages.append(f"Error! Input type `{type(v)}` is not `V1StopPerpetualInstructionLoop`")
        else:
            match += 1
        # validate data type: V1Halt
        if not isinstance(v, V1Halt):
            error_messages.append(f"Error! Input type `{type(v)}` is not `V1Halt`")
        else:
            match += 1
        # validate data type: V1RebootSystem
        if not isinstance(v, V1RebootSystem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `V1RebootSystem`")
        else:
            match += 1
        # validate data type: V1RestartAdb
        if not isinstance(v, V1RestartAdb):
            error_messages.append(f"Error! Input type `{type(v)}` is not `V1RestartAdb`")
        else:
            match += 1
        # validate data type: V1SendFlare
        if not isinstance(v, V1SendFlare):
            error_messages.append(f"Error! Input type `{type(v)}` is not `V1SendFlare`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in V1NodeCommandBody with oneOf schemas: V1Halt, V1RebootSystem, V1RestartAdb, V1SendFlare, V1StartPerpetualInstructionLoop, V1StopPerpetualInstructionLoop. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in V1NodeCommandBody with oneOf schemas: V1Halt, V1RebootSystem, V1RestartAdb, V1SendFlare, V1StartPerpetualInstructionLoop, V1StopPerpetualInstructionLoop. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> V1NodeCommandBody:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> V1NodeCommandBody:
        """Returns the object represented by the json string"""
        instance = V1NodeCommandBody.construct()
        error_messages = []
        match = 0

        # deserialize data into V1StartPerpetualInstructionLoop
        try:
            instance.actual_instance = V1StartPerpetualInstructionLoop.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into V1StopPerpetualInstructionLoop
        try:
            instance.actual_instance = V1StopPerpetualInstructionLoop.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into V1Halt
        try:
            instance.actual_instance = V1Halt.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into V1RebootSystem
        try:
            instance.actual_instance = V1RebootSystem.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into V1RestartAdb
        try:
            instance.actual_instance = V1RestartAdb.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into V1SendFlare
        try:
            instance.actual_instance = V1SendFlare.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into V1NodeCommandBody with oneOf schemas: V1Halt, V1RebootSystem, V1RestartAdb, V1SendFlare, V1StartPerpetualInstructionLoop, V1StopPerpetualInstructionLoop. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into V1NodeCommandBody with oneOf schemas: V1Halt, V1RebootSystem, V1RestartAdb, V1SendFlare, V1StartPerpetualInstructionLoop, V1StopPerpetualInstructionLoop. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


