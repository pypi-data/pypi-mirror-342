# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.6669
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class V1NodeControllerIssueCertificateResponse(BaseModel):
    """
    V1NodeControllerIssueCertificateResponse
    """
    ca_chain: StrictStr = Field(..., alias="caChain", description="Certificate authority chain")
    certificate: StrictStr = Field(..., description="Node's signed certificate")
    issuing_ca: StrictStr = Field(..., alias="issuingCa", description="Issuing certificate authority")
    private_key: StrictStr = Field(..., alias="privateKey", description="Private key associated with the certificate")
    serial_number: StrictStr = Field(..., alias="serialNumber", description="Serial number of the certificate")
    private_key_type: StrictStr = Field(..., alias="privateKeyType", description="Type of the private key, e.g., RSA, ECC")
    __properties = ["caChain", "certificate", "issuingCa", "privateKey", "serialNumber", "privateKeyType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1NodeControllerIssueCertificateResponse:
        """Create an instance of V1NodeControllerIssueCertificateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1NodeControllerIssueCertificateResponse:
        """Create an instance of V1NodeControllerIssueCertificateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1NodeControllerIssueCertificateResponse.parse_obj(obj)

        _obj = V1NodeControllerIssueCertificateResponse.parse_obj({
            "ca_chain": obj.get("caChain"),
            "certificate": obj.get("certificate"),
            "issuing_ca": obj.get("issuingCa"),
            "private_key": obj.get("privateKey"),
            "serial_number": obj.get("serialNumber"),
            "private_key_type": obj.get("privateKeyType")
        })
        return _obj


