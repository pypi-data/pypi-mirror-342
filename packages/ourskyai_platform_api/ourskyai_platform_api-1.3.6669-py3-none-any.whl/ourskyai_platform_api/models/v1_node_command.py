# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.6669
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from ourskyai_platform_api.models.v1_node_command_body import V1NodeCommandBody
from ourskyai_platform_api.models.v1_node_command_type import V1NodeCommandType

class V1NodeCommand(BaseModel):
    """
    V1NodeCommand
    """
    id: StrictStr = Field(...)
    type: V1NodeCommandType = Field(...)
    body: V1NodeCommandBody = Field(...)
    executable_at: Optional[datetime] = Field(None, alias="executableAt")
    __properties = ["id", "type", "body", "executableAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1NodeCommand:
        """Create an instance of V1NodeCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of body
        if self.body:
            _dict['body'] = self.body.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1NodeCommand:
        """Create an instance of V1NodeCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1NodeCommand.parse_obj(obj)

        _obj = V1NodeCommand.parse_obj({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "body": V1NodeCommandBody.from_dict(obj.get("body")) if obj.get("body") is not None else None,
            "executable_at": obj.get("executableAt")
        })
        return _obj


