Index: core/core.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nInterface to APSIM simulation models using Python.NET\r\nauthor: Richard Magala\r\nemail: magalarich20@gmail.com\r\n\r\n\"\"\"\r\nimport inspect\r\nimport random, pathlib\r\nimport string\r\nfrom typing import Union\r\nimport os, shutil\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom os.path import join as opj\r\nimport json\r\nimport datetime\r\nimport apsimNGpy.manager.weathermanager as weather\r\nfrom functools import cache\r\n# prepare for the C# import\r\nfrom apsimNGpy.core import pythonet_config\r\nimport warnings\r\nfrom apsimNGpy.core_utils.utils import timer\r\n\r\n# now we can safely import C# libraries\r\nfrom System.Collections.Generic import *\r\nfrom Models.Core import Simulations, ScriptCompiler, Simulation\r\nfrom System import *\r\nfrom Models.Core.ApsimFile import FileFormat\r\nfrom Models.Climate import Weather\r\nfrom Models.Soils import Soil, Physical, SoilCrop, Organic, Solute, Chemical\r\n\r\nimport Models\r\nfrom Models.PMF import Cultivar\r\nfrom apsimNGpy.core.runner import run_model_externally, collect_csv_by_model_path\r\nfrom apsimNGpy.core.model_loader import (load_apsim_model, save_model_to_file, recompile)\r\nimport ast\r\nfrom typing import Iterable\r\nfrom collections.abc import Iterable\r\nfrom typing import Any\r\nfrom System.Data import DataView\r\n\r\nMultiThreaded = Models.Core.Run.Runner.RunTypeEnum.MultiThreaded\r\nSingleThreaded = Models.Core.Run.Runner.RunTypeEnum.SingleThreaded\r\nModelRUNNER = Models.Core.Run.Runner\r\n\r\nADD = Models.Core.ApsimFile.Structure.Add\r\nDELETE = Models.Core.ApsimFile.Structure.Delete\r\nMOVE = Models.Core.ApsimFile.Structure.Move\r\nRENAME = Models.Core.ApsimFile.Structure.Rename\r\nREPLACE = Models.Core.ApsimFile.Structure.Replace\r\n\r\n\r\ndef dataview_to_dataframe(_model, reports):\r\n    \"\"\"\r\n    Convert .NET System.Data.DataView to Pandas DataFrame.\r\n    report (str, list, tuple) of the report to be displayed. these should be in the simulations\r\n    :param apsimng model: CoreModel object or instance\r\n    :return: Pandas DataFrame\r\n    \"\"\"\r\n    try:\r\n        _model._DataStore.Open()\r\n        pred = _model._DataStore.Reader.GetData(reports)\r\n        dataview = DataView(pred)\r\n        if dataview.Table:\r\n            # Extract column names\r\n            column_names = [col.ColumnName for col in dataview.Table.Columns]\r\n\r\n            # Extract data from rows\r\n            data = []\r\n            for row in dataview:\r\n                data.append([row[col] for col in column_names])  # Extract row values\r\n\r\n            # Convert to Pandas DataFrame\r\n            df = pd.DataFrame(data, columns=column_names)\r\n            return df\r\n        else:\r\n            logger.error(\"No DataView was found\")\r\n    finally:\r\n        _model._DataStore.Close()\r\n\r\n\r\nfrom apsimNGpy.settings import *  # This file is not ready and i wanted to do some test\r\n\r\n\r\ndef replace_variable_by_index(old_list: list, new_value: list, indices: list):\r\n    for idx, new_val in zip(indices, new_value):\r\n        old_list[idx] = new_val\r\n    return old_list\r\n\r\n\r\ndef soil_components(component):\r\n    _comp = component.lower()\r\n    comps = {'organic': Organic,\r\n             'physical': Physical,\r\n             'soilcrop': SoilCrop,\r\n             'solute': Solute,\r\n             'chemical': Chemical,\r\n             }\r\n    return comps[_comp]\r\n\r\n\r\nclass CoreModel:\r\n    \"\"\"\r\n    Modify and run APSIM Next Generation (APSIM NG) simulation models.\r\n\r\n    This class serves as the entry point for all apsimNGpy simulations and is inherited by the `ApsimModel` class.\r\n    It is designed to be base class for all apsimNGpy models.\r\n\r\n    Parameters:\r\n        model (os.PathLike): The file path to the APSIM NG model. This parameter specifies the model file to be used in the simulation.\r\n        out_path (str, optional): The path where the output file should be saved. If not provided, the output will be saved with the same name as the model file in the current dir_path.\r\n        out (str, optional): Alternative path for the output file. If both `out_path` and `out` are specified, `out` takes precedence. Defaults to `None`.\r\n        experiment (bool, optional): Specifies whether to initiate your model as an experiment defaults to false\r\n        bY default, the experiment is created with permutation but permutation can be passed as a kewy word argument to change\r\n    Keyword parameters:\r\n      **`copy` (bool, deprecated)**: Specifies whether to clone the simulation file. This parameter is deprecated because the simulation file is now automatically cloned by default.\r\n\r\n    When an APSIM file is loaded, it is automatically copied to ensure a fallback to the original file in case of any issues during operations.\r\n    \"\"\"\r\n    __slots__ = ['model', 'out_path', 'experiment', 'copy', 'base_name', 'others', 'report_names',\r\n                 'factor_names', 'permutation', 'experiment_created', 'set_wd', '_str_model',\r\n                 '_model', 'model_info', 'datastore', 'Simulations', 'Datastore', '_DataStore', 'path',\r\n                 '_met_file', 'ran_ok', 'factors'\r\n                 ]\r\n\r\n    def __init__(self, model: os.PathLike = None, out_path: os.PathLike = None, out: os.PathLike = None, set_wd=None,\r\n                 experiment=False, **kwargs):\r\n\r\n        self.experiment_created = None\r\n        self.experiment = experiment\r\n        self.permutation = None\r\n        self.factor_names = []\r\n        self.report_names = None\r\n        self.others = kwargs.copy()\r\n        self.set_wd = set_wd\r\n        self.factors = {}\r\n        if kwargs.get('copy'):\r\n            warnings.warn(\r\n                'copy argument is deprecated, it is now mandatory to copy the model in order to conserve the original '\r\n                'model.', UserWarning)\r\n\r\n        out_path = out_path if isinstance(out_path, str) or isinstance(out_path, Path) else None\r\n        self.copy = kwargs.get('copy')  # Mandatory to conserve the original file\r\n        # all these can be changed after initialization\r\n\r\n        self._str_model = None\r\n        self._model = model\r\n        self.out_path = out_path or out\r\n        # model_info is named tuple safe for parallel simulations as named tuples are immutable\r\n        self.model_info = load_apsim_model(self._model, out_path=self.out_path, met_file=kwargs.get('met_file'),\r\n                                           wd=set_wd)\r\n        self.Simulations = self.model_info.IModel\r\n\r\n        self.datastore = self.model_info.datastore\r\n        self.Datastore = self.model_info.DataStore\r\n        self._DataStore = self.model_info.DataStore\r\n        self.path = self.model_info.path\r\n        self._met_file = kwargs.get('met_file')\r\n        self.ran_ok = False\r\n        permutation, base = kwargs.get('permutation', True), kwargs.get('base_name', None)\r\n        if experiment:\r\n            # we create an experiment here immediately if the user wants to dive in right away\r\n            self.create_experiment(permutation=permutation, base_name=base)\r\n\r\n    def check_model(self):\r\n        if isinstance(self.Simulations, Models.Core.ApsimFile.ConverterReturnType):\r\n            self.Simulations = self.Simulations.get_NewModel()\r\n            self.model_info = self.model_info._replace(IModel=self.Simulations)\r\n        return self\r\n\r\n    @staticmethod\r\n    def _remove_related_files(_name):\r\n        \"\"\"Remove related database files.\"\"\"\r\n        for suffix in [\"\", \"-shm\", \"-wal\"]:\r\n            db_file = pathlib.Path(f\"{_name}.db{suffix}\")\r\n            db_file.unlink(missing_ok=True)\r\n\r\n    @staticmethod\r\n    def generate_unique_name(base_name, length=6):\r\n        random_suffix = ''.join(random.choices(string.ascii_lowercase, k=length))\r\n        unique_name = base_name + '_' + random_suffix\r\n        return unique_name\r\n\r\n    # searches the simulations from APSIM models.core object\r\n    @property\r\n    def simulations(self):\r\n        \"\"\"\r\n        Retrieve simulation nodes in the APSIMx `Model.Core.Simulations` object.\r\n\r\n        We search all Models.Core.Simulation in the scope of Model.Core.Simulations. Please note the difference\r\n        Simulations is the whole json object Simulation is the child with the field zones, crops, soils and managers\r\n        any structure of apsimx file any structure can be handled\r\n        \"\"\"\r\n        # fixed\r\n        # we can actually specify the simulation name in the bracket\r\n        self.check_model()\r\n        return list(self.Simulations.FindAllInScope[Models.Core.Simulation]())\r\n\r\n    @property\r\n    def simulation_names(self):\r\n        \"\"\"\r\n        retrieves the name of the simulations in the APSIMx `Model.Core\r\n        @return: list of simulation names\r\n        \"\"\"\r\n        return [s.Name for s in self.simulations]\r\n\r\n    @property\r\n    def str_model(self):\r\n        return json.dumps(self._str_model)\r\n\r\n    @str_model.setter\r\n    def str_model(self, value: dict):\r\n        self._str_model = json.dumps(value)\r\n\r\n    def initialise_model(self):\r\n        simulationList = self.Simulations.FindAllDescendants[Simulation]()\r\n        for models in self.Simulations.FindAllDescendants():\r\n            try:\r\n                models.OnCreated()\r\n            except Exception as e:\r\n                logger.info(e)\r\n            finally:\r\n                for simulation in simulationList:\r\n                    simulation.IsInitialising = False\r\n        return self\r\n\r\n    def restart_model(self, model_info=None):\r\n        \"\"\"\r\n         :param model_info: A named tuple object returned by `load_apsim_model` from the `model_loader` module.\r\n\r\n        Notes:\r\n        - This parameter is crucial whenever we need to reinitialize the model, especially after updating management practices or editing the file.\r\n        - In some cases, this method is executed automatically.\r\n        - If `model_info` is not specified, the simulation will be reinitialized from `self`.\r\n\r\n        This function is called by `save_edited_file` and `update_mgt`.\r\n\r\n        :return: self\r\n        \"\"\"\r\n\r\n        if model_info:\r\n            self.model_info = model_info\r\n        self.Simulations = self.model_info.IModel\r\n        self.datastore = self.model_info.datastore\r\n        self.Datastore = self.model_info.DataStore\r\n        self._DataStore = self.model_info.DataStore\r\n        self.path = self.model_info.path\r\n        return self\r\n\r\n    def save(self, file_name=None):\r\n        \"\"\"\r\n        Save the simulation models to file\r\n        @param file_name:    The name of the file to save the defaults to none, taking the exising filename\r\n        @return: model object\r\n        \"\"\"\r\n        _path = file_name or self.path\r\n        self.path = _path\r\n        save_model_to_file(self.Simulations, out=_path)\r\n        # logger.info(f\"Saved model to {_path} {os.path.isfile(_path)}\")\r\n\r\n        model_info = recompile(self)  # load_apsim_model(_path)\r\n        self.restart_model(model_info)\r\n\r\n        return self\r\n\r\n    def save_edited_file(self, out_path: os.PathLike = None, reload: bool = False) -> Union['CoreModel', None]:\r\n        \"\"\" Saves the model to the local drive.\r\n\r\n            Notes: - If `out_path` is None, the `save_model_to_file` function extracts the filename from the\r\n            `Model.Core.Simulation` object. - `out_path`, however, is given high priority. Therefore,\r\n            we first evaluate if it is not None before extracting from the file. - This is crucial if you want to\r\n            give the file a new name different from the original one while saving.\r\n\r\n            Parameters\r\n            - out_path (str): Desired path for the .apsimx file, by default, None.\r\n            - reload (bool): Whether to load the file using the `out_path` or the model's original file name.\r\n\r\n        \"\"\"\r\n        warnings.warn('The `save_edited_file` method is deprecated use save().', DeprecationWarning)\r\n        # Determine the output path\r\n        _out_path = out_path or self.model_info.path\r\n        save_model_to_file(self.Simulations, out=_out_path)\r\n        if reload:\r\n            self.model_info = load_apsim_model(_out_path)\r\n\r\n            self.restart_model()\r\n            return self\r\n\r\n    @property\r\n    def results(self) -> pd.DataFrame:\r\n        reports = self.report_names or \"Report\"  # 'Report' # is the apsim default name\r\n        if self.ran_ok and reports:\r\n            data_tables = collect_csv_by_model_path(self.path)\r\n\r\n            if isinstance(reports, str):\r\n                reports = [reports]\r\n            datas = [pd.read_csv(data_tables[i]) for i in reports]\r\n            return pd.concat(datas)\r\n        else:\r\n            logging.error(\"attempting to get results before running the model or providing the report name\")\r\n\r\n    def run(self, report_name: Union[tuple, list, str] = None,\r\n            simulations: Union[tuple, list] = None,\r\n            clean_up: bool = False,\r\n            verbose=False,\r\n            **kwargs) -> 'CoreModel':\r\n        \"\"\"Run apsim model in the simulations\r\n\r\n        Parameters\r\n        ----------\r\n         :param report_name: (iterable, str). defaults to APSIM defaults Report Name if not specified,\r\n        --Notes\r\n          if `report_name` is iterable, all tables are read and aggregated not one data frame, returned one pandas data frame\r\n          if `report_name` is nOne we run but do not collect the results from the data base\r\n          if report name is string e.g.,  report a panda data frame is returned\r\n\r\n        simulations (__list_), optional\r\n            List of simulation names to run, if `None` runs all simulations, by default `None`.\r\n\r\n        :param clean (_-boolean_), optional\r\n            If `True` remove an existing database for the file before running, deafults to False`\r\n\r\n        :param multithread: bool\r\n            If `True` APSIM uses multiple threads, by default, `True`\r\n            :param simulations:\r\n\r\n        returns\r\n            instance of the class CoreModel\r\n        \"\"\"\r\n        try:\r\n            # we could cut the chase and run apsim faster, but unfortunately some versions are not working properly,\r\n            # so we run the model externally the previous function allowed to run specific simulations in the file,\r\n            # it has been renamed to run_in_python.\r\n            self._DataStore.Dispose()\r\n\r\n            # before running\r\n            self.save()  # this compiles any modification to the model, sending it to the disk\r\n            res = run_model_externally(self.model_info.path, verbose=verbose, to_csv=kwargs.get('to_csv', True))\r\n            if clean_up:\r\n                self.clean_up()\r\n            if res.returncode == 0:\r\n                # update run satus\r\n                self.ran_ok = True\r\n                # update report names\r\n                self.report_names = report_name\r\n                # self.results = _read_data(report_name)\r\n\r\n        finally:\r\n            # close the datastore\r\n            self._DataStore.Close()\r\n        return self\r\n\r\n    @property\r\n    def simulated_results(self) -> pd.DataFrame:\r\n        \"\"\"\r\n\r\n        @return: pandas data frame containing the data\r\n        Example:\r\n         >>> from apsimNGpy.core.base_data import load_default_simulations\r\n         >>> fmodel = load_default_simulations(crop ='Maize', simulations_object=False) # get path only\r\n         >>> model = CoreModel(fmodel)\r\n         >>> mn=model.run() #3 run the model before colelcting the results\r\n         >>> sr = model.simulated_results\r\n\r\n        \"\"\"\r\n        if self.ran_ok:\r\n            data_tables = collect_csv_by_model_path(self.path)\r\n            # reports = get_db_table_names(self.datastore)\r\n            bag = []\r\n            for tab, path in data_tables.items():\r\n                _df = pd.read_csv(path)\r\n                _df['TableName'] = tab\r\n\r\n                bag.append(_df)\r\n            return pd.concat(bag)\r\n        else:\r\n            raise ValueError(\"you cant load data before running the model please call run() first\")\r\n\r\n    @timer\r\n    def clone_model(self, model_type, model_name, adoptive_parent_type, rename=None, adoptive_parent_name=None,\r\n\r\n                    in_place=False):\r\n        \"\"\"\r\n        Clone an existing model and move it to a specified parent within the simulation structure.\r\n        The function modifies the simulation structure by adding the cloned model to the designated parent.\r\n\r\n        This function is useful when a model instance needs to be duplicated and repositioned in the APSIM simulation\r\n        hierarchy without manually redefining its structure.\r\n\r\n        Parameters:\r\n        ----------\r\n        model_type : Models\r\n            The type of the model to be cloned, e.g., `Models.Simulation` or `Models.Clock`.\r\n        model_name : str\r\n            The unique identification name of the model instance to be cloned, e.g., `\"clock1\"`.\r\n        adoptive_parent_type : Models\r\n            The type of the new parent model where the cloned model will be placed.\r\n        rename : str, optional\r\n            The new name for the cloned model. If not provided, the clone will be renamed using\r\n            the original name with a `_clone` suffix.\r\n        adoptive_parent_name : str, optional\r\n            The name of the parent model where the cloned model should be moved. If not provided,\r\n            the model will be placed under the default parent of the specified type.\r\n        in_place : bool, optional\r\n            If True, the cloned model remains in the same location but is duplicated. Defaults to False.\r\n\r\n        Returns:\r\n        -------\r\n        None\r\n\r\n\r\n        Example:\r\n        -------\r\n        ```python\r\n        self.clone_model(Models.Clock, \"clock1\", Models.Simulation, rename=\"new_clock\",adoptive_parent_type= Models.Core.Simulations, adoptive_parent_name=\"Simulation\")\r\n        ```\r\n        This will create a cloned version of `\"clock1\"` and place it under `\"Simulation\"` with the new name `\"new_clock\"`.\r\n\r\n        \"\"\"\r\n        cloner = Models.Core.Apsim.Clone  # Reference to the APSIM cloning function\r\n\r\n        # Ensure the model type is valid before proceeding\r\n        if isinstance(model_type, type(Models.Clock)):\r\n            # Locate the model to be cloned within the simulation scope\r\n            clone_parent = (self.Simulations.FindInScope[model_type](model_name) if model_name\r\n                            else self.Simulations.FindInScope[model_type]())\r\n\r\n            # Create a clone of the model\r\n            clone = cloner(clone_parent)\r\n\r\n            # Assign a new name to the cloned model\r\n            new_name = rename if rename else f\"{clone.Name}_clone\"\r\n            clone.Name = new_name\r\n            check_exists = self.Simulations.FindInScope[model_type](new_name)\r\n            if check_exists:\r\n                raise ValueError(\r\n                    f\"adding the same model with the same name and type as the previous one is not allowed\")\r\n\r\n            # Find the adoptive parent where the cloned model should be placed\r\n            parent = (self.Simulations.FindInScope[adoptive_parent_type](adoptive_parent_name) if adoptive_parent_name\r\n                      else self.Simulations.FindInScope[adoptive_parent_type]())\r\n\r\n            # Add the cloned model to the new parent\r\n            parent.Children.Add(clone)\r\n\r\n            # Save the changes to the simulation structure\r\n            self.save()\r\n        else:\r\n            raise TypeError(f'{model_type} is not supported by clone_model at the moment')\r\n\r\n    def find_model(self, model_name: str, model_namespace=None):\r\n        \"\"\"\r\n        Find a model from the Models namespace and return its path.\r\n\r\n        Args:\r\n            model_name (str): The name of the model to find.\r\n            model_namespace (object, optional): The root namespace (defaults to Models).\r\n            path (str, optional): The accumulated path to the model.\r\n\r\n        Returns:\r\n            str: The full path to the model if found, otherwise None.\r\n\r\n        Example:\r\n            >>> from apsimNGpy import core  # doctest: +SKIP\r\n             >>> from apsimNGpy.core.core import Models  # doctest: +SKIP\r\n             >>> model =core.base_data.load_default_simulations(crop = \"Maize\")  # doctest: +SKIP\r\n             >>> model.find_model(\"Weather\")  # doctest: +SKIP\r\n             'Models.Climate.Weather'\r\n             >>> model.find_model(\"Clock\")  # doctest: +SKIP\r\n              'Models.Clock'\r\n\r\n        \"\"\"\r\n        if model_namespace is None:\r\n            model_namespace = Models  # Default to Models namespace\r\n\r\n        if not hasattr(model_namespace, \"__dict__\"):\r\n            return None  # Base case: Not a valid namespace\r\n\r\n        for attr, value in model_namespace.__dict__.items():\r\n            if attr == model_name and isinstance(value, type(getattr(Models, \"Clock\", object))):\r\n                return value\r\n\r\n            if hasattr(value, \"__dict__\"):  # Recursively search nested namespaces\r\n                result = self.find_model(model_name, value)\r\n                if result:\r\n                    return result\r\n\r\n        return None  # Model not found\r\n\r\n    def add_model(self, model_type, adoptive_parent, rename=None,\r\n                  adoptive_parent_name=None, verbose=False, **kwargs):\r\n\r\n        \"\"\"\r\n        Adds a model to the Models Simulations namespace.\r\n\r\n        Some models are restricted to specific parent models, meaning they can only be added to compatible models.\r\n        For example, a Clock model cannot be added to a Soil model.\r\n\r\n        Args:\r\n            model_type (str or Models object): The type of model to add, e.g., `Models.Clock` or just `\"Clock\"`.\r\n            rename (str): The new name for the model.\r\n\r\n            adoptive_parent (Models object): The target parent where the model will be added or moved\r\n\r\n            adoptive_parent_name (Models object, optional): Specifies the parent name for precise location.\r\n\r\n        Returns:\r\n            None: Models are modified in place, so models retains the same reference.\r\n\r\n        Note:\r\n            Added models are initially empty. Additional configuration is required to set parameters.\r\n            For example, after adding a Clock module, you must set the start and end dates.\r\n\r\n        Example:\r\n\r\n         >>> from apsimNGpy import core\r\n         >>> from apsimNGpy.core.core import Models\r\n         >>> model =core.base_data.load_default_simulations(crop = \"Maize\")\r\n         >>> model.remove_model(Models.Clock) # first delete model\r\n         >>> model.add_model(Models.Clock, adoptive_parent = Models.Core.Simulation, rename = 'Clock_replaced', verbose=False)\r\n\r\n         >>> model.add_model(model_type=Models.Core.Simulation, adoptive_parent=Models.Core.Simulations, rename='Iowa')\r\n         >>> model.preview_simulation() # doctest: +SKIP\r\n         @param adoptive_parent:\r\n\r\n        \"\"\"\r\n\r\n        replacer = {'Clock': 'change_simulation_dates', 'Weather': 'replace_met_file'}\r\n        sims = self.Simulations\r\n        # find where to add the model\r\n        if adoptive_parent == Models.Core.Simulations:\r\n            parent = self.Simulations\r\n        else:\r\n            if isinstance(adoptive_parent, type(Models.Clock)):\r\n\r\n                if not adoptive_parent_name:\r\n                    adoptive_parent_name = adoptive_parent().Name\r\n            parent = sims.FindInScope[adoptive_parent](adoptive_parent_name)\r\n\r\n        # parent = _model.Simulations.FindChild(where)\r\n\r\n        cla = model_type.__class__\r\n        if inspect.isclass(model_type):\r\n            which = model_type\r\n        elif isinstance(model_type, str):\r\n            which = self.find_model(model_type)\r\n        elif isinstance(cla, type(Models.Clock)):\r\n            which = cla\r\n        else:\r\n            raise ValueError(f'Invalid model type description expected str or {type(Models.Clock)}')\r\n        if which and parent:\r\n            loc = which()\r\n            loc_name = loc.Name if hasattr(loc, 'Name') else None\r\n            if rename and hasattr(loc, 'Name'):\r\n                loc.Name = rename\r\n            if hasattr(loc, 'Name'):\r\n                target_child = parent.FindChild[self.find_model(loc_name)](loc.Name)\r\n                if target_child:\r\n                    # not raising the error still studying the behaviors of adding a child that already exists\r\n                    raise ValueError(\r\n                        f'Child node `{model_type}` already exist at the target parent name`{parent.Name}`')\r\n\r\n            ADD(loc, parent)\r\n            # parent.Children.Add(loc)\r\n            if verbose:\r\n                logger.info(f\"Added {loc.Name} to {parent.Name}\")\r\n            # we need to put the changes into effect\r\n            self.save()\r\n            # if verbose:\r\n            #     logger.info(f'successfully saved to {self.path}')\r\n\r\n        else:\r\n            logger.debug(f\"Adding {model_type} to {parent.Name} failed, perhaps models was not found\")\r\n\r\n    def add_report_variable(self, commands: Union[list, str, tuple], report_name: str = None):\r\n        \"\"\"\r\n        This adds a report variable to the end of other variables, if you want to change the whole report use change_report\r\n\r\n        Parameters\r\n        -------------------\r\n\r\n        :param commands: (str, required): list of text commands for the report variables e.g., '[Clock].Today as Date'\r\n        :param report_name: (str, optional): name of the report variable if not specified the first accessed report object will be altered\r\n        :Returns:\r\n            returns instance of apsimNGpy.core.core.apsim.ApsimModel or apsimNGpy.core.core.apsim.CoreModel\r\n           raises an erros if a report is not found\r\n        Example:\r\n        >>> from apsimNGpy import core\r\n        >>> model = core.base_data.load_default_simulations()\r\n        >>> model.add_report_variable(commands = '[Clock].Today as Date', report_name = 'Report')\r\n        \"\"\"\r\n        if isinstance(commands, str):\r\n            commands = [commands]\r\n\r\n        if report_name:\r\n            get_report = self.Simulations.FindInScope[Models.Report](report_name)\r\n        else:\r\n            get_report = self.Simulations.FindInScope[Models.Report]()\r\n        get_cur_variables = list(get_report.VariableNames)\r\n        get_cur_variables.extend(commands)\r\n        final_command = \"\\n\".join(get_cur_variables)\r\n        get_report.set_VariableNames(final_command.strip().splitlines())\r\n        self.save()\r\n\r\n    @property\r\n    def extract_simulation_name(self):\r\n        warnings.warn(\r\n            'extract_simulation_name is deprecated for future versions use simulation_names or get_simulation_names')\r\n        \"\"\"logger.info or extract a simulation name from the model\r\n\r\n            Parameters\r\n            ----------\r\n            simulation\r\n                The name of the simulation to remove\r\n                \r\n        \"\"\"\r\n        # this is a repetition because I want to deprecate it and maintain simulation_name or use get_simulation_name\r\n        return self.simulation_names\r\n\r\n    def remove_model(self, model_type: Models, model_name: str = None):\r\n        \"\"\"\r\n       Removes a model from the APSIM Models.Simulations namespace.\r\n\r\n        Parameters\r\n        ----------\r\n        model_type : Models\r\n            The type of the model to remove (e.g., `Models.Clock`). This parameter is required.\r\n\r\n        model_name : str, optional\r\n            The name of the specific model instance to remove (e.g., `\"Clock\"`). If not provided, all models of the\r\n            specified type may be removed.\r\n        @Returns:\r\n           None\r\n        Example:\r\n               >>> from apsimNGpy import core\r\n               >>> from apsimNGpy.core.core import Models\r\n               >>> model = core.base_data.load_default_simulations(crop = 'Maize')\r\n               >>> model.remove_model(Models.Clock) #deletes the clock node\r\n               >>> model.remove_model(Models.Climate.Weather) #deletes the weather node\r\n        \"\"\"\r\n\r\n        if not model_name:\r\n            model_name = model_type().Name\r\n        DELETE(self.Simulations.FindInScope[model_type](model_name))\r\n        self.save()\r\n\r\n    def move_model(self, model_type: Models, new_parent_type: Models, model_name: str = None,\r\n                   new_parent_name: str = None, verbose: bool = False):\r\n        \"\"\"\r\n        Args:\r\n\r\n        - model_type (Models): type of model tied to Models Namespace\r\n        - new_parent_type: new model parent (Models)\r\n        - model_name:name of the model e.g., Clock, or Clock2, whatever name that was given to the model\r\n        -  new_parent_name: what is the new parent names =Field2, this fiedl is optional but important if you have nested simulations\r\n        Returns:\r\n\r\n          returns instance of apsimNGpy.core.core.apsim.ApsimModel or apsimNGpy.core.core.apsim.CoreModel\r\n\r\n        \"\"\"\r\n        sims = self.Simulations\r\n        if not model_name:\r\n            model_name = model_type().Name\r\n        child_to_move = sims.FindInScope[model_type](model_name)\r\n        if not new_parent_name:\r\n            new_parent_name = new_parent_type().Name\r\n\r\n        new_parent = sims.FindInScope[new_parent_type](new_parent_name)\r\n\r\n        MOVE(child_to_move, new_parent)\r\n        if verbose:\r\n            logger.info(f\"Moved {child_to_move.Name} to {new_parent.Name}\")\r\n        self.save()\r\n\r\n    def rename_model(self, model_type: Models, old_model_name: str, new_model_name: str):\r\n        \"\"\"\r\n        give new name to a model in the simulations\r\n        @param model_type: (Models) Models types e.g., Models.Clock\r\n        @param old_model_name: (str) current model name\r\n        @param new_model_name: (str) new model name\r\n        @return: None\r\n        Example;\r\n               >>> from apsimNGpy import core\r\n               >>> from apsimNGpy.core.core import Models\r\n               >>> apsim = core.base_data.load_default_simulations(crop = 'Maize')\r\n               >>> apsim = apsim.rename_model(Models.Clock, 'Clock', 'clock')\r\n\r\n        \"\"\"\r\n        __model = self.Simulations.FindInScope[model_type](old_model_name)\r\n        __model.Name = new_model_name\r\n        self.save()\r\n\r\n    @property  #\r\n    def extract_report_names(self) -> dict:\r\n        \"\"\" returns all data frames the available report tables\r\n        @return: dict of  table names in alist in the simulation\r\n\r\n        \"\"\"\r\n        table_dict = self.get_report(names_only=True)\r\n        return table_dict\r\n\r\n    def replicate_file(self, k: int, path: os.PathLike = None, suffix: str = \"replica\"):\r\n        \"\"\"\r\n        Replicates a file 'k' times.\r\n\r\n        If a path is specified, the copies will be placed in that dir_path with incremented filenames.\r\n\r\n        If no path is specified, copies are created in the same dir_path as the original file, also with incremented filenames.\r\n\r\n        Parameters:\r\n        - self: The core.api.CoreModel object instance containing 'path' attribute pointing to the file to be replicated.\r\n\r\n        - k (int): The number of copies to create.\r\n\r\n        - path (str, optional): The dir_path where the replicated files will be saved. Defaults to None, meaning the\r\n        same dir_path as the source file.\r\n\r\n        - suffix (str, optional): a suffix to attached with the copies. Defaults to \"replicate\"\r\n\r\n\r\n        Returns:\r\n        - A list of paths to the newly created files if get_back_list is True else a generator is returned.\r\n        \"\"\"\r\n        if path is None:\r\n            file_name = self.path.rsplit('.apsimx', 1)[0]\r\n            return [shutil.copy(self.model_info.path, f\"{file_name}_{i}_{suffix}.apsimx\") for i in range(k)]\r\n\r\n        else:\r\n            b_name = os.path.basename(self.path).rsplit('.apsimx', 1)[0]\r\n            return [shutil.copy(self.model_info.path, os.path.join(path, f\"{b_name}_{suffix}_{i}.apsimx\")) for i in\r\n                    range(k)]\r\n\r\n    def _cultivar_params(self, cultivar):\r\n        \"\"\"\r\n         returns all params in a cultivar\r\n        \"\"\"\r\n\r\n        cmd = cultivar.Command\r\n        params = {}\r\n        for c in cmd:\r\n            if c:\r\n                p, v = c.split(\"=\")\r\n                params[p.strip()] = v.strip()\r\n        return params\r\n\r\n    def _find_replacement(self):\r\n        rep = self.Simulations.FindChild[Models.Core.Folder]()\r\n        return rep\r\n\r\n    def _find_cultivar(self, cultivar_name: str):\r\n\r\n        rep = self._find_replacement().FindAllDescendants[Models.PMF.Cultivar]()\r\n        xp = [i for i in rep]\r\n        for cult in xp:\r\n            if cult.Name == cultivar_name:\r\n                return cult\r\n                break\r\n        return rep\r\n\r\n    def read_cultivar_params(self, name: str, verbose: bool = None):\r\n        cultivar = self._find_cultivar(name)\r\n        c_param = self._cultivar_params(cultivar)\r\n        if verbose:\r\n            for i in c_param:\r\n                logger.info(f\"{i} : {c_param[i]} \\n\")\r\n        return c_param\r\n\r\n    def get_crop_replacement(self, Crop):\r\n        \"\"\"\r\n        :param Crop: crop to get the replacement\r\n        :return: System.Collections.Generic.IEnumerable APSIM plant object\r\n        \"\"\"\r\n        rep = self._find_replacement()\r\n        crop_rep = rep.FindAllDescendants[Models.PMF.Plant](Crop)\r\n        for i in crop_rep:\r\n            logger.info(i.Name)\r\n            if i.Name == Crop:\r\n                return i\r\n        return self\r\n\r\n    @timer\r\n    def clone(self, new_file_name):\r\n        \"\"\"this clones all simulations and returns a path to the néw clone simulations\"\"\"\r\n        assert Path(new_file_name).suffix == '.apsimx', 'wrong file extension'\r\n        __simulations__ = Models.Core.Apsim.Clone(self.Simulations)\r\n        save_model_to_file(__simulations__, out=new_file_name)\r\n        return new_file_name\r\n\r\n    def edit_cultivar(self, *, CultivarName: str, commands: str, values: Any, **kwargs):\r\n        \"\"\"\r\n        Edits the parameters of a given cultivar. we don't need a simulation name for this unless if you are defining it in the\r\n        manager section, if that it is the case, see update_mgt.\r\n\r\n        Requires:\r\n           required a replacement for the crops\r\n\r\n        Args:\r\n\r\n          - CultivarName (str, required): Name of the cultivar (e.g., 'laila').\r\n\r\n          - commands (str, required): A strings representing the parameter paths to be edited.\r\n                         Example: ('[Grain].MaximumGrainsPerCob.FixedValue', '[Phenology].GrainFilling.Target.FixedValue')\r\n\r\n          - values: values for each command (e.g., (721, 760)).\r\n\r\n        Returns: instance of the class CoreModel or ApsimModel\r\n\r\n        \"\"\"\r\n        if not isinstance(CultivarName, str):\r\n            raise ValueError(\"Cultivar name must be a string\")\r\n\r\n        cultvar = self._find_cultivar(CultivarName)\r\n        if cultvar is None:\r\n            raise ValueError(f\"Cultivar '{CultivarName}' not found\")\r\n\r\n        params = self._cultivar_params(cultvar)\r\n\r\n        params[commands] = values  # Update or add the command with its new value\r\n\r\n        # Prepare the command strings for setting the updated parameters\r\n        updated_commands = [f\"{k}={v}\" for k, v in params.items()]\r\n        cultvar.set_Command(updated_commands)\r\n\r\n        return self\r\n\r\n    def get_current_cultivar_name(self, ManagerName: str):\r\n        \"\"\"\r\n        Args:\r\n       - ManagerName: script manager module in the zone\r\n\r\n       Returns:\r\n           returns the current cultivar name in the manager script 'ManagerName'\r\n        \"\"\"\r\n\r\n        try:\r\n            ap = self.extract_user_input(ManagerName)['CultivarName']\r\n            return ap\r\n        except  KeyError:\r\n            parameterName = 'CultivarName'\r\n            logger.info(f\"cultivar name: is not found\")\r\n\r\n    def update_cultivar(self, *, parameters: dict, simulations: Union[list, tuple] = None, clear=False, **kwargs):\r\n        \"\"\"Update cultivar parameters\r\n\r\n        Parameters\r\n        ----------\r\n       - parameters (dict, required) dictionary of cultivar parameters to update.\r\n\r\n       - simulations, optional\r\n            List or tuples of simulation names to update if `None` update all simulations.\r\n       - clear (bool, optional)\r\n            If `True` remove all existing parameters, by default `False`.\r\n\r\n\r\n        \"\"\"\r\n        for sim in self.find_simulations(simulations):\r\n            zone = sim.FindChild[Models.Core.Zone]()\r\n            cultivar = zone.Plants[0].FindChild[Models.PMF.Cultivar]()\r\n            if clear:\r\n                params = parameters\r\n            else:\r\n                params = self._cultivar_params(cultivar)\r\n                params.update(parameters)\r\n            cultivar.Command = [f\"{k}={v}\" for k, v in params.items()]\r\n\r\n            self.cultivar_command = params\r\n\r\n    def examine_management_info(self, simulations: Union[list, tuple] = None):\r\n        \"\"\"\r\n        This will show the current management scripts in the simulation root\r\n\r\n        Parameters\r\n        ----------\r\n        simulations, optional\r\n            List or tuple of simulation names to update, if `None` show all simulations. if you are not sure,\r\n\r\n            use the property decorator 'extract_simulation_name'\r\n\r\n        \"\"\"\r\n        try:\r\n            for sim in self.find_simulations(simulations):\r\n                zone = sim.FindChild[Models.Core.Zone]()\r\n                logger.info(\"Zone:\", zone.Name)\r\n                for action in zone.FindAllChildren[Models.Manager]():\r\n                    logger.info(\"\\t\", action.Name, \":\")\r\n                    for param in action.Parameters:\r\n                        logger.info(\"\\t\\t\", param.Key, \":\", param.Value)\r\n        except Exception as e:\r\n            logger.info(repr(e))\r\n            raise Exception(repr(e))\r\n\r\n    def check_som(self, simulations=None):\r\n        simus = {}\r\n        for sim in self.find_simulations(simulations):\r\n            zone = sim.FindChild[Models.Core.Zone]()\r\n\r\n            som1 = zone.FindChild('SurfaceOrganicMatter')\r\n\r\n            field = zone.Name\r\n            sname = sim.Name\r\n\r\n            som_path = f'{zone.FullPath}.SurfaceOrganicMatter'\r\n            if som_path:\r\n                som = zone.FindByPath(som_path)\r\n                if som:\r\n                    simus[sim.Name] = som.Value.InitialResidueMass, som.Value.InitialCNR\r\n            else:\r\n                raise ValueError(\"File child structure is not supported at a moment\")\r\n        return simus\r\n\r\n    def change_som(self, *, simulations: Union[tuple, list] = None, inrm: int = None, icnr: int = None,\r\n                   surface_om_name='SurfaceOrganicMatter', **kwargs):\r\n        \"\"\"\r\n         Change Surface Organic Matter (SOM) properties in specified simulations.\r\n\r\n    Parameters:\r\n        simulations (str ort list): List of simulation names to target (default: None).\r\n\r\n        inrm (int): New value for Initial Residue Mass (default: 1250).\r\n\r\n        icnr (int): New value for Initial Carbon to Nitrogen Ratio (default: 27).\r\n\r\n        surface_om_name (str, optional): name of the surface organic matter child defaults to ='SurfaceOrganicMatter'\r\n    Returns:\r\n        self: The current instance of the class.\r\n\r\n        \"\"\"\r\n        som = None\r\n        for sim in self.find_simulations(simulations):\r\n            zone = sim.FindChild[Models.Core.Zone]()\r\n            som1 = zone.FindChild(surface_om_name)\r\n            field = zone.Name\r\n            sname = sim.Name\r\n\r\n            som_path = f'{zone.FullPath}.SurfaceOrganicMatter'\r\n            if som_path:\r\n                som = zone.FindByPath(som_path)\r\n            if som:\r\n                if inrm is not None:\r\n                    som.Value.InitialResidueMass = inrm\r\n                if icnr is not None:\r\n                    som.Value.InitialCNR = icnr\r\n            else:\r\n                raise NotImplementedError(\r\n                    f\"File child structure is not supported at a moment. or {surface_om_name} not found in the file \"\r\n                    f\"rename your SOM module to\"\r\n                    \"SurfaceOrganicMatter\")\r\n            # mp.Value.InitialResidueMass\r\n\r\n            return self\r\n\r\n    def convert_to_IModel(self):\r\n        if isinstance(self.Simulations, Models.Core.ApsimFile.ConverterReturnType):\r\n            return self.Simulations.get_NewModel()\r\n        else:\r\n            return self.Simulations\r\n\r\n    # experimental\r\n    def recompile_edited_model(self, out_path: os.PathLike):\r\n        \"\"\"\r\n        Args:\r\n        ______________\r\n        out_path: os.PathLike object this method is called to convert the simulation object from ConverterReturnType to model like object\r\n\r\n        return: self\r\n\r\n        \"\"\"\r\n\r\n        try:\r\n            if isinstance(self.Simulations, Models.Core.ApsimFile.Models.Core.ApsimFile.ConverterReturnType):\r\n                self.Simulations = self.Simulations.get_NewModel()\r\n                self.path = out_path or self.path\r\n                self.datastore = self.path.replace(\"apsimx\", 'db')\r\n                self._DataStore = self.Simulations.FindChild[Models.Storage.DataStore]()\r\n        except AttributeError as e:\r\n            pass\r\n        return self\r\n\r\n    def update_mgt_by_path(self, *, path: str, fmt='.', **kwargs):\r\n        \"\"\"\r\n        Args:\r\n        _________________\r\n        path: complete node path to the script manager e.g. '.Simulations.Simulation.Field.Sow using a\r\n        variable rule'\r\n\r\n        fmt: seperator for formatting the path e.g., \".\". Other characters can be used with\r\n        caution, e.g., / and clearly declared in fmt argument.\r\n         For the above path if we want to use the forward slash, it will be '/Simulations/Simulation/Field/Sow using a variable rule', fmt = '/'\r\n\r\n        kwargs: Corresponding keyword arguments representing the paramters in the script manager and their values. Values is what you want\r\n        to change to; Example here Population =8.2, values should be entered with their corresponding data types e.g.,\r\n        int, float, bool,str etc.\r\n\r\n        return: self\r\n\r\n        \"\"\"\r\n        # reject space in fmt\r\n        if fmt != '.':\r\n            path = path.replace(fmt, \".\")\r\n\r\n        manager = self.Simulations.FindByPath(path)\r\n        for i in range(len(manager.Value.Parameters)):\r\n            _param = manager.Value.Parameters[i].Key\r\n            if _param in kwargs:\r\n                manager.Value.Parameters[i] = KeyValuePair[String, String](_param, f\"{kwargs[_param]}\")\r\n                # remove the successfully processed keys\r\n                kwargs.pop(_param)\r\n        if len(kwargs.keys()) > 0:\r\n            logger.error(f\"The following {kwargs} were not found in {path}\")\r\n        out_mgt_path = self.path\r\n        self.recompile_edited_model(out_path=out_mgt_path)\r\n\r\n        return self\r\n\r\n    def update_mgt(self, *, management: Union[dict, tuple], simulations: [list, tuple] = None, out: [Path, str] = None,\r\n                   reload: bool = True,\r\n                   **kwargs):\r\n        \"\"\"\r\n            Update management settings in the model. This method handles one management parameter at a time.\r\n\r\n            Parameters\r\n            ----------\r\n            management : dict or tuple\r\n                A dictionary or tuple of management parameters to update. The dictionary should have 'Name' as the key\r\n                for the management script's name and corresponding values to update. Lists are not allowed as they are mutable\r\n                and may cause issues with parallel processing. If a tuple is provided, it should be in the form (param_name, param_value).\r\n\r\n            simulations : list of str, optional\r\n                List of simulation names to update. If `None`, updates all simulations. This is not recommended for large\r\n                numbers of simulations as it may result in a high computational load.\r\n\r\n            out : str or pathlike, optional\r\n                Path to save the edited model. If `None`, uses the default output path specified in `self.out_path` or\r\n                `self.model_info.path`. No need to call `save_edited_file` after updating, as this method handles saving.\r\n\r\n            Returns\r\n            -------\r\n            self : Editor\r\n                Returns the instance of the `Editor` class for method chaining.\r\n\r\n            Notes ----- - Ensure that the `management` parameter is provided in the correct format to avoid errors. -\r\n            This method does not perform validation on the provided `management` dictionary beyond checking for key\r\n            existence. - If the specified management script or parameters do not exist, they will be ignored.\r\n            using a tuple for a specifying management script, paramters is recommended if you are going to pass the function to  a multi-processing class fucntion\r\n\r\n        \"\"\"\r\n        if isinstance(management, dict):  # we want to provide support for multiple scripts\r\n            # note the coma creates a tuple\r\n            management = management,\r\n\r\n        for sim in self.find_simulations(simulations):\r\n            zone = sim.FindChild[Models.Core.Zone]()\r\n            zone_path = zone.FullPath\r\n            for mgt in management:\r\n\r\n                action_path = f'{zone_path}.{mgt.get(\"Name\")}'\r\n                fp = zone.FindByPath(action_path)\r\n                # before proceeding, we need to check if fp is not None, that is if that script name does not exist\r\n                if fp is not None:\r\n                    values = mgt\r\n                    for i in range(len(fp.Value.Parameters)):\r\n                        param = fp.Value.Parameters[i].Key\r\n                        if param in values.keys():\r\n                            fp.Value.Parameters[i] = KeyValuePair[String, String](param, f\"{values[param]}\")\r\n        out_mgt_path = out or self.out_path or self.model_info.path\r\n        self.recompile_edited_model(out_path=out_mgt_path)\r\n\r\n        return self\r\n\r\n    # immediately open the file in GUI\r\n    def preview_simulation(self):\r\n\r\n        \"\"\"\r\n        Preview the simulation file in the apsimNGpy object in the APSIM graphical user interface\r\n        @return: opens the simulation file\r\n\r\n        \"\"\"\r\n        # TODO this need to be connected to the apsim installation path to make\r\n        #  sure that file are opened in their corresponding versions\r\n        self.save()\r\n        filepath = self.path\r\n        import platform\r\n        import subprocess\r\n        if platform.system() == 'Darwin':  # macOS\r\n            subprocess.call(['open', filepath])\r\n        elif platform.system() == 'Windows':  # Windows\r\n            os.startfile(filepath)\r\n        elif platform.system() == 'Linux':  # Linux\r\n            subprocess.call(['xdg-open', filepath])\r\n        else:\r\n            raise OSError('Unsupported operating system')\r\n\r\n    def _kvtodict(self, kv):\r\n        return {kv[i].Key: kv[i].Value for i in range(kv.Count)}\r\n\r\n    def compile_scripts(self):\r\n        for sim in self.simulations:\r\n            managers = sim.FindAllDescendants[Models.Manager]()\r\n            for manager in list(managers):\r\n                print(manager.SuccessfullyCompiledLast)\r\n                # if not manager.SuccessfullyCompiledLast:\r\n                #     manager.RebuildScriptModel(allowDuplicateClassName=False)\r\n\r\n    def extract_user_input(self, manager_name: str):\r\n        \"\"\"\r\n        Get user_input of a given model manager script.\r\n\r\n        Args:\r\n            manager_name (str): name of the Models.Manager script\r\n        returns:  a dictionary of user input with the key as the script parameters and values as the inputs\r\n\r\n        Example:\r\n        ____________________\r\n\r\n        >>> from apsimNGpy.core.base_data import load_default_simulations\r\n        >>> model = load_default_simulations(crop = 'maize')\r\n        >>> ui = model.extract_user_input(manager_name='Fertilise at sowing')\r\n        >>> print(ui)\r\n\r\n        {'Crop': 'Maize', 'FertiliserType': 'NO3N', 'Amount': '160.0'}\r\n\r\n        \"\"\"\r\n        param_dict = {}\r\n        for sim in self.simulations:\r\n            params = None\r\n            actions = sim.FindAllDescendants[Models.Manager]()\r\n            out = {\"simulation\": sim.Name}\r\n            for action in actions:\r\n                if action.Name == manager_name:\r\n                    params = self._kvtodict(action.Parameters)\r\n                    # return params\r\n\r\n                if params is not None and action.Name == manager_name:\r\n                    param_dict[sim.Name] = params\r\n        return param_dict\r\n\r\n    @staticmethod\r\n    def strip_time(date_string):\r\n        date_object = datetime.datetime.strptime(date_string, \"%Y-%m-%d\")\r\n        formatted_date_string = date_object.strftime(\"%Y-%m-%dT%H:%M:%S\")\r\n        return formatted_date_string  # Output: 2010-01-01T00:00:00\r\n\r\n    def change_simulation_dates(self, start_date: str = None, end_date: str = None,\r\n                                simulations: Union[tuple, list] = None):\r\n        \"\"\"Set simulation dates. this is important to run this method before run the weather replacement method as\r\n        the date needs to be allowed into weather\r\n\r\n        Parameters\r\n        -----------------------------------\r\n\r\n        :param: start_date: (str) optional\r\n            Start date as string, by default `None`\r\n        :param end_date: str (str) optional\r\n            End date as string, by default `None`\r\n        :param simulations (str), optional\r\n            List of simulation names to update, if `None` update all simulations\r\n        Note\r\n        ________\r\n        one of the start_date or end_date parameters should at least not be None\r\n\r\n        raises assertion error if all dates are None\r\n\r\n        @return None\r\n        Example:\r\n        ---------\r\n            >>> from apsimNGpy.core.base_data import load_default_simulations\r\n            >>> model = load_default_simulations(crop='maize')\r\n            >>> model.change_simulation_dates(start_date='2021-01-01', end_date='2021-01-12')\r\n            >>> changed_dates = model.extract_dates #check if it was successful\r\n            >>> print(changed_dates)\r\n               {'Simulation': {'start': datetime.date(2021, 1, 1),\r\n                'end': datetime.date(2021, 1, 12)}}\r\n            @note\r\n            It is possible to target a specific simulation by specifying simulation name for this case the name is Simulations, so, it could appear as follows\r\n             model.change_simulation_dates(start_date='2021-01-01', end_date='2021-01-12', simulation = 'Simulation')\r\n\r\n        \"\"\"\r\n        check = start_date or end_date\r\n        assert check is not None, \"One of the start_date or end_date parameters should not be None\"\r\n        for sim in self.find_simulations(simulations):\r\n            clock = sim.FindChild[Models.Clock]()\r\n\r\n            if start_date is not None:\r\n                dateString1 = start_date\r\n                self.start = DateTime.Parse(dateString1)\r\n                clock.Start = self.start\r\n\r\n            if end_date is not None:\r\n                dateString2 = end_date\r\n                self.end = DateTime.Parse(dateString2)\r\n                clock.End = self.end\r\n\r\n    @property\r\n    def extract_dates(self, simulations=None):\r\n        \"\"\"Get simulation dates in the model\r\n\r\n        Parameters\r\n        ----------\r\n        simulations, optional\r\n            List of simulation names to get, if `None` get all simulations\r\n        Returns\r\n        -------\r\n            Dictionary of simulation names with dates\r\n        # Example\r\n            >>> from apsimNGpy.core.base_data import load_default_simulations\r\n            >>> model = load_default_simulations(crop='maize')\r\n            >>> changed_dates = model.extract_dates\r\n            >>> print(changed_dates)\r\n               {'Simulation': {'start': datetime.date(2021, 1, 1),\r\n                'end': datetime.date(2021, 1, 12)}}\r\n            @note\r\n            It is possible to target a specific simulation by specifying simulation name for this case the name is Simulations,\r\n             so, it could appear as follows\r\n             model.change_simulation_dates(start_date='2021-01-01', end_date='2021-01-12', simulation = 'Simulation')\r\n\r\n        \"\"\"\r\n        dates = {}\r\n        for sim in self.find_simulations(simulations):\r\n            clock = sim.FindChild[Models.Clock]()\r\n            st = clock.Start\r\n            et = clock.End\r\n            dates[sim.Name] = {}\r\n            dates[sim.Name][\"start\"] = datetime.date(st.Year, st.Month, st.Day)\r\n            dates[sim.Name][\"end\"] = datetime.date(et.Year, et.Month, et.Day)\r\n        return dates\r\n\r\n    def extract_start_end_years(self, simulations: str = None):\r\n        \"\"\"Get simulation dates\r\n\r\n        Parameters\r\n        ----------\r\n        @param simulations: (str) optional\r\n            List of simulation names to use if `None` get all simulations\r\n        @Returns\r\n        -------\r\n            Dictionary of simulation names with dates\r\n\r\n        \"\"\"\r\n        dates = {}\r\n        for sim in self.find_simulations(simulations):\r\n            clock = sim.FindChild[Models.Clock]()\r\n            start = clock.Start\r\n            end = clock.End\r\n        return start.Year, end.Year\r\n\r\n    @property\r\n    def met(self):\r\n        return self._met\r\n\r\n    @met.setter\r\n    def met(self, value):\r\n        self._met = value\r\n\r\n    def change_met(self):\r\n        self.replace_met_file(self.met)\r\n        return self\r\n\r\n    def replace_met_file(self, *, weather_file: Union[Path, str], simulations=None, **kwargs):\r\n        try:\r\n            \"\"\"\r\n            Searches the weather child and replaces it with a new one\r\n\r\n            Parameters\r\n            ----------\r\n            @param weather_file: Union[Path, str], required):\r\n                Weather file name, path should be relative to simulation or absolute.\r\n                \r\n            @param simulations (str, optional)\r\n                List of simulation names to update, if `None` update all simulations\r\n                \r\n            \"\"\"\r\n            # we need to catch file not found errors before it becomes a problem\r\n            if not os.path.isfile(weather_file):\r\n                raise FileNotFoundError(weather_file)\r\n            for sim_name in self.find_simulations(simulations):\r\n                weathers = sim_name.FindAllDescendants[Weather]()\r\n                for met in weathers:\r\n                    met.FileName = os.path.realpath(weather_file)\r\n            return self\r\n\r\n        except Exception as e:\r\n            logger.info(repr(e))  # this error will be logged to the folder logs in the current working dir_path\r\n            raise\r\n\r\n    def show_met_file_in_simulation(self, simulations: list = None):\r\n        \"\"\"Show weather file for all simulations\"\"\"\r\n        weather_list = {}\r\n        for sim_name in self.find_simulations(simulations):\r\n            weathers = sim_name.FindAllDescendants[Weather]()\r\n            for met in weathers:\r\n                weather_list[sim_name.Name] = met.FileName\r\n        return weather_list\r\n\r\n    def change_report(self, *, command: str, report_name='Report', simulations=None, set_DayAfterLastOutput=None,\r\n                      **kwargs):\r\n        \"\"\"\r\n            Set APSIM report variables for specified simulations.\r\n\r\n        This function allows you to set the variable names for an APSIM report\r\n        in one or more simulations.\r\n\r\n        Parameters\r\n        ----------\r\n        command : str\r\n            The new report string that contains variable names.\r\n        report_name : str\r\n            The name of the APSIM report to update defaults to Report.\r\n        simulations : list of str, optional\r\n            A list of simulation names to update. If `None`, the function will\r\n            update the report for all simulations.\r\n\r\n        Returns\r\n        -------\r\n        None\r\n\r\n        \"\"\"\r\n        simulations = self.find_simulations(simulations)\r\n        for sim in simulations:\r\n            i_enum = sim.FindAllDescendants[Models.Report](report_name)\r\n            for rep in i_enum:\r\n                rep.set_VariableNames(command.strip().splitlines())\r\n                if set_DayAfterLastOutput:\r\n                    rep.set_DayAfterLastOutput = set_DayAfterLastOutput\r\n        return rep\r\n\r\n    def get_report(self, simulation=None, names_only=False):\r\n        \"\"\"Get current report string\r\n\r\n        Parameters\r\n        ----------\r\n        simulation, optional\r\n            Simulation name, if `None` use the first simulation.\r\n        Returns\r\n        -------\r\n            List of report lines.\r\n            @param names_only: return the names of the reports as a list if names_only is True\r\n\r\n        \"\"\"\r\n        sim = self.find_simulations(simulation)\r\n        REPORTS = {}\r\n        for si in sim:\r\n            REPORTS[si.Name] = [i.Name for i in (si.FindAllDescendants[Models.Report]())] if names_only else \\\r\n                si.FindAllDescendants[Models.Report]()\r\n        return REPORTS\r\n\r\n    def extract_soil_physical(self, simulations: [tuple, list] = None):\r\n        \"\"\"Find physical soil\r\n\r\n        Parameters\r\n        ----------\r\n        :simulation, optional\r\n            Simulation name, if `None` use the first simulation.\r\n        Returns\r\n        -------\r\n            APSIM Models.Soils.Physical object\r\n\r\n        \"\"\"\r\n        sim_physical = {}\r\n        for nn, simu in enumerate(self._find_simulation(simulations)):\r\n            soil_object = simu.FindDescendant[Soil]()\r\n            physical_soil = soil_object.FindDescendant[Physical]()\r\n            sim_physical[simu.Name] = physical_soil\r\n        return sim_physical\r\n\r\n    def extract_any_soil_physical(self, parameter, simulations: [list, tuple] = None):\r\n        \"\"\"\r\n        Extracts soil physical parameters in the simulation\r\n\r\n        Args:\r\n            parameter (_string_): string e.g. DUL, SAT\r\n            simulations (string, optional): Targeted simulation name. Defaults to None.\r\n        ---------------------------------------------------------------------------\r\n        returns an array of the parameter values\r\n\r\n        \"\"\"\r\n        assert isinstance(parameter, str) == True, \"Soil parameter name must be a string\"\r\n        data = {}\r\n        _simulations = simulations if simulations else self.simulation_names\r\n        sop = self.extract_soil_physical(_simulations)\r\n        for sim in _simulations:\r\n            soil_physical = sop[sim]\r\n            soil_p_param = getattr(soil_physical, parameter)\r\n            data[sim] = list(soil_p_param)\r\n        return data\r\n\r\n    def inspect_model(self, model_type: Union[str, Models], fullpath=True):\r\n        \"\"\"\r\n        Inspect the model types and returns the model paths or names. usefull if you want to identify the path to the\r\n        model for editing the model.\r\n        :param model_type: (Models) e.g. Models.Clock will return all fullpath or names\r\n        of models in the type Clock -Models.Manager returns information about the manager scripts in simulations. strings are allowed\r\n        to, in the case you may not need to import the global namespace, Models. e.g 'Models.Clock' will still work well.\r\n\r\n        -Models.Core.Simulation returns information about the simulation -Models.Climate.Weather returns a list of\r\n        paths or names pertaining to weather models -Models.Core.IPlant  returns a list of paths or names pertaining\r\n        to all crops models available in the simulation :param  fullpath: (bool) return the full path of the model\r\n        relative to the parent simulations node. please note the difference between simulations and simulation.\r\n        :return: list[str]: list of all full paths or names of the model relative to the parent simulations node \\n\r\n        Example:\r\n        >>> from apsimNGpy.core import base_data\r\n        >>> from apsimNGpy.core.core import Models\r\n        >>> model = base_data.load_default_simulations(crop ='maize')\r\n        >>> model.inspect_model(Models.Manager, fullpath=True)\r\n         [.Simulations.Simulation.Field.Sow using a variable rule', '.Simulations.Simulation.Field.Fertilise at\r\n        sowing', '.Simulations.Simulation.Field.Harvest']\r\n         >>> model.inspect_model(Models.Clock) # gets the path to the Clock models\r\n         ['.Simulations.Simulation.Clock']\r\n         >>> model.inspect_model(Models.Core.IPlant) # gets the path to the crop model\r\n         ['.Simulations.Simulation.Field.Maize']\r\n         >>> model.inspect_model(Models.Core.IPlant, fullpath=False) # gets you the name of the crop Models\r\n         ['Maize']\r\n         >>> model.inspect_model(Models.Fertiliser, fullpath=True)\r\n         ['.Simulations.Simulation.Field.Fertiliser']\r\n         >>> model.inspect_model('Models.Fertiliser', fullpath=False) # strings are allowed to\r\n\r\n        \"\"\"\r\n        import Models\r\n        if isinstance(model_type, str):\r\n            attr_model = model_type.strip(\"Models.\")\r\n            # for security purpose we have to evaluate the string\r\n            if \"_\" in model_type or not getattr(Models, attr_model, None):\r\n                raise ValueError(f\"Invalid model name: {model_type}\")\r\n            model_type = eval(model_type, {'Models': Models})\r\n        if isinstance(model_type, type(Models.Clock)):\r\n            obj = self.Simulations.FindAllDescendants[model_type]()\r\n            if obj:\r\n                if fullpath:\r\n                    return [i.FullPath for i in obj]\r\n                else:\r\n                    return [i.Name for i in obj]\r\n\r\n            logging.info(f\"{model_type.__name__} does not exists\")\r\n        logging.error(f\"Invalid model type '{model_type}'\")\r\n\r\n    def configs(self):\r\n        \"\"\"records activities that have been done on the model including changes to the file\r\n\r\n        \"\"\"\r\n        return {\r\n            # check is model has been ran yet\r\n            'model_has_been_ran': self.ran_ok,\r\n            'experiment': self.experiment,\r\n            'experiment_created': self.experiment_created,\r\n            'reports': self.report_names\r\n        }\r\n\r\n    def replace_soils_values_by_path(self, node_path: str, indices: list = None, **kwargs):\r\n        \"\"\"\r\n        set the new values of the specified soil object by path\r\n\r\n        unfortunately, it handles one soil child at a time e.g., Physical at a go\r\n        Args:\r\n\r\n        node_path (str, required): complete path to the soil child of the Simulations e.g.,Simulations.Simulation.Field.Soil.Organic.\r\n         Use`copy path to node fucntion in the GUI to get the real path of the soil node.\r\n\r\n        indices (list, optional): defaults to none but could be the position of the replacement values for arrays\r\n\r\n        kwargs (key word arguments): This carries the parameter and the values e.g., BD = 1.23 or BD = [1.23, 1.75]\r\n         if the child is Physical, or Carbon if the child is Organic\r\n\r\n         raises raise value error if none of the key word arguments, representing the paramters are specified\r\n         returns:\r\n            - apsimNGpy.core.APSIMNG object and if the path specified does not translate to the child object in\r\n         the simulation\r\n\r\n         Example:\r\n              >>> from apsimNGpy.core.base_data import load_default_simulations\r\n\r\n             >>> model = load_default_simulations(crop ='Maize', simulations_object=False)# initiate model\r\n\r\n              >>> model = CoreModel(model) # replace with your intended file path\r\n              >>> model.replace_soils_values_by_path(node_path='.Simulations.Simulation.Field.Soil.Organic', indices=[0], Carbon =1.3)\r\n\r\n              >>> sv= model.get_soil_values_by_path('.Simulations.Simulation.Field.Soil.Organic', 'Carbon')\r\n\r\n               output # {'Carbon': [1.3, 0.96, 0.6, 0.3, 0.18, 0.12, 0.12]}\r\n\r\n\r\n        \"\"\"\r\n        if not kwargs:\r\n            raise ValueError('No parameters are specified')\r\n        _soil_child = self.Simulations.FindByPath(node_path)\r\n        if _soil_child is None:\r\n            raise ValueError(f\"No such child: {node_path} exist in the simulation file {self.path}\")\r\n        if not kwargs:\r\n            logger.error('no parameters and values are supplied')\r\n            return self\r\n        for k, v in kwargs.items():\r\n            parameter = k\r\n            if isinstance(v, (int, float)):\r\n                v = [v]\r\n            if indices is None:\r\n                indices = [v.index(i) for i in v]\r\n\r\n            param_values_new = list(getattr(_soil_child.Value, parameter))\r\n            _param_new = replace_variable_by_index(param_values_new, v, indices)\r\n            setattr(_soil_child.Value, parameter, _param_new)\r\n\r\n    def get_soil_values_by_path(self, node_path, *args):\r\n\r\n        var_out = {}\r\n        _soil_child_obj = self.Simulations.FindByPath(node_path)\r\n\r\n        if args:\r\n            for arg in args:\r\n\r\n                gv = getattr(_soil_child_obj.Value, arg, None)\r\n                if gv:\r\n                    gv = list(gv)\r\n                else:\r\n                    logger.error(f\"{arg} is not a valid parameter for child {node_path}\")\r\n                var_out[arg] = gv\r\n        return var_out\r\n\r\n    def extract_soil_property_by_path(self, path: str, str_fmt='.', index: list = None):\r\n        \"\"\"\r\n        path to the soil property should be Simulation.soil_child.parameter_name e.g., = 'Simulation.Organic.Carbon.\r\n        @param: index(list), optional position of the soil property to a return\r\n        @return: list\r\n\r\n        \"\"\"\r\n        list_of_soil_nones = dict(organic=Organic, physical=Physical, Chemical=Chemical)\r\n        parameters = path.split(str_fmt)\r\n        if len(parameters) != 3:\r\n            raise ValueError('path incomplete')\r\n        # find the simulation\r\n        find_simu = self.find_simulations(parameters[0])[0]  # because it returns a list\r\n        soil_child = list_of_soil_nones[parameters[1].lower()]\r\n        soil_object = find_simu.FindDescendant[Soil]().FindDescendant[soil_child]()\r\n        attribute = list(getattr(soil_object, parameters[2]))\r\n        if index is None:\r\n            return attribute\r\n        return [attribute[i] for i in index]\r\n\r\n    def _extract_solute(self, simulation=None):\r\n        # find the solute child in the simulation\r\n        sims = self._find_simulation(simulation)\r\n        solute = {}\r\n        for sim in sims:\r\n            solute[sim.Name] = sim.FindAllDescendants[Models.Soils.Solute]()\r\n\r\n        return solute\r\n\r\n    def replace_soil_properties_by_path(self, path: str,\r\n                                        param_values: list,\r\n                                        str_fmt=\".\",\r\n                                        **kwargs):\r\n        # TODO I know there is a better way to implement this, to be duplicated\r\n        warnings.warn(f\"replace_soil_properties_by_path is deprecated use self.replace_soils_values_by_path instead\",\r\n                      DeprecationWarning)\r\n\r\n        \"\"\"\r\n        This function processes a path where each component represents different nodes in a hierarchy,\r\n        with the ability to replace parameter values at various levels.\r\n\r\n        :param path:\r\n            A string representing the hierarchical path of nodes in the order:\r\n            'simulations.Soil.soil_child.crop.indices.parameter'. Soil here is a constant\r\n\r\n            - The components 'simulations', 'crop', and 'indices' can be `None`.\r\n            - Example of a `None`-inclusive path: 'None.Soil.physical.None.None.BD'\r\n            - If `indices` is a list, it is expected to be wrapped in square brackets.\r\n            - Example when `indices` are not `None`: 'None.Soil.physical.None.[1].BD'\r\n            - if simulations please use square blocks\r\n               Example when `indices` are not `None`: '[maize_simulation].physical.None.[1].BD'\r\n\r\n            **Note: **\r\n            - The `soil_child` child might be replaced in a non-systematic manner, which is why indices\r\n              are used to handle this complexity.\r\n            - When a component is `None`, default values are used for that part of the path. See the\r\n              documentation for the `replace_soil_property_values` function for more information on\r\n              default values.\r\n\r\n        :param param_values:\r\n            A list of parameter values that will replace the existing values in the specified path.\r\n            For example, `[0.1, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08]` could be used to replace values for `NH3`.\r\n\r\n        :param str_fmt:\r\n            A string specifying the formatting character used to separate each component in the path.\r\n            Examples include \".\", \"_\", or \"/\". This defines how the components are joined together to\r\n            form the full path.\r\n\r\n        :return:\r\n            Returns the instance of `self` after processing the path and applying the parameter value replacements.\r\n\r\n            Example f\r\n\r\n            from apsimNGpy.core.base_data import load_default_simulations\r\n            model = load_default_simulations(crop = 'maize')\r\n            model.replace_soil_properties_by_path(path = 'None.Soil.Organic.None.None.Carbon', param_values= [1.23])\r\n            if we want to replace carbon at the bottom of the soil profile, we use a negative index  -1\r\n            model.replace_soil_properties_by_path(path = 'None.Soil.Organic.None.[-1].Carbon', param_values= [1.23])\r\n            \r\n        \"\"\"\r\n\r\n        function_parameters = ['simulations', 'Soil', 'soil_child', 'crop', 'indices', 'parameter']\r\n        expected_nones = ['simulations', 'crop', 'indices']\r\n        args = path.split(str_fmt)\r\n        if len(args) != len(function_parameters):\r\n            raise TypeError(f\"expected order is: {function_parameters}, crop, indices and simulations can be None\"\r\n                            f\"if replacement is related to soil properties, soil is a constant after the simulation name\")\r\n        # bind them to the function paramters\r\n        fpv = dict(zip(function_parameters, args))\r\n\r\n        # by all means, we want indices to be evaluated\r\n\r\n        fpt = {k: (p := CoreModel._try_literal_eval(v)) if (k in expected_nones) else (p := v)\r\n               for k, v in fpv.items()}\r\n        # we can now call the method below. First, we update param_values\r\n        fpt['param_values'] = param_values\r\n        return self.replace_soil_property_values(**fpt)\r\n\r\n    @staticmethod\r\n    def _try_literal_eval(_string):\r\n        try:\r\n            string_new = ast.literal_eval(_string)\r\n        except ValueError:\r\n            return _string\r\n        return string_new\r\n\r\n    def replace_soil_property_values(self, *, parameter: str,\r\n                                     param_values: list,\r\n                                     soil_child: str,\r\n                                     simulations: list = None,\r\n                                     indices: list = None,\r\n                                     crop=None,\r\n                                     **kwargs):\r\n        \"\"\"\r\n        Replaces values in any soil property array. The soil property array\r\n        :param parameter: str: parameter name e.g., NO3, 'BD'\r\n\r\n        :param param_values: list or tuple: values of the specified soil property name to replace\r\n\r\n        :param soil_child: str: sub child of the soil component e.g., organic, physical etc.\r\n\r\n        :param simulations: list: list of simulations to where the child is found if\r\n        not found, all current simulations will receive the new values, thus defaults to None\r\n\r\n        :param indices: list. Positions in the array which will be replaced. Please note that unlike C#, python satrt counting from 0\r\n\r\n        :crop (str, optional): string for soil water replacement. Default is None\r\n\r\n        \"\"\"\r\n        if isinstance(param_values, (int, float)):\r\n            param_values = [param_values]\r\n        if indices is None:\r\n            indices = [param_values.index(i) for i in param_values]\r\n        for simu in self.find_simulations(simulations):\r\n            soil_object = simu.FindDescendant[Soil]()\r\n            _soil_child = soil_object.FindDescendant[soil_components(soil_child)]()\r\n\r\n            param_values_new = list(getattr(_soil_child, parameter))\r\n            if soil_child == 'soilcrop':\r\n                if crop is None:\r\n                    raise ValueError('Crop not defined')\r\n                crop = crop.capitalize() + \"Soil\"\r\n                _soil_child = soil_object.FindDescendant[soil_components(soil_child)](crop)\r\n                param_values_new = list(getattr(_soil_child, parameter))\r\n                _param_new = replace_variable_by_index(param_values_new, param_values, indices)\r\n                setattr(_soil_child, parameter, _param_new)\r\n            else:\r\n                _param_new = replace_variable_by_index(param_values_new, param_values, indices)\r\n                setattr(_soil_child, parameter, _param_new)\r\n        return self\r\n\r\n    def extract_any_soil_organic(self, parameter: str, simulation: tuple = None):\r\n        \"\"\"extracts any specified soil  parameters in the simulation\r\n\r\n        Args:\r\n            :param parameter (string, required): string e.g., Carbon, FBiom.\r\n            open APSIMX file in the GUI and examne the phyicals child for clues on the parameter names\r\n            :param simulation (string, optional): Targeted simulation name.\r\n            Defaults to None.\r\n           :param  param_values (array, required): arrays or list of values for the specified parameter to replace\r\n\r\n        \"\"\"\r\n\r\n        soil_organic = self.extract_soil_organic(simulation)\r\n        get_organic = {sim:\r\n                           list(getattr(soil_organic[sim], parameter))\r\n                       for sim in (simulation if simulation is not None else self.simulation_names)\r\n                       }\r\n\r\n        return get_organic\r\n\r\n    # Find a list of simulations by name\r\n    def extract_crop_soil_water(self, parameter: str, crop: str = \"Maize\", simulation: Union[list, tuple] = None):\r\n        \"\"\" deprecated\r\n\r\n        Args:\r\n           :param parameter (str): crop soil water parameter names e.g. LL, XF etc\r\n           :param crop (str, optional): crop name. Defaults to \"Maize\".\r\n            simulation (_str_, optional): _target simulation name . Defaults to None.\r\n\r\n        Returns:\r\n            _type_: list[int, float]\r\n\r\n        \"\"\"\r\n        assert isinstance(parameter, str), 'Parameter name should be a string'\r\n        assert isinstance(crop, str), \"Crop name should be a string\"\r\n        for simu in self.find_simulations(simulation):\r\n            soil_object = simu.FindDescendant[Soil]()\r\n            soil_crop = soil_object.FindAllDescendants[SoilCrop]()\r\n            # can be used to target specific crop\r\n            for crops in soil_crop:\r\n                crop_soil = crop + \"Soil\"\r\n                if crops.Name == crop_soil:\r\n                    param_values = getattr(crops, parameter)\r\n                    return list(param_values)\r\n\r\n    def find_simulations(self, simulations: Union[list, tuple, str] = None):\r\n        simulations_names = simulations\r\n        \"\"\"Find simulations by name\r\n\r\n        Parameters\r\n        ----------\r\n        :param simulations, str, optional\r\n            List of simulation names to find, if `None` return all simulations\r\n        Returns\r\n        -------\r\n            list of APSIM Models.Core.Simulation objects\r\n        \"\"\"\r\n\r\n        if simulations_names is None:\r\n            return self.simulations\r\n        if isinstance(simulations_names, str):\r\n            simulations_names = {simulations_names}\r\n        elif isinstance(simulations, (list, tuple)):\r\n            simulations_names = set(simulations)\r\n        sims = []\r\n        for s, name in zip(self.simulations, simulations_names):\r\n            if s.Name == name:\r\n                sims.append(s)\r\n        if len(sims) == 0:\r\n            logging.info(f\"{simulations_names}: Not found!\")\r\n        else:\r\n            return sims\r\n\r\n    # Find a single simulation by name\r\n    def _find_simulation(self, simulations: Union[tuple, list] = None):\r\n        if simulations is None:\r\n            return self.simulations\r\n\r\n        else:\r\n            return [self.Simulations.FindDescendant(i) for i in simulations if i in self.simulation_names]\r\n\r\n    @staticmethod\r\n    def adjustSatDul(sat_: list, dul_: list):\r\n        for enum, (s, d) in enumerate(zip(sat_, dul_)):\r\n            # first check if they are equal\r\n            # if d is greater than s, then by what value?, we need this value to add it to 0.02\r\n            #  to be certain all the time that dul is less than s we subtract the summed value\r\n            if d >= s:\r\n\r\n                diff = d - s\r\n                if diff == 0:\r\n                    dul_[enum] = d - 0.02\r\n                else:\r\n                    dul_[enum] = d - (diff + 0.02)\r\n\r\n            else:\r\n                dul_[enum] = d\r\n        return dul_\r\n\r\n    def clean_up(self, db=True):\r\n        \"\"\"\r\n        Clears the file cloned the datastore and associated csv files are not deleted if db is set to False defaults to True.\r\n\r\n        Returns:\r\n           >>None: This method does not return a value.\r\n           >> Please proceed with caution, we assume that if you want to clear the model objects, then you don't need them,\r\n           but by making copy compulsory, then, we are clearing the edited files\r\n\r\n        \"\"\"\r\n        try:\r\n            self._DataStore.Close()\r\n            self._DataStore.Dispose()\r\n            Path(self.path).unlink(missing_ok=True)\r\n            Path(self.path.strip('apsimx') + \"bak\").unlink(missing_ok=True)\r\n            if db:\r\n                Path(self.datastore).unlink(missing_ok=True)\r\n                Path(self.path.strip('apsimx') + \"db-wal\").unlink(missing_ok=True)\r\n                Path(self.path.strip('apsimx') + \"db-shm\").unlink(missing_ok=True)\r\n                logger.info('database cleaned successfully')\r\n        except (FileNotFoundError, PermissionError) as e:\r\n\r\n            pass\r\n\r\n        return self\r\n\r\n    def create_experiment(self, permutation: bool = True, base_name: str = None, **kwargs):\r\n        \"\"\"\r\n        Initialize an Experiment instance, adding the necessary models and factors.\r\n\r\n        Args:\r\n\r\n            **kwargs: Additional parameters for CoreModel.\r\n\r\n            :param permutation (bool). If True, the experiment uses a permutation node to run unique combinations of the specified\r\n            factors for the simulation. For example, if planting population and nitrogen fertilizers are provided,\r\n            each combination of planting population level and fertilizer amount is run as an individual treatment.\r\n\r\n           :param  base_name (str, optional): The name of the base simulation to be moved into the experiment setup. if not\r\n            provided, it is expected to be Simulation as the default\r\n\r\n        \"\"\"\r\n        if self.experiment_created:\r\n            logger.info('Experiment was already created. If you want to amend experiment, '\r\n                        'use add_model(), remove_model()')\r\n            return self\r\n        self.factor_names = []\r\n        self.permutation = permutation\r\n        # Add core experiment structure\r\n\r\n        self.add_model(model_type=Models.Factorial.Experiment, adoptive_parent=Models.Core.Simulations, **kwargs)\r\n\r\n        self.add_model(model_type=Models.Factorial.Factors, adoptive_parent=Models.Factorial.Experiment, **kwargs)\r\n\r\n        if permutation:\r\n            self.add_model(model_type=Models.Factorial.Permutation, adoptive_parent=Models.Factorial.Factors, **kwargs)\r\n\r\n        # Move base simulation under the factorial experiment\r\n        self.move_model(Models.Core.Simulation, Models.Factorial.Experiment, base_name, None)\r\n\r\n        self.save()\r\n        # update the experiment status\r\n        self.experiment = True\r\n        self.experiment_created = True\r\n\r\n    def add_factor(self, specification: str, factor_name: str, **kwargs):\r\n        \"\"\"\r\n        Adds a factor to the created experiment. Thus, this method only works on factorial experiments\r\n\r\n        It could raise a value error if the experiment is not yet created.\r\n\r\n        Under some circumstances, experiment will be created automatically as a permutation experiment.\r\n\r\n        Parameters:\r\n        ----------\r\n\r\n        :specification: *(str), required*\r\n\r\n        A specification can be:\r\n                - 1. multiple values or categories e.g., \"[Sow using a variable rule].Script.Population =4, 66, 9, 10\"\r\n                - 2. Range of values e.g, \"[Fertilise at sowing].Script.Amount = 0 to 200 step 20\",\r\n        :factor_name: *(str), required*\r\n\r\n        - expected to be the user-desired name of the factor being specified e.g., population\r\n\r\n        Example:\r\n            >>> from apsimNGpy.core import base_data\r\n            >>> apsim = base_data.load_default_simulations(crop='Maize')\r\n            >>> apsim.create_experiment(permutation=False)\r\n            >>> apsim.add_factor(specification=\"[Fertilise at sowing].Script.Amount = 0 to 200 step 20\", factor_name='Nitrogen')\r\n            >>> apsim.add_factor(specification=\"[Sow using a variable rule].Script.Population =4 to 8 step 2\", factor_name='Population')\r\n            >>> apsim.run() # doctest: +SKIP\r\n        \"\"\"\r\n        if factor_name is None:\r\n            get_name = specification.split(\"=\")[0].strip()\r\n            # split again by\r\n            factor_name = get_name.split(\".\")[-1]\r\n\r\n        if not self.experiment:\r\n            msg = 'experiment was not defined, it has been created with default settings'\r\n            self.create_experiment(permutation=True)  # create experiment with default parameters of permutation\r\n\r\n        # Add individual factors\r\n        if self.permutation:\r\n            parent_factor = Models.Factorial.Permutation\r\n        else:\r\n            parent_factor = Models.Factorial.Factors\r\n\r\n        # find if a suggested factor exists\r\n        factor_in = self.Simulations.FindInScope[Models.Factorial.Factor](factor_name)\r\n        if factor_in:\r\n\r\n            # if already exists, update the specifications\r\n            factor_in.set_Specification(specification)\r\n\r\n        else:\r\n            # if new factor, add it to the Simulations\r\n            self.add_model(model_type=Models.Factorial.Factor, adoptive_parent=parent_factor, rename=factor_name)\r\n\r\n            _added = self.Simulations.FindInScope[Models.Factorial.Factor](factor_name)\r\n            # update with specification\r\n            _added.set_Specification(specification)\r\n        self.save()\r\n        self.factor_names.append(factor_name)\r\n        self.factors[factor_name] = specification\r\n\r\n    def set_continuous_factor(self, factor_path, lower_bound, upper_bound, interval, factor_name=None):\r\n        \"\"\"\r\n        Wraps around `add_factor` to add a continuous factor, just for clarity\r\n\r\n        Args:\r\n            :param factor_path: (str): The path of the factor definition relative to its child node,\r\n                e.g., `\"[Fertilise at sowing].Script.Amount\"`.\r\n            :param factor_name: (str): The name of the factor.\r\n            :param lower_bound: (int or float): The lower bound of the factor.\r\n            :param upper_bound: (int or float): The upper bound of the factor.\r\n            :param interval: (int or float): The distance between the factor levels.\r\n\r\n        Returns:\r\n            ApsimModel or CoreModel: An instance of `apsimNGpy.core.core.apsim.ApsimModel` or `CoreModel`.\r\n        Example:\r\n            >>> from apsimNGpy.core import base_data\r\n            >>> apsim = base_data.load_default_simulations(crop='Maize')\r\n            >>> apsim.create_experiment(permutation=False)\r\n            >>> apsim.set_continuous_factor(factor_path = \"[Fertilise at sowing].Script.Amount\", lower_bound=100, upper_bound=300, interval=10)\r\n\r\n        \"\"\"\r\n        format_factor = f\"{factor_path} = {lower_bound} to {upper_bound} step {interval}\"\r\n        self.add_factor(specification=format_factor, factor_name=factor_name)\r\n\r\n    def set_categorical_factor(self, factor_path: str, categories: Union[list, tuple], factor_name: str = None):\r\n        \"\"\"\r\n        wraps around add_factor() to add a continuous factor, just for clarity\r\n         parameters\r\n         __________________________\r\n        :param factor_path: (str, required): path of the factor definition relative to its child node \"[Fertilise at sowing].Script.Amount\"\r\n        :param factor_name: (str) name of the factor.\r\n        :param categories: (tuple, list, required): multiple values of a factor\r\n        :returns:\r\n          ApsimModel or CoreModel: An instance of `apsimNGpy.core.core.apsim.ApsimModel` or `CoreModel`.\r\n        Example:\r\n            >>> from apsimNGpy.core import base_data\r\n            >>> apsim = base_data.load_default_simulations(crop='Maize')\r\n            >>> apsim.create_experiment(permutation=False)\r\n            >>> apsim.set_continuous_factor(factor_path = \"[Fertilise at sowing].Script.Amount\", lower_bound=100, upper_bound=300, interval=10)\r\n\r\n        \"\"\"\r\n        format_factor = f\"{factor_path} = {','.join(map(str, categories))}\"\r\n        self.add_factor(specification=format_factor, factor_name=factor_name)\r\n\r\n    def add_crop_replacements(self, _crop: str):\r\n        \"\"\"\r\n        Adds a replacement folder as a child of the simulations.\r\n        Useful when you intend to edit cultivar **parameters**.\r\n\r\n        **Args:**\r\n            - **_crop** (*str*): Name of the crop to be added to the replacement folder.\r\n\r\n        **Returns:**\r\n            - *ApsimModel*: An instance of `apsimNGpy.core.core.apsim.ApsimModel` or `CoreModel`.\r\n\r\n        **Raises:**\r\n            - *ValueError*: If the specified crop is not found.\r\n        \"\"\"\r\n\r\n        _FOLDER = Models.Core.Folder()\r\n        \"everything is edited in place\"\r\n        CROP = _crop\r\n        _FOLDER.Name = \"Replacements\"\r\n        PARENT = self.Simulations\r\n        ADD(_FOLDER, PARENT)\r\n        # assumes that the crop already exists in the simulation\r\n        _crop = PARENT.FindInScope[Models.PMF.Plant](CROP)\r\n        if _crop is not None:\r\n            ADD(_crop, _FOLDER)\r\n        else:\r\n            logger.error(f\"No plants of crop{CROP} found\")\r\n    def get_model_paths(self) -> list[str]:\r\n        \"\"\"\r\n        select out a few model types to use for building the APSIM file inspections\r\n        \"\"\"\r\n        def filter_out():\r\n            import Models\r\n            data = []\r\n            model_types = ['Models.Core.Simulation', 'Models.Soils.Soil', 'Models.PMF.Plant', 'Models.Manager',\r\n                  'Models.Climate.Weather', 'Models.Report', 'Models.Clock', 'Models.Core.Folder',\r\n                  'Models.Soils.Solute',\r\n                  'Models.Soils.Swim3', 'Models.Soils.SoilCrop', 'Models.Soils.Water', 'Models.Summary',\r\n                  'Models.Core.Zone', 'Models.Management.RotationManager',\r\n                  'Models.Soils.CERESSoilTemperature', 'Models.Series', 'Models.Factorial.Experiment',\r\n                  'Models.Factorial.Permutation', 'Models.Irrigation',\r\n                  'Models.Factorial.Factors',\r\n                  'Models.Sobol', 'Models.Operations', 'Models.Morris', 'Models.Fertiliser', 'Models.Core.Events',\r\n                  'Models.Core.VariableComposite',\r\n                  'Models.Soils.Physical', 'Models.Soils.Chemical', 'Models.Soils.Organic']\r\n            for i in model_types:\r\n\r\n                ans = self.inspect_model(eval(i))\r\n                if not 'Replacements' in ans and 'Folder' in i:\r\n                    continue\r\n                data.extend(ans)\r\n            del Models, model_types\r\n            return data\r\n        return filter_out()\r\n    def inspect_file(self, indent=0, display_full_path = True):\r\n        \"\"\"\r\n        Inspect the file by calling inspect_model() through get_model_paths.\r\n        This method is important in inspecting the whole file and also getting the scripts paths\r\n        \"\"\"\r\n\r\n        def build_tree(paths):\r\n            from collections import defaultdict\r\n            tree = lambda: defaultdict(tree)\r\n            root = tree()\r\n            for path in paths:\r\n                parts = path.strip('.').split('.')\r\n                current = root\r\n                for part in parts:\r\n                    current = current[part]\r\n            return root\r\n\r\n        def print_tree(node, indent=indent, full_path=\"\", dis_full_path=display_full_path):\r\n            for key in sorted(node.keys()):\r\n                current_path = f\"{full_path}.{key}\" if full_path else key\r\n                if dis_full_path:\r\n                   print(\"    \" * indent + f\"- {key}: .{current_path}\")\r\n                   print_tree(node[key], indent + 1, current_path)\r\n                else:\r\n                    print(\"    \" * indent + f\"- {key}\")\r\n                    print_tree(node[key], indent + 1, current_path)\r\n\r\n        tree = build_tree(self.get_model_paths())\r\n        print_tree(tree)\r\n\r\n\r\nif __name__ == '__main__':\r\n\r\n    from pathlib import Path\r\n    from time import perf_counter\r\n\r\n    # Model = FileFormat.ReadFromFile[Models.Core.Simulations](model, None, False)\r\n    os.chdir(Path.home())\r\n    from apsimNGpy.core.base_data import load_default_simulations\r\n\r\n    al = load_default_simulations(crop='maize', simulations_object=False)\r\n    modelm = al\r\n\r\n    # model = load_default_simulations('maize')\r\n    model = CoreModel(al)\r\n\r\n    for N in [3, 300]:\r\n        # for rn in ['Maize, Soybean, Wheat', 'Maize', 'Soybean, Wheat']:\r\n        a = perf_counter()\r\n        # model.RevertCheckpoint()\r\n        model.update_mgt(management=({\"Name\": 'Sow using a variable rule', 'Population': N},))\r\n        # model.replace_soil_properties_by_path(path='None.Soil.Organic.None.None.Carbon', param_values=[N])\r\n        # model.replace_any_soil_physical(parameter='BD', param_values=[1.23],)\r\n        # model.save_edited_file(reload=True)\r\n        model.run('Report', verbose=True)\r\n        df = model.results\r\n        ui = model.extract_user_input('Sow using a variable rule')\r\n        print(ui)\r\n        print()\r\n        print(df['Maize.Total.Wt'].mean())\r\n        print(df.describe())\r\n        # logger.info(model.results.mean(numeric_only=True))\r\n        b = perf_counter()\r\n        logger.info(f\"{b - a}, 'seconds\")\r\n\r\n        a = perf_counter()\r\n    model.clean_up(db=True)\r\n    import doctest\r\n\r\n    # doctest.testmod()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/core.py b/core/core.py
--- a/core/core.py	(revision da97b25564b5f96f4af53b366348a1abb72de23c)
+++ b/core/core.py	(date 1744327307364)
@@ -1416,7 +1416,8 @@
         """
         import Models
         if isinstance(model_type, str):
-            attr_model = model_type.strip("Models.")
+            l_model = len('Models.')
+            attr_model = model_type[l_model:]
             # for security purpose we have to evaluate the string
             if "_" in model_type or not getattr(Models, attr_model, None):
                 raise ValueError(f"Invalid model name: {model_type}")
Index: cli/model_desc.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from apsimNGpy.core.core import Models\r\nmodel_lists = []\r\nfrom apsimNGpy.core.base_data import load_default_simulations\r\nmodel = load_default_simulations(crop = 'maize')\r\ndef extract_models(model_namespace=None):\r\n    \"\"\"recursively extracts model types from Models namespace\"\"\"\r\n    if model_namespace is None:\r\n        model_namespace = Models\r\n    if not hasattr(model_namespace, \"__dict__\"):\r\n        return None  # Base case: Not a valid namespace\r\n    for attr, value in model_namespace.__dict__.items():\r\n\r\n        if isinstance(value, type(getattr(Models, \"Clock\", object))):\r\n            if not attr.startswith(\"__\"):\r\n                mod = f\"{value.__module__}.{value.__name__}\"\r\n                model_lists.append(mod)\r\n            continue\r\n\r\n        if hasattr(value, \"__dict__\"):  # Recursively search nested namespaces\r\n            result = extract_models(value)\r\n            continue\r\n    model_lists.sort()\r\n    return model_lists  # Model not found\r\n\r\nif __name__ == \"__main__\":\r\n    print(extract_models())\r\n    from collections import defaultdict\r\n    model.add_crop_replacements(\"Maize\")\r\n    model.create_experiment()\r\n    # Your flat list of paths\r\n    paths = model.inspect_model(Models.Core.Model)\r\n    def filter_out():\r\n        import Models\r\n        data = []\r\n        nd = ['Models.Core.Simulation', 'Models.Soils.Soil', 'Models.PMF.Plant', 'Models.Manager',\r\n              'Models.Climate.Weather', 'Models.Report', 'Models.Clock', 'Models.Core.Folder', 'Models.Soils.Solute',\r\n              'Models.Soils.Swim3','Models.Soils.SoilCrop', 'Models.Soils.Water','Models.Summary', 'Models.Core.Zone',\r\n              'Models.Soils.CERESSoilTemperature','Models.Series','Models.Factorial.Experiment', 'Models.Factorial.Permutation',\r\n              'Models.Factorial.Factors',\r\n              'Models.Sobol','Models.Operations', 'Models.Morris', 'Models.Fertiliser','Models.Core.Events','Models.Core.VariableComposite',\r\n              'Models.Soils.Physical', 'Models.Soils.Chemical', 'Models.Soils.Organic']\r\n        for i in nd:\r\n\r\n            ans =model.inspect_model(eval(i))\r\n            if not 'Replacements' in ans and 'Folder' in i:\r\n                continue\r\n            data.extend(ans)\r\n        return data\r\n    paths = filter_out()\r\n    # Build a nested tree structure\r\n    def build_tree(paths):\r\n        tree = lambda: defaultdict(tree)\r\n        root = tree()\r\n        for path in paths:\r\n            parts = path.strip('.').split('.')\r\n            current = root\r\n            for part in parts:\r\n                current = current[part]\r\n        return root\r\n\r\n\r\n    # Recursively print the tree\r\n    def print_tree(node, indent=0, full_path=\"\"):\r\n        for key in sorted(node.keys()):\r\n            current_path = f\"{full_path}.{key}\" if full_path else key\r\n            print(\"    \" * indent + f\"- {key}: .{current_path}\")\r\n            print_tree(node[key], indent + 1, current_path)\r\n\r\n\r\n    # Build and print\r\n    tree = build_tree(paths)\r\n    print_tree(tree)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cli/model_desc.py b/cli/model_desc.py
--- a/cli/model_desc.py	(revision da97b25564b5f96f4af53b366348a1abb72de23c)
+++ b/cli/model_desc.py	(date 1744328228427)
@@ -2,25 +2,55 @@
 model_lists = []
 from apsimNGpy.core.base_data import load_default_simulations
 model = load_default_simulations(crop = 'maize')
-def extract_models(model_namespace=None):
-    """recursively extracts model types from Models namespace"""
+
+
+import types
+
+def extract_models(model_namespace=None, visited=None):
+    """
+    Recursively extracts all model class names from a given namespace,
+    diving into all attributes including nested objects, modules, and classes.
+    """
     if model_namespace is None:
         model_namespace = Models
-    if not hasattr(model_namespace, "__dict__"):
-        return None  # Base case: Not a valid namespace
-    for attr, value in model_namespace.__dict__.items():
+
+    if visited is None:
+        visited = set()
 
-        if isinstance(value, type(getattr(Models, "Clock", object))):
-            if not attr.startswith("__"):
-                mod = f"{value.__module__}.{value.__name__}"
-                model_lists.append(mod)
+    models_found = []
+
+    # Avoid processing the same object multiple times (handle circular refs)
+    if id(model_namespace) in visited:
+        return []
+
+    visited.add(id(model_namespace))
+
+    # Try to iterate through all attributes of the object
+    try:
+        attr_names = dir(model_namespace)
+    except Exception:
+        return []
+
+    for attr_name in attr_names:
+        if attr_name.startswith("__"):
             continue
 
-        if hasattr(value, "__dict__"):  # Recursively search nested namespaces
-            result = extract_models(value)
-            continue
-    model_lists.sort()
-    return model_lists  # Model not found
+        try:
+            attr_value = getattr(model_namespace, attr_name)
+        except Exception:
+            continue  # Safely skip inaccessible attributes
+
+        # If it's a class, store its full path
+        if isinstance(attr_value, type):
+            model_path = f"{attr_value.__module__}.{attr_value.__name__}"
+            models_found.append(model_path)
+
+        # If it's a module, class, or object with attributes — go deeper
+        elif isinstance(attr_value, (types.ModuleType, object)) and not isinstance(attr_value, (int, float, str, list, dict, set, tuple)):
+            models_found.extend(extract_models(attr_value, visited))
+
+    return sorted(set(models_found))
+
 
 if __name__ == "__main__":
     print(extract_models())
Index: cli/cli.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import argparse\r\nimport json\r\nimport os.path\r\nimport logging\r\nimport pprint\r\n\r\nimport time\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom apsimNGpy.core_utils.utils import timer\r\nfrom apsimNGpy.core.apsim import ApsimModel, Models\r\nfrom apsimNGpy.core.base_data import load_default_simulations\r\nfrom apsimNGpy.settings import logger\r\nfrom apsimNGpy.manager.weathermanager import get_weather, _is_within_USA_mainland\r\nfrom apsimNGpy.cli.model_desc import extract_models\r\nimport os\r\nimport asyncio\r\n\r\n\r\nasync def fetch_weather_data(lonlat):\r\n    \"\"\"Fetch weather data asynchronously.\"\"\"\r\n    if _is_within_USA_mainland(lonlat):\r\n        source = 'daymet'\r\n    else:\r\n        source = 'nasa'\r\n    return await asyncio.to_thread(get_weather, lonlat=lonlat, source=source, start=1985, end=2020)\r\n\r\n\r\ndef fetch_soil_data(lonlat):\r\n    \"\"\"\r\n    Fetch soil data asynchronously\r\n    @param lonlat:\r\n    @return:\r\n    \"\"\"\r\n    pass\r\n\r\n\r\nasync def run_apsim_model(model, report_name):\r\n    \"\"\"Run APSIM model asynchronously.\"\"\"\r\n    # model.run(report_name)\r\n    return await asyncio.to_thread(model.run, report_name=report_name)\r\n    # return await asyncio.to_thread(model,)\r\n\r\n\r\nasync def save_results(df, file_name):\r\n    \"\"\"Save results asynchronously.\"\"\"\r\n    await asyncio.to_thread(df.to_csv, file_name)\r\n\r\n\r\ndef clean(path):\r\n    \"\"\"Remove the apsim related files such as the .db files\r\n    \"\"\"\r\n\r\n\r\ndef replace_soil_data(model: ApsimModel, args):\r\n    \"\"\"Replace soil data\"\"\"\r\n    s_nodes = ['chemical', 'physical', 'organic']\r\n    for node in s_nodes:\r\n        if getattr(args, node, None):\r\n            valS = getattr(args, node)\r\n            soil = valS.split(',')\r\n            soil_eq = [soi.split('=') for soi in soil]\r\n            _args_params = {k[0].strip(): k[1].strip() for k in\r\n                            soil_eq}  # assumes that the second index 1 will be the value if we hand\r\n            # \"node_path='.Simulations.Simulation.Field.Soil.Physical, BD=1.23\"\r\n\r\n            for k, v in _args_params.items():\r\n                if k != 'node_path':\r\n                    _args_params[k] = eval(v)  # expect all other values not to be a string\r\n                else:\r\n                    nl = len(node)\r\n                    if v[-nl:] != node.capitalize():\r\n                        _args_params[k] = f\"{v}.{node.capitalize()}\"\r\n\r\n            model.replace_soils_values_by_path(**_args_params)\r\n\r\n\r\nasync def main():\r\n    # Create argument parser\r\n    parser = argparse.ArgumentParser(description='Run a simulation of a given crop.')\r\n\r\n    # Add arguments\r\n    parser.add_argument('-m', '--model', type=str, required=False,\r\n                        help='Path  or name of the APSIM model file if path it should ends with .apsimx'\r\n                             'defaults to maize from the default '\r\n                             'simulations ', default='Maize')\r\n    parser.add_argument('-o', '--out', type=str, required=False, help='Out path for apsim file')\r\n    parser.add_argument('-t', '--table', type=str, required=False, default='Report', help='Report table name. '\r\n                                                                                          'Defaults to \"Report\"')\r\n    parser.add_argument('-w', '--met_file', type=str, required=False, help=\"Path to the weather data file.\")\r\n    parser.add_argument('-i', '--inspect',choices=['file', *extract_models()], type=str, required=False, help=f\"inspect your model to get the model paths.\")\r\n    parser.add_argument('-sim', '--simulation', type=str, required=False, help='Name of the APSIM simulation to run')\r\n    parser.add_argument('-ws', '--wd', type=str, required=False, help='Working directory')\r\n    parser.add_argument('-l', '--lonlat', type=str, required=False, help='longitude and Latitude (comma-separated) '\r\n                                                                         'for fetching weather data.')\r\n    parser.add_argument('-sf', '--save', type=str, required=False, help='File name for saving output data.')\r\n    parser.add_argument('-s', '--aggfunc', type=str, required=False, default='mean',\r\n                        help='Statistical summary function (e.g., mean, median). Defaults to \"mean\".')\r\n    parser.add_argument('-og', '--organic', type=str,\r\n                        required=False,\r\n                        help=\"Replace any soil data through a soil organic parameters and path specification\"\r\n                             \" e.g, 'node_path=.Simulations.Simulation.Field.Soil, Carbon=[2.2]'\")\r\n    parser.add_argument('-ph', '--physical', type=str,\r\n                        required=False,\r\n                        help=\"Replace any soil data through a soil physical parameters and path specification\"\r\n                             \" e.g, 'node_path=.Simulations.Simulation.Field.Soil, BD=[1.2]'\")\r\n    parser.add_argument('-ch', '--chemical', type=str,\r\n                        required=False,\r\n                        help=\"Replace any soil data through a soil chemical parameters and path specification\"\r\n                             \" e.g, 'node_path=.Simulations.Simulation.Field.Soil, NH4=[2.2]'\")\r\n\r\n    # Parse arguments\r\n    args = parser.parse_args()\r\n    logger.info(f\"Commands summary: '{args}'\")\r\n\r\n    wd = args.wd or os.getcwd()\r\n    os.makedirs(wd, exist_ok=True)\r\n\r\n    met_form_loc = None\r\n    if args.lonlat:\r\n        lonlat_tuple = tuple(map(float, args.lonlat.split(',')))\r\n        met_form_loc = await fetch_weather_data(lonlat_tuple)\r\n\r\n    file_name = args.save or f\"out_{args.model.strip('.apsimx')}.csv\"\r\n\r\n    if args.model.endswith('.apsimx'):\r\n        model = ApsimModel(args.model, args.out)\r\n    else:\r\n        model = load_default_simulations(crop=args.model, simulations_object=True, set_wd=wd)\r\n\r\n    if args.inspect:\r\n        print()\r\n        # inspect returns after excecutions\r\n        if args.inspect != 'file':\r\n            model_type = eval(args.inspect)\r\n            print(model.inspect_model(model_type=model_type))\r\n\r\n        else:\r\n            model.inspect_file()\r\n        print()\r\n        return\r\n\r\n    await asyncio.to_thread(replace_soil_data, model, args)\r\n    met_data = args.met_file or met_form_loc\r\n    if met_data:\r\n        await asyncio.to_thread(model.replace_met_file, weather_file=met_data, simulations=args.simulation)\r\n        msg = f'Successfully updated weather file with {met_data}'\r\n        if args.lonlat:\r\n            msg += f' from location: {args.lonlat}'\r\n        logger.info(msg)\r\n\r\n    # Run APSIM asynchronously\r\n    model = await run_apsim_model(model, report_name=args.table)\r\n\r\n    df = model.results\r\n\r\n    if isinstance(df, pd.DataFrame):\r\n        await save_results(df, file_name)\r\n        numeric_df = df.select_dtypes(include=np.number)\r\n        stati = getattr(numeric_df, args.aggfunc)()\r\n\r\n        logger.info(stati)\r\n\r\n\r\n@timer\r\ndef main_entry_point() -> None:\r\n    asyncio.run(main())\r\n\r\n\r\n# Run asyncio event loop\r\nif __name__ == \"__main__\":\r\n    main_entry_point()\r\n    #-m maize -sf 'm.csv' --organic \"node_path=.Simulations.Simulation.Field.Soil, Carbon=[1.2]\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cli/cli.py b/cli/cli.py
--- a/cli/cli.py	(revision da97b25564b5f96f4af53b366348a1abb72de23c)
+++ b/cli/cli.py	(date 1744347939410)
@@ -79,21 +79,24 @@
     # Create argument parser
     parser = argparse.ArgumentParser(description='Run a simulation of a given crop.')
 
+
     # Add arguments
     parser.add_argument('-m', '--model', type=str, required=False,
                         help='Path  or name of the APSIM model file if path it should ends with .apsimx'
                              'defaults to maize from the default '
                              'simulations ', default='Maize')
     parser.add_argument('-o', '--out', type=str, required=False, help='Out path for apsim file')
+    parser.add_argument('-p', '--preview', type=str, required=False, choices=('yes', 'no'), default='no', help='Preview or start model in GUI')
+    parser.add_argument('-sv', '--save', type=str, required=False, help='Out path for apsim file to save after making changes')
     parser.add_argument('-t', '--table', type=str, required=False, default='Report', help='Report table name. '
                                                                                           'Defaults to "Report"')
     parser.add_argument('-w', '--met_file', type=str, required=False, help="Path to the weather data file.")
-    parser.add_argument('-i', '--inspect',choices=['file', *extract_models()], type=str, required=False, help=f"inspect your model to get the model paths.")
+    parser.add_argument('-i', '--inspect', type=str, required=False, help=f"inspect your model to get the model paths.")
     parser.add_argument('-sim', '--simulation', type=str, required=False, help='Name of the APSIM simulation to run')
     parser.add_argument('-ws', '--wd', type=str, required=False, help='Working directory')
     parser.add_argument('-l', '--lonlat', type=str, required=False, help='longitude and Latitude (comma-separated) '
                                                                          'for fetching weather data.')
-    parser.add_argument('-sf', '--save', type=str, required=False, help='File name for saving output data.')
+    parser.add_argument('-sm', '--save_model', type=str, required=False, help='File name for saving output data.')
     parser.add_argument('-s', '--aggfunc', type=str, required=False, default='mean',
                         help='Statistical summary function (e.g., mean, median). Defaults to "mean".')
     parser.add_argument('-og', '--organic', type=str,
@@ -109,6 +112,7 @@
                         help="Replace any soil data through a soil chemical parameters and path specification"
                              " e.g, 'node_path=.Simulations.Simulation.Field.Soil, NH4=[2.2]'")
 
+
     # Parse arguments
     args = parser.parse_args()
     logger.info(f"Commands summary: '{args}'")
@@ -132,7 +136,7 @@
         print()
         # inspect returns after excecutions
         if args.inspect != 'file':
-            model_type = eval(args.inspect)
+            model_type = args.inspect
             print(model.inspect_model(model_type=model_type))
 
         else:
@@ -160,6 +164,10 @@
         stati = getattr(numeric_df, args.aggfunc)()
 
         logger.info(stati)
+    if args.save_model:
+        model.save(args.save_model)
+    if args.preview =='yes':
+        model.preview_simulation()
 
 
 @timer
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5d471312-8496-4246-98d6-790439318160\" name=\"Changes\" comment=\"one\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/raw_docs/api.rst\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/raw_docs/api.rst\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/raw_docs/cli.rst\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/raw_docs/cli.rst\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/raw_docs/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/raw_docs/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/raw_docs/model inspection.rst\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/raw_docs/model inspection.rst\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../docs/source/api.rst\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../docs/source/api.rst\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../docs/source/cli.rst\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../docs/source/cli.rst\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../docs/source/model inspection.rst\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../docs/source/model inspection.rst\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$/..\" value=\"consolidating\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2WiN5b3xFyRgtJ6Dz641K3bmQFe\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"Python.__init__.executor\": \"Run\",\r\n    \"Python.api.executor\": \"Run\",\r\n    \"Python.apsim.executor\": \"Run\",\r\n    \"Python.base_data.executor\": \"Run\",\r\n    \"Python.cli.executor\": \"Run\",\r\n    \"Python.config.executor\": \"Run\",\r\n    \"Python.core.executor\": \"Run\",\r\n    \"Python.database_utils.executor\": \"Run\",\r\n    \"Python.glue.executor\": \"Run\",\r\n    \"Python.logger.executor\": \"Run\",\r\n    \"Python.main.executor\": \"Run\",\r\n    \"Python.met_functions.executor\": \"Run\",\r\n    \"Python.model_desc.executor\": \"Run\",\r\n    \"Python.model_loader.executor\": \"Run\",\r\n    \"Python.path_finders.executor\": \"Run\",\r\n    \"Python.problem.executor\": \"Run\",\r\n    \"Python.process.executor\": \"Run\",\r\n    \"Python.pythonet_config.executor\": \"Run\",\r\n    \"Python.replacements.executor\": \"Run\",\r\n    \"Python.runner.executor\": \"Run\",\r\n    \"Python.senstivity.executor\": \"Run\",\r\n    \"Python.settings.executor\": \"Run\",\r\n    \"Python.sobol.executor\": \"Run\",\r\n    \"Python.soilmanager.executor\": \"Run\",\r\n    \"Python.tools.executor\": \"Run\",\r\n    \"Python.utils.executor\": \"Run\",\r\n    \"Python.variable.executor\": \"Run\",\r\n    \"Python.weathermanager.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"last_opened_file_path\": \"D:/package/apsimNGpy/setup.py\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"inlay.hints\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\package\\apsimNGpy\\apsimNGpy\" />\r\n      <recent name=\"D:\\package\\apsimNGpy\\apsimNGpy\\uncertainity_box\" />\r\n      <recent name=\"D:\\package\\apsimNGpy\\apsimNGpy\\manager\" />\r\n      <recent name=\"D:\\package\\apsimNGpy\\apsimNGpy\\core\" />\r\n      <recent name=\"D:\\ACPd\\Bear creek simulations\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.main\">\r\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"apsimNGpy\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"cli\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"apsimNGpy\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/cli\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/cli/cli.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"core\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"apsimNGpy\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/core\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/core/core.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"database_utils\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"apsimNGpy\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/core_utils\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/core_utils/database_utils.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"apsimNGpy\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/raw_docs\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/raw_docs/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"model_desc\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"apsimNGpy\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/cli\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/cli/model_desc.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.main\" />\r\n        <item itemvalue=\"Python.core\" />\r\n        <item itemvalue=\"Python.model_desc\" />\r\n        <item itemvalue=\"Python.database_utils\" />\r\n        <item itemvalue=\"Python.cli\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-5a2391486177-2887949eec09-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.13763.11\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5d471312-8496-4246-98d6-790439318160\" name=\"Changes\" comment=\"\" />\r\n      <created>1697211257252</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1697211257252</updated>\r\n      <workItem from=\"1697211258299\" duration=\"15005000\" />\r\n      <workItem from=\"1697480315837\" duration=\"194000\" />\r\n      <workItem from=\"1697482862974\" duration=\"45000\" />\r\n      <workItem from=\"1697516446381\" duration=\"14296000\" />\r\n      <workItem from=\"1697834357401\" duration=\"16399000\" />\r\n      <workItem from=\"1698110693977\" duration=\"29377000\" />\r\n      <workItem from=\"1698333980373\" duration=\"351000\" />\r\n      <workItem from=\"1698334341493\" duration=\"47000\" />\r\n      <workItem from=\"1698334396528\" duration=\"269000\" />\r\n      <workItem from=\"1698334674446\" duration=\"121000\" />\r\n      <workItem from=\"1698334805835\" duration=\"80500000\" />\r\n      <workItem from=\"1699114468077\" duration=\"17234000\" />\r\n      <workItem from=\"1699376277196\" duration=\"3183000\" />\r\n      <workItem from=\"1699920029467\" duration=\"12278000\" />\r\n      <workItem from=\"1700099672215\" duration=\"11112000\" />\r\n      <workItem from=\"1700166004038\" duration=\"618000\" />\r\n      <workItem from=\"1700166633090\" duration=\"21000\" />\r\n      <workItem from=\"1700166660892\" duration=\"3022000\" />\r\n      <workItem from=\"1700169705506\" duration=\"25335000\" />\r\n      <workItem from=\"1700430731248\" duration=\"32000\" />\r\n      <workItem from=\"1700430774513\" duration=\"139000\" />\r\n      <workItem from=\"1700430929651\" duration=\"45949000\" />\r\n      <workItem from=\"1700588196539\" duration=\"17059000\" />\r\n      <workItem from=\"1700676914630\" duration=\"3673000\" />\r\n      <workItem from=\"1700684599413\" duration=\"23000\" />\r\n      <workItem from=\"1700686967594\" duration=\"35775000\" />\r\n      <workItem from=\"1701399734418\" duration=\"691000\" />\r\n      <workItem from=\"1701400473097\" duration=\"3803000\" />\r\n      <workItem from=\"1707062929299\" duration=\"101027000\" />\r\n      <workItem from=\"1707341443179\" duration=\"61000\" />\r\n      <workItem from=\"1707345282360\" duration=\"1217000\" />\r\n      <workItem from=\"1707348375933\" duration=\"8175000\" />\r\n      <workItem from=\"1707357689155\" duration=\"38000\" />\r\n      <workItem from=\"1707359248086\" duration=\"18000\" />\r\n      <workItem from=\"1708985272516\" duration=\"2022000\" />\r\n      <workItem from=\"1708995191538\" duration=\"1290000\" />\r\n      <workItem from=\"1709007916458\" duration=\"617000\" />\r\n      <workItem from=\"1709264377284\" duration=\"15136000\" />\r\n      <workItem from=\"1717802251316\" duration=\"950000\" />\r\n      <workItem from=\"1717863769093\" duration=\"34549000\" />\r\n      <workItem from=\"1718025424842\" duration=\"28927000\" />\r\n      <workItem from=\"1718216230166\" duration=\"2344000\" />\r\n      <workItem from=\"1718294896067\" duration=\"4550000\" />\r\n      <workItem from=\"1718303436151\" duration=\"613000\" />\r\n      <workItem from=\"1718309993741\" duration=\"3113000\" />\r\n      <workItem from=\"1718381786671\" duration=\"2371000\" />\r\n      <workItem from=\"1718390001089\" duration=\"4703000\" />\r\n      <workItem from=\"1718430241747\" duration=\"2039000\" />\r\n      <workItem from=\"1718628761706\" duration=\"3748000\" />\r\n      <workItem from=\"1720631099454\" duration=\"1296000\" />\r\n      <workItem from=\"1720813931098\" duration=\"4156000\" />\r\n      <workItem from=\"1720845565670\" duration=\"959000\" />\r\n      <workItem from=\"1720891138928\" duration=\"2235000\" />\r\n      <workItem from=\"1720893576690\" duration=\"820000\" />\r\n      <workItem from=\"1720894440413\" duration=\"3835000\" />\r\n      <workItem from=\"1721074083766\" duration=\"6639000\" />\r\n      <workItem from=\"1721097488731\" duration=\"6345000\" />\r\n      <workItem from=\"1721697999882\" duration=\"409000\" />\r\n      <workItem from=\"1722392396768\" duration=\"2278000\" />\r\n      <workItem from=\"1722611343474\" duration=\"1285000\" />\r\n      <workItem from=\"1723146818292\" duration=\"1124000\" />\r\n      <workItem from=\"1729088815231\" duration=\"4985000\" />\r\n      <workItem from=\"1744211997334\" duration=\"218000\" />\r\n      <workItem from=\"1744212235400\" duration=\"1476000\" />\r\n      <workItem from=\"1744218981837\" duration=\"52000\" />\r\n      <workItem from=\"1744219675851\" duration=\"17050000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00335\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721075786188</created>\r\n      <option name=\"number\" value=\"00335\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00335\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721075786188</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00336\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721075895401</created>\r\n      <option name=\"number\" value=\"00336\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00336\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721075895401</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00337\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721076570855</created>\r\n      <option name=\"number\" value=\"00337\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00337\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721076570855</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00338\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721085999301</created>\r\n      <option name=\"number\" value=\"00338\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00338\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721085999303</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00339\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721089187227</created>\r\n      <option name=\"number\" value=\"00339\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00339\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721089187227</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00340\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721094285402</created>\r\n      <option name=\"number\" value=\"00340\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00340\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721094285402</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00341\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721097547092</created>\r\n      <option name=\"number\" value=\"00341\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00341\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721097547093</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00342\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721097843071</created>\r\n      <option name=\"number\" value=\"00342\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00342\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721097843071</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00343\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721098129719</created>\r\n      <option name=\"number\" value=\"00343\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00343\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721098129719</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00344\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721098214541</created>\r\n      <option name=\"number\" value=\"00344\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00344\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721098214541</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00345\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721098314558</created>\r\n      <option name=\"number\" value=\"00345\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00345\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721098314558</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00346\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721098418409</created>\r\n      <option name=\"number\" value=\"00346\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00346\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721098418409</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00347\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721098454911</created>\r\n      <option name=\"number\" value=\"00347\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00347\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721098454911</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00348\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721098524431</created>\r\n      <option name=\"number\" value=\"00348\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00348\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721098524431</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00349\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721098634241</created>\r\n      <option name=\"number\" value=\"00349\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00349\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721098634241</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00350\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721698010932</created>\r\n      <option name=\"number\" value=\"00350\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00350\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721698010932</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00351\" summary=\"config apsim. users can set the apsim bin folder path\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721698245673</created>\r\n      <option name=\"number\" value=\"00351\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00351\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721698245675</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00352\" summary=\"import\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1722393037701</created>\r\n      <option name=\"number\" value=\"00352\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00352\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1722393037701</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00353\" summary=\"import\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1722393167769</created>\r\n      <option name=\"number\" value=\"00353\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00353\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1722393167769</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00354\" summary=\"import\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1722393179314</created>\r\n      <option name=\"number\" value=\"00354\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00354\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1722393179314</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00355\" summary=\"no circular import\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1722393553959</created>\r\n      <option name=\"number\" value=\"00355\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00355\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1722393553959</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00356\" summary=\"no circular import\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1722393588898</created>\r\n      <option name=\"number\" value=\"00356\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00356\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1722393588898</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00357\" summary=\"no circular import\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1722393689573</created>\r\n      <option name=\"number\" value=\"00357\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00357\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1722393689573</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00358\" summary=\"no circular import\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1722394519258</created>\r\n      <option name=\"number\" value=\"00358\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00358\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1722394519259</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00359\" summary=\"no circular import\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1722394579200</created>\r\n      <option name=\"number\" value=\"00359\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00359\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1722394579200</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00360\" summary=\"replacements\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1723146837783</created>\r\n      <option name=\"number\" value=\"00360\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00360\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1723146837783</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00361\" summary=\"replacements\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1723147271613</created>\r\n      <option name=\"number\" value=\"00361\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00361\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1723147271613</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00362\" summary=\"deleted\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729088887759</created>\r\n      <option name=\"number\" value=\"00362\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00362\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729088887759</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00363\" summary=\"deleted\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729089011991</created>\r\n      <option name=\"number\" value=\"00363\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00363\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729089011992</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00364\" summary=\"no import of modules calling pythonnet api\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729089063880</created>\r\n      <option name=\"number\" value=\"00364\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00364\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729089063881</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00365\" summary=\"no import of modules calling pythonnet api\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729090527445</created>\r\n      <option name=\"number\" value=\"00365\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00365\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729090527445</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00366\" summary=\"no import of modules calling pythonnet api\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729091001126</created>\r\n      <option name=\"number\" value=\"00366\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00366\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729091001126</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00367\" summary=\"no import of modules calling pythonnet api\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729102789261</created>\r\n      <option name=\"number\" value=\"00367\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00367\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729102789262</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00368\" summary=\"no import of modules calling pythonnet api\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729102889977</created>\r\n      <option name=\"number\" value=\"00368\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00368\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729102889978</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00369\" summary=\"replacements\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730064467046</created>\r\n      <option name=\"number\" value=\"00369\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00369\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730064467046</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00370\" summary=\"replacements\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730064551344</created>\r\n      <option name=\"number\" value=\"00370\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00370\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730064551344</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00371\" summary=\"replacements\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730065037142</created>\r\n      <option name=\"number\" value=\"00371\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00371\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730065037142</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00372\" summary=\"replacements\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730065151487</created>\r\n      <option name=\"number\" value=\"00372\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00372\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730065151487</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00373\" summary=\"replacements\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730065363623</created>\r\n      <option name=\"number\" value=\"00373\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00373\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730065363623</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00374\" summary=\"replacements\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730066116426</created>\r\n      <option name=\"number\" value=\"00374\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00374\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730066116426</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00375\" summary=\"one\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730113404471</created>\r\n      <option name=\"number\" value=\"00375\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00375\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730113404471</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00376\" summary=\"one\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730113496162</created>\r\n      <option name=\"number\" value=\"00376\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00376\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730113496162</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00377\" summary=\"one\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730113814757</created>\r\n      <option name=\"number\" value=\"00377\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00377\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730113814757</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00378\" summary=\"one\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730113861923</created>\r\n      <option name=\"number\" value=\"00378\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00378\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730113861923</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00379\" summary=\"one\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744220126491</created>\r\n      <option name=\"number\" value=\"00379\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00379\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744220126491</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00380\" summary=\"one\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744221475264</created>\r\n      <option name=\"number\" value=\"00380\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00380\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744221475264</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00381\" summary=\"one\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744238289182</created>\r\n      <option name=\"number\" value=\"00381\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00381\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744238289182</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00382\" summary=\"one\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744239118420</created>\r\n      <option name=\"number\" value=\"00382\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00382\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744239118420</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00383\" summary=\"one\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744241523249</created>\r\n      <option name=\"number\" value=\"00383\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00383\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744241523249</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"384\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"dev version\" />\r\n    <MESSAGE value=\"dev______version\" />\r\n    <MESSAGE value=\"data\" />\r\n    <MESSAGE value=\"core_changes\" />\r\n    <MESSAGE value=\"un\" />\r\n    <MESSAGE value=\"bacjed data changed\" />\r\n    <MESSAGE value=\"new approach\" />\r\n    <MESSAGE value=\"update readme\" />\r\n    <MESSAGE value=\"updated database functgions\" />\r\n    <MESSAGE value=\"updated database functions\" />\r\n    <MESSAGE value=\"new\" />\r\n    <MESSAGE value=\"spatial\" />\r\n    <MESSAGE value=\"simulate from a shape file\" />\r\n    <MESSAGE value=\"download soils from web\" />\r\n    <MESSAGE value=\"Added layersture for swim node\" />\r\n    <MESSAGE value=\"added met functions for downloading nasa power met\" />\r\n    <MESSAGE value=\"adjust swim DUL and SAT values\" />\r\n    <MESSAGE value=\"visual\" />\r\n    <MESSAGE value=\"config apsim. users can set the apsim bin folder path\" />\r\n    <MESSAGE value=\"import\" />\r\n    <MESSAGE value=\"no circular import\" />\r\n    <MESSAGE value=\"deleted\" />\r\n    <MESSAGE value=\"no import of modules calling pythonnet api\" />\r\n    <MESSAGE value=\"replacements\" />\r\n    <MESSAGE value=\"one\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"one\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/model/__init__.py</url>\r\n          <line>3</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/simulations/simulation.py</url>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/core/api.py</url>\r\n          <line>6</line>\r\n          <option name=\"timeStamp\" value=\"3\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/apsimNGpy$Docutils_Task_in_README_rst.coverage\" NAME=\"Docutils Task in README.rst Coverage Results\" MODIFIED=\"1698442605826\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/..\" />\r\n    <SUITE FILE_PATH=\"coverage/apsimNGpy$Doctests_in_spatial.coverage\" NAME=\"Doctests in spatial Coverage Results\" MODIFIED=\"1707163424405\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/utililies\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision da97b25564b5f96f4af53b366348a1abb72de23c)
+++ b/.idea/workspace.xml	(date 1744347986456)
@@ -5,14 +5,9 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="5d471312-8496-4246-98d6-790439318160" name="Changes" comment="one">
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/raw_docs/api.rst" beforeDir="false" afterPath="$PROJECT_DIR$/raw_docs/api.rst" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/raw_docs/cli.rst" beforeDir="false" afterPath="$PROJECT_DIR$/raw_docs/cli.rst" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/raw_docs/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/raw_docs/main.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/raw_docs/model inspection.rst" beforeDir="false" afterPath="$PROJECT_DIR$/raw_docs/model inspection.rst" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../docs/source/api.rst" beforeDir="false" afterPath="$PROJECT_DIR$/../docs/source/api.rst" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../docs/source/cli.rst" beforeDir="false" afterPath="$PROJECT_DIR$/../docs/source/cli.rst" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../docs/source/model inspection.rst" beforeDir="false" afterPath="$PROJECT_DIR$/../docs/source/model inspection.rst" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cli/cli.py" beforeDir="false" afterPath="$PROJECT_DIR$/cli/cli.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cli/model_desc.py" beforeDir="false" afterPath="$PROJECT_DIR$/cli/model_desc.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/core.py" beforeDir="false" afterPath="$PROJECT_DIR$/core/core.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -100,7 +95,7 @@
       <recent name="D:\ACPd\Bear creek simulations" />
     </key>
   </component>
-  <component name="RunManager" selected="Python.main">
+  <component name="RunManager" selected="Python.model_desc">
     <configuration default="true" type="PythonConfigurationType" factoryName="Python">
       <module name="apsimNGpy" />
       <option name="ENV_FILES" value="" />
@@ -226,10 +221,10 @@
     </configuration>
     <recent_temporary>
       <list>
-        <item itemvalue="Python.main" />
+        <item itemvalue="Python.model_desc" />
         <item itemvalue="Python.core" />
-        <item itemvalue="Python.model_desc" />
         <item itemvalue="Python.database_utils" />
+        <item itemvalue="Python.main" />
         <item itemvalue="Python.cli" />
       </list>
     </recent_temporary>
@@ -314,15 +309,7 @@
       <workItem from="1744211997334" duration="218000" />
       <workItem from="1744212235400" duration="1476000" />
       <workItem from="1744218981837" duration="52000" />
-      <workItem from="1744219675851" duration="17050000" />
-    </task>
-    <task id="LOCAL-00335" summary="config apsim. users can set the apsim bin folder path">
-      <option name="closed" value="true" />
-      <created>1721075786188</created>
-      <option name="number" value="00335" />
-      <option name="presentableId" value="LOCAL-00335" />
-      <option name="project" value="LOCAL" />
-      <updated>1721075786188</updated>
+      <workItem from="1744219675851" duration="22303000" />
     </task>
     <task id="LOCAL-00336" summary="config apsim. users can set the apsim bin folder path">
       <option name="closed" value="true" />
@@ -708,7 +695,15 @@
       <option name="project" value="LOCAL" />
       <updated>1744241523249</updated>
     </task>
-    <option name="localTasksCounter" value="384" />
+    <task id="LOCAL-00384" summary="one">
+      <option name="closed" value="true" />
+      <created>1744326795033</created>
+      <option name="number" value="00384" />
+      <option name="presentableId" value="LOCAL-00384" />
+      <option name="project" value="LOCAL" />
+      <updated>1744326795033</updated>
+    </task>
+    <option name="localTasksCounter" value="385" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
