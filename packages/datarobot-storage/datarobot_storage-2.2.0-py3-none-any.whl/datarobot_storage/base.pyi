import abc
import io
from _typeshed import Incomplete
from datarobot_storage.put_generator import PutGenerator as PutGenerator
from datarobot_storage.utils import safe_make_dir as safe_make_dir, try_file_remove as try_file_remove
from typing import Any, Iterable, TypeVar

logger: Incomplete

class StorageGenerator:
    def __init__(self, generator_factory: Incomplete | None = None) -> None: ...
    @property
    def file_exists(self): ...
    def push_decorator(self, decorator) -> None: ...
    def __iter__(self): ...

class SeekableKeyInterface(abc.ABC, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def get_range(self, offset: int, size: int) -> bytes: ...
    @property
    @abc.abstractmethod
    def size(self) -> int: ...

class SeekableStorage(io.RawIOBase):
    def __init__(self, key: SeekableKeyInterface) -> None: ...
    def size(self) -> int: ...
    def tell(self) -> int: ...
    def seek(self, offset: int, whence: int = ...) -> int: ...
    def seekable(self) -> bool: ...
    def read(self, size: int = -1) -> bytes: ...
    def readable(self) -> bool: ...

class Storage(abc.ABC, metaclass=abc.ABCMeta):
    CHUNK_SIZE: int
    local_data_directory: str
    prefix: str
    def __init__(self, *args, prefix: str = '', local_data_directory: str = '', **kwargs) -> None: ...
    @property
    @abc.abstractmethod
    def client(self) -> Any: ...
    @abc.abstractmethod
    def exists(self, name: str) -> bool: ...
    def exists_and_readable(self, name: str) -> bool: ...
    @abc.abstractmethod
    def list(self, path: str, recursive: bool = False) -> list[str]: ...
    @abc.abstractmethod
    def get(self, name: str, temp_filename: str) -> bool: ...
    @abc.abstractmethod
    def get_seekable(self, name: str) -> SeekableStorage: ...
    @abc.abstractmethod
    def get_generator(self, name: str, **kwargs) -> StorageGenerator: ...
    @abc.abstractmethod
    def put(self, name: str, source: str) -> bool: ...
    def put_generator(self, name: str, source: PutGenerator) -> bool: ...
    @abc.abstractmethod
    def copy(self, name: str, new_name: str) -> bool: ...
    def move(self, name: str, local_filename: str) -> bool: ...
    @abc.abstractmethod
    def delete(self, name: str) -> bool: ...
    def delete_batch(self, name_iter: Iterable, batch_size: int | None = None) -> None: ...
    @abc.abstractmethod
    def delete_all(self, name: str) -> None: ...
    @abc.abstractmethod
    def url(self, name: str, expires_in: int | None = None) -> str | None: ...
    @abc.abstractmethod
    def file_size(self, name: str) -> int: ...

class AsyncStorage:
    @property
    async def client(self) -> Any: ...
    async def exists(self, name: str) -> bool: ...
    async def exists_and_readable(self, name: str) -> bool: ...
    async def list(self, path: str, recursive: bool = False) -> list[str]: ...
    async def get(self, name: str, temp_filename: str) -> bool: ...
    async def get_seekable(self, name: str) -> SeekableStorage: ...
    async def get_generator(self, name: str, **kwargs) -> StorageGenerator: ...
    async def put(self, name: str, source: str) -> bool: ...
    async def put_generator(self, name: str, source: PutGenerator) -> bool: ...
    async def copy(self, name: str, new_name: str) -> bool: ...
    async def move(self, name: str, local_filename: str) -> bool: ...
    async def delete(self, name: str) -> bool: ...
    async def delete_batch(self, name_iter: Iterable, batch_size: int | None = None) -> None: ...
    async def delete_all(self, name: str) -> None: ...
    async def url(self, name: str, expires_in: int | None = None): ...
    async def file_size(self, name: str): ...
StorageType = TypeVar('StorageType', Storage, AsyncStorage)
