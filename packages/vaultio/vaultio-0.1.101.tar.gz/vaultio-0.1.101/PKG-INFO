Metadata-Version: 2.3
Name: vaultio
Version: 0.1.101
Summary: Unofficial tool for stateless Bitwarden vault management
License: GPL-3.0-or-later
Author: Patrick Lenihan
Author-email: patrick@plenihan.com
Requires-Python: >=3.13
Classifier: License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: fire (>=0.7.0,<0.8.0)
Requires-Dist: nodeenv (>=1.9.1,<2.0.0)
Requires-Dist: psutil (>=7.0.0,<8.0.0)
Requires-Dist: rich (>=14.0.0,<15.0.0)
Description-Content-Type: text/markdown

# Python API for Bitwarden Vault Management

## Overview

**`pybw`** is an **unofficial Python API** for managing Bitwarden vaults via the Bitwarden CLI. Instead of launching a new CLI process for each operation, it runs the CLI once in the background and communicates with it through a **private socket connection**. This improves performance and provides a secure method for using the [serve API](https://bitwarden.com/help/vault-management-api/).

## How It Works

The API is built around the stateful Express web server launched by the [`bw serve`](https://bitwarden.com/help/cli/#serve) command. This server exposes a local REST API for performing vault actions. `pybw` wraps this API internally and delegates all actions to the Bitwarden CLI.

> **Note:** `pybw` does **not cache or store credentials**. All requests are proxied directly to the background process.

---

## Installation

### üîß Basic Setup

```sh
cd python
python -m venv .venv
source .venv/bin/activate
pip install poetry
poetry install
```

---

## Installing the Bitwarden CLI

### Option 1: Official CLI

By default, `bw serve` exposes its API via **HTTP over TCP**, which can be less secure since other users or apps might access the unlocked vault without proper firewall rules.

You can either:
- Ensure `bw` is available in your `PATH`, or
- Run:

```sh
pybw build
```

This installs the CLI from the official NPM package [`@bitwarden/cli`](https://www.npmjs.com/package/@bitwarden/cli).

### Option 2: Unofficial Fork with Socket Support

A [pull request](https://github.com/bitwarden/clients/pull/14262) introduces support for **Unix sockets** and other socket types in `bw serve`. This allows communication without traversing the network stack, improving security.

To enable this:
- **Manually build** from the fork: [Game4Move78/clients](https://github.com/Game4Move78/clients/tree/feat/unix-socket-support) and copy the binary to:

```sh
$HOME/.cache/pybw/bin/bw
```

- **Or**, let `pybw` handle it for you:

```sh
pybw --unofficial
```

This will clone the repo and build it locally. (No pre-built binaries are currently provided.)

---

## Usage

### üìò API Documentation

See the full [API reference](https://github.com/Game4Move78/pybw/blob/master/API.md).

### üìü CLI Wrapper

```sh
pybw --help
```

### üß™ Example: Check Status and List Items

```python
from pybw.client import Client

with Client() as client:
    print(client.status())
    print(client.unlock())
    print(client.status())

    for item in client.list():
        print(item["name"])

    for folder in client.list(type="folder"):
        print(folder["name"])
```

### üîç More Examples

- [Creating a CLI](https://github.com/Game4Move78/pybw/blob/master/python/src/pybw/cli.py)
- [Creating a shell](https://github.com/Game4Move78/pybw/blob/master/python/src/pybw/examples/shell.py)
- [Backing up vault to Unix pass](https://github.com/Game4Move78/pybw/blob/master/python/src/pybw/examples/backup.py)

---

## üîê HTTPS Support

Not currently supported directly, but it's possible using [Caddy](https://github.com/Game4Move78/bw-serve-encrypted).

