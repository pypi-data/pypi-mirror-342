Metadata-Version: 2.4
Name: codex-cli-studio
Version: 0.1.2
Summary: AI-powered CLI tools (explain, script, visualize, config) using OpenAI models.
Author: Michael Shapkin
License: Copyright 2025 Michael Shapkin
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        
        
Project-URL: Homepage, https://github.com/michaelshapkin/codex-cli-studio
Project-URL: Repository, https://github.com/michaelshapkin/codex-cli-studio
Keywords: cli,ai,openai,codex,gpt,developer-tools,automation,visualization
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Utilities
Classifier: Environment :: Console
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typer[all]<1.0.0,>=0.12.3
Requires-Dist: openai<2.0.0,>=1.30.1
Requires-Dist: python-dotenv<2.0.0,>=1.0.1
Requires-Dist: graphviz<1.0.0,>=0.20.1
Dynamic: license-file

# üß∞ Codex CLI Studio

[![PyPI version](https://badge.fury.io/py/codex-cli-studio.svg)](https://badge.fury.io/py/codex-cli-studio)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

> A powerful suite of command-line tools powered by OpenAI models, built to supercharge productivity, learning, and automation for developers, DevOps, and students alike.

---

## üëÄ Demo

See `Codex CLI Studio` in action! This animation shows basic usage of the `explain`, `script`, and `visualize` commands.

![Codex CLI Studio Demo](codex-cli-studio-demo.svg)
*(Generated using asciinema and termtosvg)*

---

## üöÄ Overview & Status
Codex CLI Studio is a modular set of CLI tools leveraging OpenAI's API.

**Current Modules (v0.1.0):**

*   ‚úÖ `explain`: Explain code, shell commands, or file content. 
*   ‚úÖ `script`: Generate scripts (Bash, Python, PowerShell) from natural language. 
*   ‚úÖ `visualize`: Generate function call graphs for Python files (DOT/Image output).
*   ‚úÖ `config explain`: Explain configuration files. 
*   üõ†Ô∏è `config edit`: Modify configuration files *(Planned)*.

---

## üîå Installation

**Prerequisites:**
*   Python 3.9+
*   `pip`
*   [Graphviz](https://graphviz.org/download/) (specifically the `dot` command) - *Required only for rendering visualizations to image formats (png, svg, etc.) using the `visualize` command.*
*   An OpenAI API Key.

**Install using pip:**

```bash
pip install codex-cli-studio
```

**Set up your OpenAI API Key:**
The tool reads the API key from the OPENAI_API_KEY environment variable. 

You can set it:
* System-wide: Add export OPENAI_API_KEY='your_key_here' to your shell profile (.zshrc, .bashrc, etc.).
* Per session: Run export OPENAI_API_KEY='your_key_here' in your terminal before using cstudio.
* Using a .env file: Create a .env file in the directory where you run the cstudio command and add the line OPENAI_API_KEY='your_key_here'.

---

## ‚ú® Usage
After installation, use the `cstudio` command:

```bash
# General help
cstudio --help

# Explain a code snippet
cstudio explain 'import sys; print(sys.argv[1])' --lang en

# Explain a file in detail
cstudio explain path/to/your/code.py --detail detailed

# Generate a Python script
cstudio script "read lines from data.txt and print them numbered" -t python

# Generate a bash script (dry run only)
cstudio script "delete all *.tmp files in /tmp" --dry-run

# Visualize a Python file, saving as PNG
cstudio visualize path/to/visualize.py -f png -o visualize_graph.png

# Explain a YAML config file
cstudio config explain path/to/config.yaml
```

---

## üõ†Ô∏è Module Details

### `explain` ‚úÖ
Explains code snippets, shell commands, or file content.
*   Supports various languages (auto-detected by AI).
*   Options: `--detail basic|detailed`, `--lang <language_code>`.

### `script` ‚úÖ
Generates executable scripts from natural language tasks.
*   Supports: Bash, Python, PowerShell.
*   Options: `--type <bash|python|powershell>`, `--dry-run` (only displays script).

### `visualize` ‚úÖ
Generates function call graphs for Python files.
*   Input: Python file (`.py`).
*   Output: Graphviz DOT (`.gv`, `.dot`) or rendered image (`.png`, `.svg`, `.pdf`, etc.).
*   Requires Graphviz (`dot` command) for image rendering.
*   Options: `--output <path>`, `--format <format>`.

### `config explain` ‚úÖ
Explains various configuration files (YAML, INI, Dockerfile, etc.).
*   Input: Path to configuration file.

### `config edit` üõ†Ô∏è *(Planned)*
Modify configuration files using natural language instructions.

---

## üåç Why It Matters
*   ‚úÖ **Educational:** Quickly understand unfamiliar code, commands, or configs.
*   ‚ö° **Productive:** Automate script generation and explanations, reducing boilerplate and search time.
*   üîß **Extensible:** Modular design allows for adding new commands and capabilities.
*   üå± **Open Source:** Community contributions are welcome!

---

## üì¶ Built With
*   Python 3.9+
*   OpenAI API (gpt-4o or other models)
*   [Typer](https://typer.tiangolo.com/) - for building the CLI interface.
*   [Rich](https://rich.readthedocs.io/en/latest/) - for beautiful terminal output.
*   [python-dotenv](https://pypi.org/project/python-dotenv/) - for managing environment variables.
*   [Graphviz (Python library)](https://graphviz.readthedocs.io/en/stable/) - for generating DOT graph descriptions.
*   Standard Python libraries (`ast`, `subprocess`, `shutil`, etc.)

---
## üîÆ Roadmap / Coming Soon
*   **Testing:** Increase test coverage, especially for edge cases and options.
*   **Error Handling:** Improve robustness and user feedback on errors.
*   **`config edit`:** Implement the configuration editing functionality.
*   **`visualize` Enhancements:** Options to exclude nodes (builtins), different layouts.
*   **More Modules?** `test` generation, `translate` code? (Open to ideas!)
*   **Configuration:** Centralized config file (e.g., `~/.config/codex-cli-studio/config.toml`).
*   **PyPI Release:** Package and publish for easy `pip install`.
*   **IDE Integration:** VS Code plugin?

---

## ü§ù Contributing
Contributions, issues, and feature requests are welcome! Feel free to check [issues page](https://github.com/michaelshapkin/codex-cli-studio/issues).

1.  Fork the Project
2.  Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3.  Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4.  Push to the Branch (`git push origin feature/AmazingFeature`)
5.  Open a Pull Request

---

## üìÑ License
Distributed under the MIT License. See `LICENSE` file for more information.

---

**‚Üí Apply this to real-world workflows. Use AI like magic ‚Äî right from your terminal.**
