from collections.abc import Iterator, Sequence
from typing import overload


class BidirectionalStaticEdgeColoredGraph:
    @overload
    def __init__(self, arg: StaticEdgeColoredGraph, /) -> None: ...

    @overload
    def __init__(self, arg: ImmutableStaticEdgeColoredGraph, /) -> None: ...

    def get_vertex_indices(self) -> Iterator[int]: ...

    def get_edge_indices(self) -> Iterator[int]: ...

    def get_forward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_backward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_forward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_forward_adjacent_edges(self, vertex_index: int) -> Iterator[ColoredEdge]: ...

    def get_backward_adjacent_edges(self, vertex_index: int) -> Iterator[ColoredEdge]: ...

    def get_forward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_vertices(self) -> list[ColoredVertex]: ...

    def get_vertex(self, vertex_index: int) -> ColoredVertex: ...

    def get_edges(self) -> list[ColoredEdge]: ...

    def get_edge(self, arg: int, /) -> ColoredVertex: ...

    def get_num_vertices(self) -> int: ...

    def get_num_edges(self) -> int: ...

    def get_forward_source(self, edge_index: int) -> int: ...

    def get_backward_source(self, edge_index: int) -> int: ...

    def get_forward_target(self, edge_index: int) -> int: ...

    def get_backward_target(self, edge_index: int) -> int: ...

    def get_forward_degrees(self) -> list[int]: ...

    def get_backward_degrees(self) -> list[int]: ...

    def get_forward_degree(self, vertex_index: int) -> int: ...

    def get_backward_degree(self, vertex_index: int) -> int: ...

    def compute_forward_topological_sort(self) -> list[int]: ...

    def compute_backward_topological_sort(self) -> list[int]: ...

    def compute_forward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_backward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_forward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_backward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_forward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_backward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_forward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_backward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_strong_components(self, arg0: Sequence[float], arg1: Sequence[int], /) -> tuple[int, list[int]]: ...

class BidirectionalStaticEmptyGraph:
    @overload
    def __init__(self, arg: StaticEmptyGraph, /) -> None: ...

    @overload
    def __init__(self, arg: ImmutableStaticEmptyGraph, /) -> None: ...

    def get_vertex_indices(self) -> Iterator[int]: ...

    def get_edge_indices(self) -> Iterator[int]: ...

    def get_forward_adjacent_vertices(self, vertex_index: int) -> Iterator[EmptyVertex]: ...

    def get_backward_adjacent_vertices(self, vertex_index: int) -> Iterator[EmptyVertex]: ...

    def get_forward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_forward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_backward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_forward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_vertices(self) -> list[EmptyVertex]: ...

    def get_vertex(self, vertex_index: int) -> EmptyVertex: ...

    def get_edges(self) -> list[EmptyEdge]: ...

    def get_edge(self, arg: int, /) -> EmptyVertex: ...

    def get_num_vertices(self) -> int: ...

    def get_num_edges(self) -> int: ...

    def get_forward_source(self, edge_index: int) -> int: ...

    def get_backward_source(self, edge_index: int) -> int: ...

    def get_forward_target(self, edge_index: int) -> int: ...

    def get_backward_target(self, edge_index: int) -> int: ...

    def get_forward_degrees(self) -> list[int]: ...

    def get_backward_degrees(self) -> list[int]: ...

    def get_forward_degree(self, vertex_index: int) -> int: ...

    def get_backward_degree(self, vertex_index: int) -> int: ...

    def compute_forward_topological_sort(self) -> list[int]: ...

    def compute_backward_topological_sort(self) -> list[int]: ...

    def compute_forward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_backward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_forward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_backward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_forward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_backward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_forward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_backward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_strong_components(self, arg0: Sequence[float], arg1: Sequence[int], /) -> tuple[int, list[int]]: ...

class BidirectionalStaticVertexColoredGraph:
    @overload
    def __init__(self, arg: StaticVertexColoredGraph, /) -> None: ...

    @overload
    def __init__(self, arg: ImmutableStaticVertexColoredGraph, /) -> None: ...

    def get_vertex_indices(self) -> Iterator[int]: ...

    def get_edge_indices(self) -> Iterator[int]: ...

    def get_forward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_backward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_forward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_forward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_backward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_forward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_vertices(self) -> list[ColoredVertex]: ...

    def get_vertex(self, vertex_index: int) -> ColoredVertex: ...

    def get_edges(self) -> list[EmptyEdge]: ...

    def get_edge(self, arg: int, /) -> ColoredVertex: ...

    def get_num_vertices(self) -> int: ...

    def get_num_edges(self) -> int: ...

    def get_forward_source(self, edge_index: int) -> int: ...

    def get_backward_source(self, edge_index: int) -> int: ...

    def get_forward_target(self, edge_index: int) -> int: ...

    def get_backward_target(self, edge_index: int) -> int: ...

    def get_forward_degrees(self) -> list[int]: ...

    def get_backward_degrees(self) -> list[int]: ...

    def get_forward_degree(self, vertex_index: int) -> int: ...

    def get_backward_degree(self, vertex_index: int) -> int: ...

    def compute_forward_topological_sort(self) -> list[int]: ...

    def compute_backward_topological_sort(self) -> list[int]: ...

    def compute_forward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_backward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_forward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_backward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_forward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_backward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_forward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_backward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_strong_components(self, arg0: Sequence[float], arg1: Sequence[int], /) -> tuple[int, list[int]]: ...

class ColoredEdge:
    def get_index(self) -> int: ...

    def get_source(self) -> int: ...

    def get_target(self) -> int: ...

    def get_property_0(self) -> "mimir::graphs::Color": ...

class ColoredVertex:
    def get_index(self) -> int: ...

    def get_property_0(self) -> "mimir::graphs::Color": ...

class EmptyEdge:
    def get_index(self) -> int: ...

    def get_source(self) -> int: ...

    def get_target(self) -> int: ...

class EmptyVertex:
    def get_index(self) -> int: ...

class ForwardStaticEdgeColoredGraph:
    @overload
    def __init__(self, arg: StaticEdgeColoredGraph, /) -> None: ...

    @overload
    def __init__(self, arg: ImmutableStaticEdgeColoredGraph, /) -> None: ...

    def get_vertex_indices(self) -> Iterator[int]: ...

    def get_edge_indices(self) -> Iterator[int]: ...

    def get_forward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_backward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_forward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_forward_adjacent_edges(self, vertex_index: int) -> Iterator[ColoredEdge]: ...

    def get_backward_adjacent_edges(self, vertex_index: int) -> Iterator[ColoredEdge]: ...

    def get_forward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_vertices(self) -> list[ColoredVertex]: ...

    def get_vertex(self, vertex_index: int) -> ColoredVertex: ...

    def get_edges(self) -> list[ColoredEdge]: ...

    def get_edge(self, arg: int, /) -> ColoredVertex: ...

    def get_num_vertices(self) -> int: ...

    def get_num_edges(self) -> int: ...

    def get_forward_source(self, edge_index: int) -> int: ...

    def get_backward_source(self, edge_index: int) -> int: ...

    def get_forward_target(self, edge_index: int) -> int: ...

    def get_backward_target(self, edge_index: int) -> int: ...

    def get_forward_degrees(self) -> list[int]: ...

    def get_backward_degrees(self) -> list[int]: ...

    def get_forward_degree(self, vertex_index: int) -> int: ...

    def get_backward_degree(self, vertex_index: int) -> int: ...

    def compute_forward_topological_sort(self) -> list[int]: ...

    def compute_backward_topological_sort(self) -> list[int]: ...

    def compute_forward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_backward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_forward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_backward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_forward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_backward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_forward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_backward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_strong_components(self, arg0: Sequence[float], arg1: Sequence[int], /) -> tuple[int, list[int]]: ...

class ForwardStaticEmptyGraph:
    @overload
    def __init__(self, arg: StaticEmptyGraph, /) -> None: ...

    @overload
    def __init__(self, arg: ImmutableStaticEmptyGraph, /) -> None: ...

    def get_vertex_indices(self) -> Iterator[int]: ...

    def get_edge_indices(self) -> Iterator[int]: ...

    def get_forward_adjacent_vertices(self, vertex_index: int) -> Iterator[EmptyVertex]: ...

    def get_backward_adjacent_vertices(self, vertex_index: int) -> Iterator[EmptyVertex]: ...

    def get_forward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_forward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_backward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_forward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_vertices(self) -> list[EmptyVertex]: ...

    def get_vertex(self, vertex_index: int) -> EmptyVertex: ...

    def get_edges(self) -> list[EmptyEdge]: ...

    def get_edge(self, arg: int, /) -> EmptyVertex: ...

    def get_num_vertices(self) -> int: ...

    def get_num_edges(self) -> int: ...

    def get_forward_source(self, edge_index: int) -> int: ...

    def get_backward_source(self, edge_index: int) -> int: ...

    def get_forward_target(self, edge_index: int) -> int: ...

    def get_backward_target(self, edge_index: int) -> int: ...

    def get_forward_degrees(self) -> list[int]: ...

    def get_backward_degrees(self) -> list[int]: ...

    def get_forward_degree(self, vertex_index: int) -> int: ...

    def get_backward_degree(self, vertex_index: int) -> int: ...

    def compute_forward_topological_sort(self) -> list[int]: ...

    def compute_backward_topological_sort(self) -> list[int]: ...

    def compute_forward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_backward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_forward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_backward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_forward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_backward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_forward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_backward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_strong_components(self, arg0: Sequence[float], arg1: Sequence[int], /) -> tuple[int, list[int]]: ...

class ForwardStaticVertexColoredGraph:
    @overload
    def __init__(self, arg: StaticVertexColoredGraph, /) -> None: ...

    @overload
    def __init__(self, arg: ImmutableStaticVertexColoredGraph, /) -> None: ...

    def get_vertex_indices(self) -> Iterator[int]: ...

    def get_edge_indices(self) -> Iterator[int]: ...

    def get_forward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_backward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_forward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_forward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_backward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_forward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_vertices(self) -> list[ColoredVertex]: ...

    def get_vertex(self, vertex_index: int) -> ColoredVertex: ...

    def get_edges(self) -> list[EmptyEdge]: ...

    def get_edge(self, arg: int, /) -> ColoredVertex: ...

    def get_num_vertices(self) -> int: ...

    def get_num_edges(self) -> int: ...

    def get_forward_source(self, edge_index: int) -> int: ...

    def get_backward_source(self, edge_index: int) -> int: ...

    def get_forward_target(self, edge_index: int) -> int: ...

    def get_backward_target(self, edge_index: int) -> int: ...

    def get_forward_degrees(self) -> list[int]: ...

    def get_backward_degrees(self) -> list[int]: ...

    def get_forward_degree(self, vertex_index: int) -> int: ...

    def get_backward_degree(self, vertex_index: int) -> int: ...

    def compute_forward_topological_sort(self) -> list[int]: ...

    def compute_backward_topological_sort(self) -> list[int]: ...

    def compute_forward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_backward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_forward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_backward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_forward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_backward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_forward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_backward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_strong_components(self, arg0: Sequence[float], arg1: Sequence[int], /) -> tuple[int, list[int]]: ...

class ImmutableStaticEdgeColoredGraph:
    def __init__(self, arg: StaticEdgeColoredGraph, /) -> None: ...

    def get_vertex_indices(self) -> Iterator[int]: ...

    def get_edge_indices(self) -> Iterator[int]: ...

    def get_forward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_backward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_forward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_forward_adjacent_edges(self, vertex_index: int) -> Iterator[ColoredEdge]: ...

    def get_backward_adjacent_edges(self, vertex_index: int) -> Iterator[ColoredEdge]: ...

    def get_forward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_vertices(self) -> list[ColoredVertex]: ...

    def get_vertex(self, vertex_index: int) -> ColoredVertex: ...

    def get_edges(self) -> list[ColoredEdge]: ...

    def get_edge(self, arg: int, /) -> ColoredEdge: ...

    def get_num_vertices(self) -> int: ...

    def get_num_edges(self) -> int: ...

    def get_forward_source(self, edge_index: int) -> int: ...

    def get_backward_source(self, edge_index: int) -> int: ...

    def get_forward_target(self, edge_index: int) -> int: ...

    def get_backward_target(self, edge_index: int) -> int: ...

    def get_forward_degrees(self) -> list[int]: ...

    def get_backward_degrees(self) -> list[int]: ...

    def get_forward_degree(self, vertex_index: int) -> int: ...

    def get_backward_degree(self, vertex_index: int) -> int: ...

    def compute_forward_topological_sort(self) -> list[int]: ...

    def compute_backward_topological_sort(self) -> list[int]: ...

    def compute_forward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_backward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_forward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_backward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_forward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_backward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_forward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_backward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_strong_components(self, arg0: Sequence[float], arg1: Sequence[int], /) -> tuple[int, list[int]]: ...

class ImmutableStaticEmptyGraph:
    def __init__(self, arg: StaticEmptyGraph, /) -> None: ...

    def get_vertex_indices(self) -> Iterator[int]: ...

    def get_edge_indices(self) -> Iterator[int]: ...

    def get_forward_adjacent_vertices(self, vertex_index: int) -> Iterator[EmptyVertex]: ...

    def get_backward_adjacent_vertices(self, vertex_index: int) -> Iterator[EmptyVertex]: ...

    def get_forward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_forward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_backward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_forward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_vertices(self) -> list[EmptyVertex]: ...

    def get_vertex(self, vertex_index: int) -> EmptyVertex: ...

    def get_edges(self) -> list[EmptyEdge]: ...

    def get_edge(self, arg: int, /) -> EmptyEdge: ...

    def get_num_vertices(self) -> int: ...

    def get_num_edges(self) -> int: ...

    def get_forward_source(self, edge_index: int) -> int: ...

    def get_backward_source(self, edge_index: int) -> int: ...

    def get_forward_target(self, edge_index: int) -> int: ...

    def get_backward_target(self, edge_index: int) -> int: ...

    def get_forward_degrees(self) -> list[int]: ...

    def get_backward_degrees(self) -> list[int]: ...

    def get_forward_degree(self, vertex_index: int) -> int: ...

    def get_backward_degree(self, vertex_index: int) -> int: ...

    def compute_forward_topological_sort(self) -> list[int]: ...

    def compute_backward_topological_sort(self) -> list[int]: ...

    def compute_forward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_backward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_forward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_backward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_forward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_backward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_forward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_backward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_strong_components(self, arg0: Sequence[float], arg1: Sequence[int], /) -> tuple[int, list[int]]: ...

class ImmutableStaticVertexColoredGraph:
    def __init__(self, arg: StaticVertexColoredGraph, /) -> None: ...

    def get_vertex_indices(self) -> Iterator[int]: ...

    def get_edge_indices(self) -> Iterator[int]: ...

    def get_forward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_backward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_forward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_forward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_backward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_forward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_vertices(self) -> list[ColoredVertex]: ...

    def get_vertex(self, vertex_index: int) -> ColoredVertex: ...

    def get_edges(self) -> list[EmptyEdge]: ...

    def get_edge(self, arg: int, /) -> EmptyEdge: ...

    def get_num_vertices(self) -> int: ...

    def get_num_edges(self) -> int: ...

    def get_forward_source(self, edge_index: int) -> int: ...

    def get_backward_source(self, edge_index: int) -> int: ...

    def get_forward_target(self, edge_index: int) -> int: ...

    def get_backward_target(self, edge_index: int) -> int: ...

    def get_forward_degrees(self) -> list[int]: ...

    def get_backward_degrees(self) -> list[int]: ...

    def get_forward_degree(self, vertex_index: int) -> int: ...

    def get_backward_degree(self, vertex_index: int) -> int: ...

    def compute_forward_topological_sort(self) -> list[int]: ...

    def compute_backward_topological_sort(self) -> list[int]: ...

    def compute_forward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_backward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_forward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_backward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_forward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_backward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_forward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_backward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_strong_components(self, arg0: Sequence[float], arg1: Sequence[int], /) -> tuple[int, list[int]]: ...

class StaticEdgeColoredGraph:
    def __init__(self) -> None: ...

    def clear(self) -> None: ...

    @overload
    def add_vertex(self, *args) -> int: ...

    @overload
    def add_vertex(self, arg: ColoredVertex, /) -> int: ...

    @overload
    def add_directed_edge(self, arg0: int, arg1: int, /, *args) -> int: ...

    @overload
    def add_directed_edge(self, arg0: int, arg1: int, arg2: ColoredEdge, /) -> int: ...

    def get_vertex_indices(self) -> Iterator[int]: ...

    def get_edge_indices(self) -> Iterator[int]: ...

    def get_forward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_backward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_forward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_forward_adjacent_edges(self, vertex_index: int) -> Iterator[ColoredEdge]: ...

    def get_backward_adjacent_edges(self, vertex_index: int) -> Iterator[ColoredEdge]: ...

    def get_forward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_vertices(self) -> list[ColoredVertex]: ...

    def get_vertex(self, vertex_index: int) -> ColoredVertex: ...

    def get_edges(self) -> list[ColoredEdge]: ...

    def get_edge(self, arg: int, /) -> ColoredVertex: ...

    def get_num_vertices(self) -> int: ...

    def get_num_edges(self) -> int: ...

    def get_forward_source(self, edge_index: int) -> int: ...

    def get_backward_source(self, edge_index: int) -> int: ...

    def get_forward_target(self, edge_index: int) -> int: ...

    def get_backward_target(self, edge_index: int) -> int: ...

    def get_forward_degrees(self) -> list[int]: ...

    def get_backward_degrees(self) -> list[int]: ...

    def get_forward_degree(self, vertex_index: int) -> int: ...

    def get_backward_degree(self, vertex_index: int) -> int: ...

    def compute_forward_topological_sort(self) -> list[int]: ...

    def compute_backward_topological_sort(self) -> list[int]: ...

    def compute_forward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_backward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_forward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_backward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_forward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_backward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_forward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_backward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_strong_components(self, arg0: Sequence[float], arg1: Sequence[int], /) -> tuple[int, list[int]]: ...

class StaticEmptyGraph:
    def __init__(self) -> None: ...

    def clear(self) -> None: ...

    @overload
    def add_vertex(self, *args) -> int: ...

    @overload
    def add_vertex(self, arg: EmptyVertex, /) -> int: ...

    @overload
    def add_directed_edge(self, arg0: int, arg1: int, /, *args) -> int: ...

    @overload
    def add_directed_edge(self, arg0: int, arg1: int, arg2: EmptyEdge, /) -> int: ...

    def get_vertex_indices(self) -> Iterator[int]: ...

    def get_edge_indices(self) -> Iterator[int]: ...

    def get_forward_adjacent_vertices(self, vertex_index: int) -> Iterator[EmptyVertex]: ...

    def get_backward_adjacent_vertices(self, vertex_index: int) -> Iterator[EmptyVertex]: ...

    def get_forward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_forward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_backward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_forward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_vertices(self) -> list[EmptyVertex]: ...

    def get_vertex(self, vertex_index: int) -> EmptyVertex: ...

    def get_edges(self) -> list[EmptyEdge]: ...

    def get_edge(self, arg: int, /) -> EmptyVertex: ...

    def get_num_vertices(self) -> int: ...

    def get_num_edges(self) -> int: ...

    def get_forward_source(self, edge_index: int) -> int: ...

    def get_backward_source(self, edge_index: int) -> int: ...

    def get_forward_target(self, edge_index: int) -> int: ...

    def get_backward_target(self, edge_index: int) -> int: ...

    def get_forward_degrees(self) -> list[int]: ...

    def get_backward_degrees(self) -> list[int]: ...

    def get_forward_degree(self, vertex_index: int) -> int: ...

    def get_backward_degree(self, vertex_index: int) -> int: ...

    def compute_forward_topological_sort(self) -> list[int]: ...

    def compute_backward_topological_sort(self) -> list[int]: ...

    def compute_forward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_backward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_forward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_backward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_forward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_backward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_forward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_backward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_strong_components(self, arg0: Sequence[float], arg1: Sequence[int], /) -> tuple[int, list[int]]: ...

class StaticVertexColoredGraph:
    def __init__(self) -> None: ...

    def clear(self) -> None: ...

    @overload
    def add_vertex(self, *args) -> int: ...

    @overload
    def add_vertex(self, arg: ColoredVertex, /) -> int: ...

    @overload
    def add_directed_edge(self, arg0: int, arg1: int, /, *args) -> int: ...

    @overload
    def add_directed_edge(self, arg0: int, arg1: int, arg2: EmptyEdge, /) -> int: ...

    def get_vertex_indices(self) -> Iterator[int]: ...

    def get_edge_indices(self) -> Iterator[int]: ...

    def get_forward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_backward_adjacent_vertices(self, vertex_index: int) -> Iterator[ColoredVertex]: ...

    def get_forward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_vertex_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_forward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_backward_adjacent_edges(self, vertex_index: int) -> Iterator[EmptyEdge]: ...

    def get_forward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_backward_adjacent_edge_indices(self, vertex_index: int) -> Iterator[int]: ...

    def get_vertices(self) -> list[ColoredVertex]: ...

    def get_vertex(self, vertex_index: int) -> ColoredVertex: ...

    def get_edges(self) -> list[EmptyEdge]: ...

    def get_edge(self, arg: int, /) -> ColoredVertex: ...

    def get_num_vertices(self) -> int: ...

    def get_num_edges(self) -> int: ...

    def get_forward_source(self, edge_index: int) -> int: ...

    def get_backward_source(self, edge_index: int) -> int: ...

    def get_forward_target(self, edge_index: int) -> int: ...

    def get_backward_target(self, edge_index: int) -> int: ...

    def get_forward_degrees(self) -> list[int]: ...

    def get_backward_degrees(self) -> list[int]: ...

    def get_forward_degree(self, vertex_index: int) -> int: ...

    def get_backward_degree(self, vertex_index: int) -> int: ...

    def compute_forward_topological_sort(self) -> list[int]: ...

    def compute_backward_topological_sort(self) -> list[int]: ...

    def compute_forward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_backward_floyd_warshall_all_pairs_shortest_paths(self, arg: Sequence[float], /) -> list[list[float]]: ...

    def compute_forward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_backward_breadth_first_search(self, arg: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<int, std::allocator<int> > >": ...

    def compute_forward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_backward_depth_first_search(self, arg: Sequence[int], /) -> list[int]: ...

    def compute_forward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_backward_dijkstra_shortest_paths(self, arg0: Sequence[float], arg1: Sequence[int], /) -> "std::tuple<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<double, std::allocator<double> > >": ...

    def compute_strong_components(self, arg0: Sequence[float], arg1: Sequence[int], /) -> tuple[int, list[int]]: ...
