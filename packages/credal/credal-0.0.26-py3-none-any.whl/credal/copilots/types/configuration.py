# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .ai_endpoint_configuration import AiEndpointConfiguration
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class Configuration(UniversalBaseModel):
    ai_endpoint_configuration: typing_extensions.Annotated[
        typing.Optional[AiEndpointConfiguration], FieldMetadata(alias="aiEndpointConfiguration")
    ] = None
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    prompt: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
