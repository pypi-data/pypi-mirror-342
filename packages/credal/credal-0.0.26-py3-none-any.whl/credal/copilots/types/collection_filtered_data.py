# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import uuid
from ...core.serialization import FieldMetadata
import typing
from .filter import Filter
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class CollectionFilteredData(UniversalBaseModel):
    collection_id: typing_extensions.Annotated[uuid.UUID, FieldMetadata(alias="collectionId")]
    filtered_data_ids: typing_extensions.Annotated[typing.List[uuid.UUID], FieldMetadata(alias="filteredDataIds")]
    filters: typing.List[Filter]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
