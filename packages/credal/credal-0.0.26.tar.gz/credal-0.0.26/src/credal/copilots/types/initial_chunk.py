# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
import typing
from .web_search_result import WebSearchResult
from .data_filter import DataFilter
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class InitialChunk(UniversalBaseModel):
    conversation_id: typing_extensions.Annotated[str, FieldMetadata(alias="conversationId")]
    warnings: typing.List[str]
    web_search_results: typing_extensions.Annotated[
        typing.List[WebSearchResult], FieldMetadata(alias="webSearchResults")
    ]
    data_filters: typing_extensions.Annotated[typing.Optional[DataFilter], FieldMetadata(alias="dataFilters")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
