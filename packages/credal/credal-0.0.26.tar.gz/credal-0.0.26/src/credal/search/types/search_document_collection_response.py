# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
from .single_field_filter import SingleFieldFilter
import uuid
from .document_collection_search_result import DocumentCollectionSearchResult
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class SearchDocumentCollectionResponse(UniversalBaseModel):
    search_terms_used: typing_extensions.Annotated[typing.List[str], FieldMetadata(alias="searchTermsUsed")]
    structured_filters_applied: typing_extensions.Annotated[
        typing.List[SingleFieldFilter], FieldMetadata(alias="structuredFiltersApplied")
    ]
    search_id: typing_extensions.Annotated[uuid.UUID, FieldMetadata(alias="searchId")]
    results: typing.List[DocumentCollectionSearchResult]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
