import os
from pathlib import Path
import subprocess

from figexport.export.enums import ExportFormat
from figexport.export.fig_exporter import FigExporter
from figexport.export.svg_exporter import SvgExporter
from figexport.utils import get_output_file, copy_file


class TexExporter(FigExporter):
    """Class for exporting TikZ images to different formats.
    """
    def __init__(self, export_format: ExportFormat = ExportFormat.PDF):
        """Initializes the TikZ exporter."""
        super().__init__(export_format)
        self.svg_exporter = SvgExporter(self.format)

    def _to_pdf(self, input_file: Path, output_dir: Path, suffix: str = "") -> str:
        output_path = get_output_file(input_file, output_dir,
                                      ExportFormat.PDF, suffix)
        # Generate the .tex file including the TikZ code, and compile it
        self._compile_document(input_file, str(output_dir))

        # Clean-up auxiliary files and the generated .tex file
        self._cleanup_aux_files(output_path)

        return output_path

    def _to_svg(self, input_file: Path, output_dir: Path, suffix: str = "") -> str:
        """Export a Tex file to SVG format."""
        output_path = get_output_file(input_file, output_dir, ExportFormat.SVG, suffix)
        tex_file_path = str(output_dir / f"{input_file.stem}{suffix}.tex")
        dvi_temp_file = str(output_dir / f"{input_file.stem}{suffix}.dvi")

        # Copy the .tex file and compile it
        copy_file(str(input_file), tex_file_path)
        self._compile_document(tex_file_path, str(output_dir), True)

        # Convert the DVI file to SVG
        try:
            subprocess.run(['dvisvgm', '-o', output_path, dvi_temp_file],
                           check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        except subprocess.CalledProcessError as e:
            print(f"Error during DVI to SVG conversion: {e.stderr.decode()}")
        except Exception as e:
            print(f"An error occurred: {e}")

        # Clean-up auxiliary files and the generated .tex and .dvi files
        self._cleanup_aux_files(output_path)
        os.remove(tex_file_path)
        os.remove(dvi_temp_file)

        return output_path

    def _to_png(self, input_file: Path, output_dir: Path):
        # Export as SVG with "__temp" suffix
        svg_temp_file = self._to_svg(input_file, output_dir, "__temp")
        # Export the SVG file to PNG and remove the temporary SVG file
        temp_output_file = self.svg_exporter.export(Path(svg_temp_file), output_dir)
        os.remove(svg_temp_file)

        # Remove the "__temp" suffix from the generated PNG file
        output_file = temp_output_file.replace("__temp", "")
        os.rename(temp_output_file, output_file)

        return output_file

    def _to_jpg(self, input_file: Path, output_dir: Path):
        # Export as SVG with "__temp" suffix
        svg_temp_file = self._to_svg(input_file, output_dir, "__temp")
        # Export the SVG file to JPG and remove the temporary SVG file
        temp_output_file = self.svg_exporter.export(Path(svg_temp_file), output_dir)
        os.remove(svg_temp_file)

        # Remove the "__temp" suffix from the generated JPG file
        output_file = temp_output_file.replace("__temp", "")
        os.rename(temp_output_file, output_file)

        return output_file

    def _compile_document(self, input_file: str, output_dir: str, to_dvi=False):
        '''Compile the .tex file to PDF.

        Args:
            input_file: The path to the input .tex file.
            output_dir: The directory where the output PDF file should be saved.
            to_dvi: Whether to compile to DVI instead of PDF.
        '''
        command = ['pdflatex', '-output-directory', output_dir, input_file]
        if to_dvi:
            command.append('-output-format=dvi')
        try:
            subprocess.run(command, check=True,
                           stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        except subprocess.CalledProcessError as e:
            print(f"Error during LaTeX compilation: {e.stderr.decode()}")
        except Exception as e:
            print(f"An error occurred: {e}")

    def _cleanup_aux_files(self, pdf_output_file: str):
        '''Removes auxiliary files generated by LaTeX.

        Args:
            pdf_output_file: The path of the output pdf file.
        '''
        aux_extensions = ['.aux', '.log', '.out', '.toc']

        for ext in aux_extensions:
            aux_file = os.path.splitext(pdf_output_file)[0] + ext
            if os.path.exists(aux_file):
                os.remove(aux_file)
