"""
astrometry.py

High‑level astrometric utilities for the StellarPolAnalyzer library.

This module integrates the workflow for:
  1. Generating a synthetic star field from detected polarimetric pairs.
  2. Solving the World Coordinate System (WCS) of that synthetic image via Astrometry.net.
  3. Converting pixel coordinates of paired stars into sky coordinates (RA, Dec).
  4. Performing a SIMBAD cross‑match to annotate each star pair with astronomical identifiers.

Primary Function
----------------
- annotate_with_astrometry_net:
    - Builds a synthetic FITS image by injecting 2D Gaussians at the “ordinary” beam
      positions of each detected star pair.
    - Copies essential header keywords (RA, DEC, OBJECT) from the reference image.
    - Solves the synthetic image’s WCS using Astrometry.net (astroquery).
    - Maps pixel positions to ICRS sky coordinates.
    - Queries SIMBAD for each sky position and enriches the polarimetry results
      with 'ra', 'dec', and 'simbad_id'.

Usage Example
-------------
>>> from StellarPolAnalyzer.astrometry import annotate_with_astrometry_net
>>> wcs, enriched = annotate_with_astrometry_net(
...     ref_path="field_0.fits",
...     sources=sources_table,
...     final_pairs=star_pairs,
...     polarimetry_results=polar_results,
...     fwhm=4.0,
...     api_key="YOUR_API_KEY",
...     simbad_radius=0.02*u.deg,
...     synthetic_name="synthetic_field_0.fits"
... )
>>> for entry in enriched:
...     print(entry["simbad_id"], entry["ra"], entry["dec"])
"""

import numpy as np
from astropy.io import fits
from astropy.modeling.models import Gaussian2D
from astropy.wcs import WCS
from astroquery.astrometry_net import AstrometryNet
from astroquery.simbad import Simbad
from astropy import coordinates as coord
import astropy.units as u


def annotate_with_astrometry_net(ref_path, sources, final_pairs, polarimetry_results,
                                 fwhm=3.0, api_key=None, simbad_radius=0.01*u.deg,
                                 synthetic_name="synthetic.fits"):
    """
    Generate a synthetic star field FITS, solve its WCS via Astrometry.net, and
    cross-match each detected pair with SIMBAD.

    The synthetic image is built by placing 2D Gaussians at the “ordinary” beam
    positions of each star pair, with amplitude equal to the sum of ordinary and
    extraordinary flux at 0°. Key header keywords (RA, DEC, OBJECT) are preserved
    from the reference image.

    Parameters
    ----------
    ref_path : str
        Path to the reference FITS file (e.g., the 0° polarimetric image). Used to
        read image dimensions and copy header keywords.
    sources : astropy.table.Table or list
        Table of detected sources from the reference image. Each row must include
        'xcentroid' and 'ycentroid' fields.
    final_pairs : list of tuple
        Star pairs as returned by the pairing routine, each tuple:
        (i, j, distance_px, angle_deg). Indices i, j reference rows in `sources`.
    polarimetry_results : list of dict
        List of results from `compute_polarimetry_for_pairs`. Each dict must
        contain at least:
          - 'pair_index' : int, index into `final_pairs`
          - 'fluxes'[0.0]['ord_flux'] and ['ext_flux'] for amplitude at 0°.
    fwhm : float, optional
        Full width at half maximum of the Gaussian PSF to inject (in pixels).
        Default is 3.0.
    api_key : str or None, optional
        API key for Astrometry.net. If None, the WCS solving step will be skipped.
    simbad_radius : `astropy.units.Quantity`, optional
        Search radius for SIMBAD cross-match around each solved coordinate.
        Default is 0.01 deg.
    synthetic_name : str, optional
        Filename for the output synthetic FITS. Default is "synthetic.fits".

    Returns
    -------
    wcs : astropy.wcs.WCS
        World Coordinate System solution obtained from Astrometry.net.
    enriched : list of dict
        Copy of `polarimetry_results`, but each dict is augmented with:
          - 'ra'         : float, Right Ascension (ICRS) in degrees
          - 'dec'        : float, Declination (ICRS) in degrees
          - 'simbad_id'  : str, matched SIMBAD object identifier or "No_ID"

    Notes
    -----
    1. The synthetic star field is generated by summing Gaussian2D models on a grid
       matching the reference image size.
    2. Header keywords 'RA', 'DEC', and 'OBJECT' are propagated to the synthetic FITS.
    3. Requires network access and a valid Astrometry.net API key for WCS solution.
    4. SIMBAD queries use `Simbad.query_region`; ensure proper fields are reset/added.
    5. The procedure can fail silently if Astrometry.net or SIMBAD do not return results.
    """
    # Read header from reference
    hdr = fits.getheader(ref_path)
    ny, nx = hdr['NAXIS2'], hdr['NAXIS1']

    # Convert FWHM to Gaussian sigma
    sigma = fwhm / (2 * np.sqrt(2 * np.log(2)))

    # Build synthetic image
    syn = np.zeros((ny, nx))
    positions = []
    for entry in polarimetry_results:
        idx = entry['pair_index']
        i, j, _, _ = final_pairs[idx]
        x = sources[i]['xcentroid']
        y = sources[i]['ycentroid']
        positions.append((x, y))
        amp = entry['fluxes'][0.0]['ord_flux'] + entry['fluxes'][0.0]['ext_flux']
        g = Gaussian2D(amplitude=amp, x_mean=x, y_mean=y,
                       x_stddev=sigma, y_stddev=sigma)
        yy, xx = np.mgrid[0:ny, 0:nx]
        syn += g(xx, yy)

    # Write synthetic FITS with key header keywords
    syn_hdr = fits.Header({k: hdr[k] for k in ('RA', 'DEC', 'OBJECT') if k in hdr})
    fits.PrimaryHDU(syn, header=syn_hdr).writeto(synthetic_name, overwrite=True)

    # Solve WCS if API key provided
    ast = AstrometryNet()
    ast.api_key = api_key
    sol = ast.solve_from_image(synthetic_name)
    wcs_hdr = fits.Header(sol)
    wcs = WCS(wcs_hdr)

    # Convert pixel positions to sky coordinates
    pix = np.array(positions)
    world = wcs.all_pix2world(pix, 1)  # returns array [[ra, dec], ...]

    # Prepare SIMBAD queries
    Simbad.reset_votable_fields()
    Simbad.add_votable_fields('otype')

    enriched = []
    for entry, (ra, dec) in zip(polarimetry_results, world):
        sc = coord.SkyCoord(ra=ra * u.deg, dec=dec * u.deg, frame='icrs')
        res = Simbad.query_region(sc, radius=simbad_radius)
        if res and len(res) > 0:
            obj = res['MAIN_ID'][0]
            obj = obj.decode('utf-8') if isinstance(obj, bytes) else obj
        else:
            obj = "No_ID"
        e = entry.copy()
        e.update({'ra': float(ra), 'dec': float(dec), 'simbad_id': obj})
        enriched.append(e)

    return wcs, enriched
