Metadata-Version: 2.4
Name: StellarPolAnalyzer
Version: 0.1.16
Summary: Librer√≠a Python que automatiza un completo un pipeline polarim√©trico sobre im√°genes FITS astron√≥micas: Empareja, fotometriza y astrometriza im√°genes polarim√©tricas de campo estelar en un solo flujo.
Home-page: https://github.com/oscarmellizo/StellarPolAnalyzer
Author: Oscar Mellizo Angulo
Author-email: omellizo@gmail.com
License: Apache License 2.0
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: matplotlib
Requires-Dist: astropy
Requires-Dist: photutils
Requires-Dist: scikit-learn
Requires-Dist: scikit-image
Requires-Dist: scipy
Requires-Dist: astroquery
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license
Dynamic: license-file
Dynamic: requires-dist
Dynamic: summary

# üåü StellarPolAnalyzer

> **Empareja, fotometriza y astrometriza im√°genes polarim√©tricas de campo estelar en un solo flujo.**

---

## üìö Descripci√≥n

**StellarPolAnalyzer** es una librer√≠a Python que automatiza un completo **pipeline polarim√©trico** sobre im√°genes FITS astron√≥micas:

1. üî≠ **Detecci√≥n** de estrellas con `DAOStarFinder`.  
2. ü§ù **Emparejado** de componentes ordinaria/extraordinaria (beam‚Äësplitter).  
3. üìà **Fotometr√≠a** de apertura en 4 √°ngulos de polarizaci√≥n.  
4. ‚ûó C√°lculo de par√°metros de polarizaci√≥n: **Q, U, P, Œ∏** y sus errores.  
5. üñºÔ∏è **Alineaci√≥n** de im√°genes (cross‚Äëcorrelation).  
6. ‚ú® **Imagen sint√©tica** y soluci√≥n WCS con Astrometry.Net.  
7. üåê **Cruce SIMBAD** para identificar objetos celestes.  
8. üé® **Visualizaci√≥n** clara de pares, aperturas y resultados.  
9. üìë **Reporte** modular o flujo completo ‚Äúone‚Äëclick‚Äù.  

---

## üöÄ Instalaci√≥n

```bash
pip install StellarPolAnalyzer
```

> Requiere Python ‚â•3.7 y dependencias:
> `numpy`, `astropy`, `photutils`, `scikit-learn`, `scikit-image`, `scipy`, `astroquery`, `matplotlib`.

---

## üìÅ Estructura del paquete

```
StellarPolAnalyzer/
‚îú‚îÄ alignment.py            # Alineaci√≥n FITS y guardado con cabeceras
‚îú‚îÄ detection.py            # Detecci√≥n de fuentes y process_image
‚îú‚îÄ pairing.py              # C√°lculo de distancias/√°ngulos y emparejado
‚îú‚îÄ photometry.py           # Aperture photometry y polarimetr√≠a
‚îú‚îÄ astrometry.py           # Imagen sint√©tica, WCS y SIMBAD
‚îú‚îÄ visualization.py        # Funciones de dibujo y guardado de plots
‚îú‚îÄ pipeline.py             # compute_full_polarimetry + run_complete_pipeline
‚îú‚îÄ utils.py                # Utilidades (exportar pares a TXT)
‚îî‚îÄ __init__.py             # API p√∫blica
```

---

## üõ†Ô∏è Uso detallado

### 1Ô∏è‚É£  Detecci√≥n y emparejado b√°sico

```python
from StellarPolAnalyzer.detection import process_image
from StellarPolAnalyzer.visualization import draw_pairs

# 1. Procesar una imagen FITS (p.ej. 0¬∞)
img_path = 'data/field_0.fits'
data, sources, cands, pairs, d_mode, a_mode = process_image(
    img_path,
    fwhm=3.0,
    threshold_multiplier=5.0,
    tol_distance=1.44,
    tol_angle=1.20,
    max_distance=75
)

# 2. Visualizar resultados
draw_pairs(
    image_data=data,
    sources=sources,
    pairs=pairs,
    num_stars=len(sources),
    mode_distance=d_mode,
    mode_angle=a_mode,
    tol_distance=1.44,
    tol_angle=1.20,
    original_name='field_0.fits',
    filename_suffix='_pairs',
    report_dir='reports/basic'
)
```

> üîé **Salida**:  
> - Gr√°fico con puntos rojos (centroides), l√≠neas lime (parejas),  
> - C√≠rculos azules/rojos marcando ‚Äúordinaria‚Äù y ‚Äúextraordinaria‚Äù,  
> - Leyenda resumen fuera del mapa.

---

### 2Ô∏è‚É£  Fotometr√≠a y c√°lculo de polarizaci√≥n por pares

```python
from StellarPolAnalyzer.photometry import compute_polarimetry_for_pairs

final_paths = [
    'data/field_0-aligned.fits',
    'data/field_22.5-aligned.fits',
    'data/field_45-aligned.fits',
    'data/field_67.5-aligned.fits',
]
# `sources` y `pairs` obtenidos de process_image/ref_image
results = compute_polarimetry_for_pairs(
    final_image_paths=final_paths,
    sources=sources,
    final_pairs=pairs,
    aperture_radius=5,
    r_in=7,
    r_out=10,
    SNR_threshold=5
)

# Ejemplo de salida:
for entry in results:
    print(f"Par {entry['pair_index']:02d}: q={entry['q']:.2f}%  u={entry['u']:.2f}%  P={entry['P']:.2f}%  Œ∏={entry['theta']:.1f}¬∞")
```

---

### 3Ô∏è‚É£  Pipeline polarim√©trico (4 im√°genes)

```python
from StellarPolAnalyzer.pipeline import compute_full_polarimetry

ref = 'data/field_0.fits'
others = ['data/field_22.5.fits', 'data/field_45.fits', 'data/field_67.5.fits']
proc, polar_results, aligned_paths = compute_full_polarimetry(
    ref_path=ref,
    other_paths=others,
    fwhm=3.0,
    threshold_multiplier=5.0,
    tol_distance=1.44,
    tol_angle=1.20,
    max_distance=75,
    phot_aperture_radius=5,
    r_in=7,
    r_out=10,
    SNR_threshold=5,
    save_plots=True,
    report_dir='reports/full_pipeline'
)

print("Im√°genes alineadas:", aligned_paths)
print("N√∫mero de pares analizados:", len(polar_results))
```

---

### 4Ô∏è‚É£  Pipeline completo + astrometr√≠a + SIMBAD

```python
from StellarPolAnalyzer.pipeline import run_complete_polarimetric_pipeline
import astropy.units as u

ref = 'data/field_0.fits'
others = ['data/field_22.5.fits', 'data/field_45.fits', 'data/field_67.5.fits']
angles = [0.0, 22.5, 45.0, 67.5]

final_paths, polar_results, wcs, enriched = run_complete_polarimetric_pipeline(
    ref_path=ref,
    other_paths=others,
    pol_angles=angles,
    fwhm=3.0,
    threshold_multiplier=5.0,
    tol_distance=1.44,
    tol_angle=1.20,
    max_distance=75,
    phot_aperture_radius=5,
    r_in=7,
    r_out=10,
    SNR_threshold=5,
    astrometry_api_key='TU_API_KEY_ASTRONET',
    simbad_radius=0.01*u.deg,
    synthetic_name='synthetic_field.fits',
    save_plots=True,
    report_dir='reports/complete'
)

# Resultados finales
print("üî≠ FITS usados:", final_paths)
print("‚≠ê Polarimetr√≠a + SIMBAD:")
for entry in enriched:
    print(f"Par {entry['pair_index']:02d} ‚Üí P={entry['P']:.2f}%  Œ∏={entry['theta']:.1f}¬∞  Obj={entry['simbad_id']}")
```

---

### 5Ô∏è‚É£  M√©todos auxiliares

| Funci√≥n                                    | Descripci√≥n                                    |
|--------------------------------------------|------------------------------------------------|
| `detect_stars(image_data, fwhm, thr)`      | Detecta fuentes en `image_data`.               |
| `process_image(path, ...)`                 | Detecta y empareja en 1 imagen.                |
| `compute_distance_angle(p1,p2)`            | Distancia y √°ngulo m√≠nimo sim√©trico.           |
| `find_candidate_pairs(sources, max_dist)`  | Todas las parejas dentro de `max_dist`.        |
| `filter_pairs_by_mode(pairs, d_tol, a_tol)`| Filtra por moda de distancia/√°ngulo.           |
| `align_images(ref,img)`                    | Alinea `img` a `ref` (cross-correlation).      |
| `save_fits_with_same_headers(...)`         | Guarda FITS manteniendo su cabecera original.  |
| `draw_pairs(...)`                          | Visualiza pares y leyenda, guarda PNG.         |
| `save_plot(...)`                           | Guarda imagen gen√©rica en PNG.                 |
| `compute_polarimetry_for_pairs(...)`       | Fotometr√≠a + Q/U/P/Œ∏.                          |
| `compute_full_polarimetry(...)`            | Pipeline polarimetr√≠a (4 im√°genes).            |
| `run_complete_polarimetric_pipeline(...)`  | Pipeline completo + astrometr√≠a + SIMBAD.      |

---

## üìÑ Licencia

**MIT License** ‚Äì ¬°Uso libre, modif√≠calo y contribuye! üëê

---

## ü§ù Contribuciones

Pull requests, issues y ‚≠êÔ∏è son siempre bienvenidos. ¬°Ayuda a mejorar la ciencia abierta! üöÄ

---

*¬°Lleva tu an√°lisis polarim√©trico un paso m√°s all√°!* ‚ú®
