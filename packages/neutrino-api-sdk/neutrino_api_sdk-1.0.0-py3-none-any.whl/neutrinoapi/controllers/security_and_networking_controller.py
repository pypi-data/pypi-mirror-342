# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from neutrinoapi.api_helper import APIHelper
from neutrinoapi.configuration import Server
from neutrinoapi.http.api_response import ApiResponse
from neutrinoapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from neutrinoapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.configurations.endpoint_configuration import EndpointConfiguration
from neutrinoapi.models.ip_probe_response import IpProbeResponse
from neutrinoapi.models.host_reputation_response import HostReputationResponse
from neutrinoapi.models.email_verify_response import EmailVerifyResponse
from neutrinoapi.models.domain_lookup_response import DomainLookupResponse
from neutrinoapi.models.ip_blocklist_response import IpBlocklistResponse
from neutrinoapi.exceptions.api_error_exception import ApiErrorException


class SecurityAndNetworkingController(BaseController):

    """A Controller to access Endpoints in the neutrinoapi API."""
    def __init__(self, config):
        super(SecurityAndNetworkingController, self).__init__(config)

    def ip_blocklist_download(self,
                              format='csv',
                              cidr=False,
                              ip_6=False,
                              category='all',
                              output_encoding=None,
                              checksum=False):
        """Does a GET request to /ip-blocklist-download.

        This API is a direct feed to our IP blocklist data

        Args:
            format (str, optional): The data format. Can be either CSV or TXT
            cidr (bool, optional): Output IPs using CIDR notation. This option
                should be preferred but is off by default for backwards
                compatibility
            ip_6 (bool, optional): Output the IPv6 version of the blocklist,
                the default is to output IPv4 only. Note that this option
                enables CIDR notation too as this is the only notation
                currently supported for IPv6
            category (str, optional): The category of IP addresses to include
                in the download file, possible values are: <br> <ul> <li>all -
                all IPs available on your current plan (excludes VPN providers
                for any plans lower than Tier 3)</li> <li>bot - all IPs
                hosting a malicious bot or part of a botnet. This is a broad
                category which includes brute-force crackers</li>
                <li>exploit-bot - all IPs hosting an exploit finding bot or
                running exploit scanning software</li> <li>hijacked - all IPs
                that are part of a hijacked netblock or a netblock controlled
                by a criminal organization</li> <li>malware - all IPs involved
                in distributing or running malware or spyware</li> <li>proxy -
                all IPs detected as an anonymous web proxy or anonymous HTTP
                proxy</li> <li>spam-bot - all IPs hosting a spam bot, comment
                spamming or any other spamming type software</li> <li>spider -
                all IPs running a hostile web spider / web crawler</li>
                <li>tor - all IPs that are Tor nodes or running a Tor related
                service</li> <li>vpn - all IPs belonging to public VPN
                providers (only available for Tier 3 or higher accounts)</li>
                </ul>
            output_encoding (str, optional): Set this option to 'gzip' to have
                the output file compressed using gzip
            checksum (bool, optional): Do not download the file but just
                return the current files MurmurHash3 checksum. You can use
                this feature to check if the file has changed since a previous
                check

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/ip-blocklist-download')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('format')
                         .value(format))
            .query_param(Parameter()
                         .key('cidr')
                         .value(cidr))
            .query_param(Parameter()
                         .key('ip6')
                         .value(ip_6))
            .query_param(Parameter()
                         .key('category')
                         .value(category))
            .query_param(Parameter()
                         .key('output-encoding')
                         .value(output_encoding))
            .query_param(Parameter()
                         .key('checksum')
                         .value(checksum))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()

    def ip_probe(self,
                 ip):
        """Does a GET request to /ip-probe.

        Execute a realtime network probe against an IPv4 or IPv6 address

        Args:
            ip (str): An IPv4 or IPv6 address. Accepts standard IP notation
                and also CIDR notation

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/ip-probe')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('ip')
                         .value(ip)
                         .is_required(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(IpProbeResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def host_reputation(self,
                        host,
                        list_rating=3,
                        zones=None):
        """Does a GET request to /host-reputation.

        Check the reputation of an IP address, domain name or URL against a
        comprehensive list of blacklists and blocklists

        Args:
            host (str): An IP address, domain name, FQDN or URL. <br>If you
                supply a domain/URL it will be checked against the URI DNSBL
                lists
            list_rating (int, optional): Only check lists with this rating or
                better
            zones (str, optional): Only check these DNSBL zones/hosts.
                Multiple zones can be supplied as comma-separated values

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/host-reputation')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('host')
                         .value(host)
                         .is_required(True))
            .query_param(Parameter()
                         .key('list-rating')
                         .value(list_rating))
            .query_param(Parameter()
                         .key('zones')
                         .value(zones))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(HostReputationResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def email_verify(self,
                     email,
                     fix_typos=False):
        """Does a GET request to /email-verify.

        SMTP based email address verification

        Args:
            email (str): An email address
            fix_typos (bool, optional): Automatically attempt to fix typos in
                the address

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/email-verify')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('email')
                         .value(email)
                         .is_required(True))
            .query_param(Parameter()
                         .key('fix-typos')
                         .value(fix_typos))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(EmailVerifyResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def domain_lookup(self,
                      host,
                      live=True):
        """Does a GET request to /domain-lookup.

        Retrieve domain name details and detect potentially malicious or
        dangerous domains

        Args:
            host (str): A domain name, hostname, FQDN, URL, HTML link or email
                address to lookup
            live (bool, optional): For domains that we have never seen before
                then perform various live checks and realtime reconnaissance.
                <br>NOTE: this option may add additional non-deterministic
                delay to the request, if you require consistently fast API
                response times or just want to check our domain blocklists
                then you can disable this option

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/domain-lookup')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('host')
                         .value(host)
                         .is_required(True))
            .query_param(Parameter()
                         .key('live')
                         .value(live))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DomainLookupResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def ip_blocklist(self,
                     ip,
                     vpn_lookup=False):
        """Does a GET request to /ip-blocklist.

        The IP Blocklist API will detect potentially malicious or dangerous IP
        addresses

        Args:
            ip (str): An IPv4 or IPv6 address. Accepts standard IP notation
                (with or without port number), CIDR notation and IPv6
                compressed notation. If multiple IPs are passed using
                comma-separated values the first non-bogon address on the list
                will be checked
            vpn_lookup (bool, optional): Include public VPN provider IP
                addresses. <br><b>NOTE</b>: For more advanced VPN detection
                including the ability to identify private and stealth VPNs use
                the <a href="https://www.neutrinoapi.com/api/ip-probe/">IP
                Probe API</a>

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/ip-blocklist')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('ip')
                         .value(ip)
                         .is_required(True))
            .query_param(Parameter()
                         .key('vpn-lookup')
                         .value(vpn_lookup))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(IpBlocklistResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()
