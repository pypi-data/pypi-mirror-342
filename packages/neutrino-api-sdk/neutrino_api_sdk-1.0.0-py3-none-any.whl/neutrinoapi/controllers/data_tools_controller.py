# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from neutrinoapi.api_helper import APIHelper
from neutrinoapi.configuration import Server
from neutrinoapi.http.api_response import ApiResponse
from neutrinoapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from neutrinoapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from neutrinoapi.models.email_validate_response import EmailValidateResponse
from neutrinoapi.models.bad_word_filter_response import BadWordFilterResponse
from neutrinoapi.models.ua_lookup_response import UaLookupResponse
from neutrinoapi.models.phone_validate_response import PhoneValidateResponse
from neutrinoapi.exceptions.api_error_exception import ApiErrorException


class DataToolsController(BaseController):

    """A Controller to access Endpoints in the neutrinoapi API."""
    def __init__(self, config):
        super(DataToolsController, self).__init__(config)

    def email_validate(self,
                       email,
                       fix_typos=False):
        """Does a GET request to /email-validate.

        Parse, validate and clean an email address

        Args:
            email (str): An email address
            fix_typos (bool, optional): Automatically attempt to fix typos in
                the address

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/email-validate')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('email')
                         .value(email)
                         .is_required(True))
            .query_param(Parameter()
                         .key('fix-typos')
                         .value(fix_typos))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(EmailValidateResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def bad_word_filter(self,
                        content,
                        censor_character=None,
                        catalog='strict'):
        """Does a POST request to /bad-word-filter.

        Detect bad words, swear words and profanity in a given text

        Args:
            content (str): The content to scan. This can be either a URL to
                load from, a file upload (multipart/form-data) or an HTML
                content string
            censor_character (str, optional): The character to use to censor
                out the bad words found
            catalog (str, optional): Which catalog of bad words to use, we
                currently maintain two bad word catalogs: <br> <ul> <li>strict
                - the largest database of bad words which includes profanity,
                obscenity, sexual, rude, cuss, dirty, swear and objectionable
                words and phrases. This catalog is suitable for environments
                of all ages including educational or children's content</li>
                <li>obscene - like the strict catalog but does not include any
                mild profanities, idiomatic phrases or words which are
                considered formal terminology. This catalog is suitable for
                adult environments where certain types of bad words are
                considered OK</li> </ul>

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/bad-word-filter')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('content')
                        .value(content)
                        .is_required(True))
            .form_param(Parameter()
                        .key('censor-character')
                        .value(censor_character))
            .form_param(Parameter()
                        .key('catalog')
                        .value(catalog))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BadWordFilterResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def ua_lookup(self,
                  ua,
                  ua_version=None,
                  ua_platform=None,
                  ua_platform_version=None,
                  ua_mobile=None,
                  device_model=None,
                  device_brand=None):
        """Does a GET request to /ua-lookup.

        Parse, validate and get detailed user-agent information from a user
        agent string or from client hints

        Args:
            ua (str): The user-agent string to lookup. For client hints use
                the 'UA' header or the JSON data directly from
                'navigator.userAgentData.brands' or
                'navigator.userAgentData.getHighEntropyValues()'
            ua_version (str, optional): For client hints this corresponds to
                the 'UA-Full-Version' header or 'uaFullVersion' from
                NavigatorUAData
            ua_platform (str, optional): For client hints this corresponds to
                the 'UA-Platform' header or 'platform' from NavigatorUAData
            ua_platform_version (str, optional): For client hints this
                corresponds to the 'UA-Platform-Version' header or
                'platformVersion' from NavigatorUAData
            ua_mobile (str, optional): For client hints this corresponds to
                the 'UA-Mobile' header or 'mobile' from NavigatorUAData
            device_model (str, optional): For client hints this corresponds to
                the 'UA-Model' header or 'model' from NavigatorUAData. <br>You
                can also use this parameter to lookup a device directly by its
                model name, model code or hardware code, on android you can
                get the model name from:
                https://developer.android.com/reference/android/os/Build.html#M
                ODEL
            device_brand (str, optional): This parameter is only used in
                combination with 'device-model' when doing direct device
                lookups without any user-agent data. Set this to the brand or
                manufacturer name, this is required for accurate device
                detection with ambiguous model names. On android you can get
                the device brand from:
                https://developer.android.com/reference/android/os/Build#MANUFA
                CTURER

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/ua-lookup')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('ua')
                         .value(ua)
                         .is_required(True))
            .query_param(Parameter()
                         .key('ua-version')
                         .value(ua_version))
            .query_param(Parameter()
                         .key('ua-platform')
                         .value(ua_platform))
            .query_param(Parameter()
                         .key('ua-platform-version')
                         .value(ua_platform_version))
            .query_param(Parameter()
                         .key('ua-mobile')
                         .value(ua_mobile))
            .query_param(Parameter()
                         .key('device-model')
                         .value(device_model))
            .query_param(Parameter()
                         .key('device-brand')
                         .value(device_brand))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UaLookupResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def phone_validate(self,
                       number,
                       country_code=None,
                       ip=None):
        """Does a GET request to /phone-validate.

        Parse, validate and get location information about a phone number

        Args:
            number (str): A phone number. This can be in international format
                (E.164) or local format. If passing local format you must also
                set either the 'country-code' OR 'ip' options as well
            country_code (str, optional): ISO 2-letter country code, assume
                numbers are based in this country. If not set numbers are
                assumed to be in international format (with or without the
                leading + sign)
            ip (str, optional): Pass in a users IP address and we will assume
                numbers are based in the country of the IP address

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/phone-validate')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('number')
                         .value(number)
                         .is_required(True))
            .query_param(Parameter()
                         .key('country-code')
                         .value(country_code))
            .query_param(Parameter()
                         .key('ip')
                         .value(ip))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PhoneValidateResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()
