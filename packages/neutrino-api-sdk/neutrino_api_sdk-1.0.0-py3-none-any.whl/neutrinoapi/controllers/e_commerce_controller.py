# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from neutrinoapi.api_helper import APIHelper
from neutrinoapi.configuration import Server
from neutrinoapi.http.api_response import ApiResponse
from neutrinoapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from neutrinoapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.configurations.endpoint_configuration import EndpointConfiguration
from neutrinoapi.models.convert_response import ConvertResponse
from neutrinoapi.models.bin_lookup_response import BinLookupResponse
from neutrinoapi.exceptions.api_error_exception import ApiErrorException


class ECommerceController(BaseController):

    """A Controller to access Endpoints in the neutrinoapi API."""
    def __init__(self, config):
        super(ECommerceController, self).__init__(config)

    def bin_list_download(self,
                          include_iso_3=False,
                          include_8_digit=False,
                          include_all=False,
                          output_encoding=None):
        """Does a GET request to /bin-list-download.

        Download our entire BIN database for direct use on your own systems

        Args:
            include_iso_3 (bool, optional): Include ISO 3-letter country codes
                and ISO 3-letter currency codes in the data. These will be
                added to columns 10 and 11 respectively
            include_8_digit (bool, optional): Include 8-digit and higher BIN
                codes. This option includes all 6-digit BINs and all 8-digit
                and higher BINs (including some 9, 10 and 11 digit BINs where
                available)
            include_all (bool, optional): Include all BINs and all available
                fields in the CSV file (overrides any values set for
                'include-iso3' or 'include-8digit')
            output_encoding (str, optional): Set this option to 'gzip' to have
                the output file compressed using gzip

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/bin-list-download')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('include-iso3')
                         .value(include_iso_3))
            .query_param(Parameter()
                         .key('include-8digit')
                         .value(include_8_digit))
            .query_param(Parameter()
                         .key('include-all')
                         .value(include_all))
            .query_param(Parameter()
                         .key('output-encoding')
                         .value(output_encoding))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()

    def convert(self,
                from_value,
                from_type,
                to_type,
                historical_date=None):
        """Does a GET request to /convert.

        A currency and unit conversion tool

        Args:
            from_value (str): The value to convert from (e.g. 10.95)
            from_type (str): The type of the value to convert from (e.g. USD)
            to_type (str): The type to convert to (e.g. EUR)
            historical_date (str, optional): Convert using the rate on a
                historical date, accepted date formats are: YYYY-MM-DD,
                YYYY-MM, YYYY. Historical rates are stored with daily
                granularity so the date format YYYY-MM-DD is preferred for the
                highest precision. If an invalid date or a date too far into
                the past is supplied then the API will respond with 'valid' as
                false and an empty 'historical-date'

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/convert')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('from-value')
                         .value(from_value)
                         .is_required(True))
            .query_param(Parameter()
                         .key('from-type')
                         .value(from_type)
                         .is_required(True))
            .query_param(Parameter()
                         .key('to-type')
                         .value(to_type)
                         .is_required(True))
            .query_param(Parameter()
                         .key('historical-date')
                         .value(historical_date))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ConvertResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def bin_lookup(self,
                   bin_number,
                   customer_ip=None):
        """Does a GET request to /bin-lookup.

        Perform a BIN (Bank Identification Number) or IIN (Issuer
        Identification Number) lookup

        Args:
            bin_number (str): The BIN or IIN number. This is the first 6, 8 or
                10 digits of a card number, use 8 (or more) digits for the
                highest level of accuracy
            customer_ip (str, optional): Pass in the customers IP address and
                we will return some extra information about them

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/bin-lookup')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('bin-number')
                         .value(bin_number)
                         .is_required(True))
            .query_param(Parameter()
                         .key('customer-ip')
                         .value(customer_ip))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BinLookupResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()
