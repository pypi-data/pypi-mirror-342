# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class Blacklist(object):

    """Implementation of the 'Blacklist' model.

    Structure of lists

    Attributes:
        is_listed (bool): True if the host is currently black-listed
        list_host (str): The hostname of the DNSBL
        list_rating (int): The list rating [1-3] with 1 being the best rating
            and 3 the lowest rating
        list_name (str): The name of the DNSBL
        txt_record (str): The TXT record returned for this listing (only set
            if listed)
        return_code (str): The specific return code for this listing (only set
            if listed)
        response_time (int): The DNSBL server response time in milliseconds
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "is_listed": 'is-listed',
        "list_host": 'list-host',
        "list_rating": 'list-rating',
        "list_name": 'list-name',
        "txt_record": 'txt-record',
        "return_code": 'return-code',
        "response_time": 'response-time'
    }

    def __init__(self,
                 is_listed=None,
                 list_host=None,
                 list_rating=None,
                 list_name=None,
                 txt_record=None,
                 return_code=None,
                 response_time=None,
                 additional_properties=None):
        """Constructor for the Blacklist class"""

        # Initialize members of the class
        self.is_listed = is_listed 
        self.list_host = list_host 
        self.list_rating = list_rating 
        self.list_name = list_name 
        self.txt_record = txt_record 
        self.return_code = return_code 
        self.response_time = response_time 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        is_listed = dictionary.get("is-listed") if "is-listed" in dictionary.keys() else None
        list_host = dictionary.get("list-host") if dictionary.get("list-host") else None
        list_rating = dictionary.get("list-rating") if dictionary.get("list-rating") else None
        list_name = dictionary.get("list-name") if dictionary.get("list-name") else None
        txt_record = dictionary.get("txt-record") if dictionary.get("txt-record") else None
        return_code = dictionary.get("return-code") if dictionary.get("return-code") else None
        response_time = dictionary.get("response-time") if dictionary.get("response-time") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(is_listed,
                   list_host,
                   list_rating,
                   list_name,
                   txt_record,
                   return_code,
                   response_time,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'is_listed={self.is_listed!r}, '
                f'list_host={self.list_host!r}, '
                f'list_rating={self.list_rating!r}, '
                f'list_name={self.list_name!r}, '
                f'txt_record={self.txt_record!r}, '
                f'return_code={self.return_code!r}, '
                f'response_time={self.response_time!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'is_listed={self.is_listed!s}, '
                f'list_host={self.list_host!s}, '
                f'list_rating={self.list_rating!s}, '
                f'list_name={self.list_name!s}, '
                f'txt_record={self.txt_record!s}, '
                f'return_code={self.return_code!s}, '
                f'response_time={self.response_time!s}, '
                f'additional_properties={self.additional_properties!s})')
