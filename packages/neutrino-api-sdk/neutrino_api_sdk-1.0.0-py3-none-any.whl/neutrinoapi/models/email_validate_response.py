# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class EmailValidateResponse(object):

    """Implementation of the 'EmailValidateResponse' model.

    Structure of email-validate

    Attributes:
        valid (bool): Is this a valid email address. To be valid an email must
            have: correct syntax, a registered and active domain name, correct
            DNS records and operational MX servers
        syntax_error (bool): True if this address has any syntax errors or is
            not in RFC compliant formatting
        domain (str): The domain name of this email address
        domain_error (bool): True if this address has any domain name or DNS
            related errors. Check the 'domain-status' field for the detailed
            error reason
        is_freemail (bool): True if this address is from a free email provider
        email (str): The complete email address. If you enabled the
            'fix-typos' option then this will be the corrected address
        is_disposable (bool): True if this address is a disposable, temporary
            or darknet related email address
        typos_fixed (bool): True if any typos have been fixed. The 'fix-typos'
            option must be enabled for this to work
        is_personal (bool): True if this address likely belongs to a person.
            False if this is a role based address, e.g. admin@, help@,
            office@, etc.
        provider (str): The domain name of the email hosting provider
        mx_ip (str): The first resolved IP address of the primary MX server,
            may be empty if there are domain errors present
        domain_status (str): The email domain status, possible values are:
            <br> <ul> <li>ok - the domain is in working order and can receive
            email</li> <li>invalid - the domain is not a conformant hostname.
            May contain invalid syntax or characters</li> <li>no-service - the
            domain owner has indicated there is no mail service on the domain
            (also known as the 'Null MX')</li> <li>no-mail - the domain has no
            valid MX records so cannot receive email</li> <li>mx-invalid - MX
            records contain invalid or non-conformant hostname values</li>
            <li>mx-bogon - MX records point to bogon IP addresses</li>
            <li>resolv-error - MX records do not resolve to any valid IP
            addresses</li> </ul>
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "valid": 'valid',
        "syntax_error": 'syntax-error',
        "domain": 'domain',
        "domain_error": 'domain-error',
        "is_freemail": 'is-freemail',
        "email": 'email',
        "is_disposable": 'is-disposable',
        "typos_fixed": 'typos-fixed',
        "is_personal": 'is-personal',
        "provider": 'provider',
        "mx_ip": 'mx-ip',
        "domain_status": 'domain-status'
    }

    def __init__(self,
                 valid=None,
                 syntax_error=None,
                 domain=None,
                 domain_error=None,
                 is_freemail=None,
                 email=None,
                 is_disposable=None,
                 typos_fixed=None,
                 is_personal=None,
                 provider=None,
                 mx_ip=None,
                 domain_status=None,
                 additional_properties=None):
        """Constructor for the EmailValidateResponse class"""

        # Initialize members of the class
        self.valid = valid 
        self.syntax_error = syntax_error 
        self.domain = domain 
        self.domain_error = domain_error 
        self.is_freemail = is_freemail 
        self.email = email 
        self.is_disposable = is_disposable 
        self.typos_fixed = typos_fixed 
        self.is_personal = is_personal 
        self.provider = provider 
        self.mx_ip = mx_ip 
        self.domain_status = domain_status 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        valid = dictionary.get("valid") if "valid" in dictionary.keys() else None
        syntax_error = dictionary.get("syntax-error") if "syntax-error" in dictionary.keys() else None
        domain = dictionary.get("domain") if dictionary.get("domain") else None
        domain_error = dictionary.get("domain-error") if "domain-error" in dictionary.keys() else None
        is_freemail = dictionary.get("is-freemail") if "is-freemail" in dictionary.keys() else None
        email = dictionary.get("email") if dictionary.get("email") else None
        is_disposable = dictionary.get("is-disposable") if "is-disposable" in dictionary.keys() else None
        typos_fixed = dictionary.get("typos-fixed") if "typos-fixed" in dictionary.keys() else None
        is_personal = dictionary.get("is-personal") if "is-personal" in dictionary.keys() else None
        provider = dictionary.get("provider") if dictionary.get("provider") else None
        mx_ip = dictionary.get("mx-ip") if dictionary.get("mx-ip") else None
        domain_status = dictionary.get("domain-status") if dictionary.get("domain-status") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(valid,
                   syntax_error,
                   domain,
                   domain_error,
                   is_freemail,
                   email,
                   is_disposable,
                   typos_fixed,
                   is_personal,
                   provider,
                   mx_ip,
                   domain_status,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'valid={self.valid!r}, '
                f'syntax_error={self.syntax_error!r}, '
                f'domain={self.domain!r}, '
                f'domain_error={self.domain_error!r}, '
                f'is_freemail={self.is_freemail!r}, '
                f'email={self.email!r}, '
                f'is_disposable={self.is_disposable!r}, '
                f'typos_fixed={self.typos_fixed!r}, '
                f'is_personal={self.is_personal!r}, '
                f'provider={self.provider!r}, '
                f'mx_ip={self.mx_ip!r}, '
                f'domain_status={self.domain_status!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'valid={self.valid!s}, '
                f'syntax_error={self.syntax_error!s}, '
                f'domain={self.domain!s}, '
                f'domain_error={self.domain_error!s}, '
                f'is_freemail={self.is_freemail!s}, '
                f'email={self.email!s}, '
                f'is_disposable={self.is_disposable!s}, '
                f'typos_fixed={self.typos_fixed!s}, '
                f'is_personal={self.is_personal!s}, '
                f'provider={self.provider!s}, '
                f'mx_ip={self.mx_ip!s}, '
                f'domain_status={self.domain_status!s}, '
                f'additional_properties={self.additional_properties!s})')
