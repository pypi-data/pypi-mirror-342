# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class UaLookupResponse(object):

    """Implementation of the 'UALookupResponse' model.

    Structure of ua-lookup

    Attributes:
        ua (str): The user agent string
        mtype (str): The user agent type, possible values are: <br> <ul>
            <li>desktop</li> <li>phone</li> <li>tablet</li> <li>wearable</li>
            <li>tv</li> <li>console</li> <li>email</li> <li>library</li>
            <li>robot</li> <li>unknown</li> </ul>
        name (str): The client software name
        version (str): The client software full version
        version_major (str): The client software major version
        browser_engine (str): If the client is a web browser which underlying
            browser engine does it use
        browser_release (str): If the client is a web browser which year was
            this browser version released
        os (str): The full operating system name
        os_family (str): The operating system family. The major OS families
            are: Android, Windows, macOS, iOS, Linux
        os_version (str): The operating system full version
        os_version_major (str): The operating system major version
        is_mobile (bool): Is this a mobile device (e.g. a phone or tablet)
        is_webview (bool): Is this a WebView / embedded software client
        device_brand (str): The device brand / manufacturer
        device_model (str): The device model
        device_model_code (str): The device model code
        device_release (str): The year when this device model was released
        device_price (float): The average device price on release in USD
        device_resolution (str): The device display resolution in physical
            pixels (e.g. 720x1280)
        device_ppi (float): The device display PPI (pixels per inch)
        device_pixel_ratio (float): The device display pixel ratio (the ratio
            of the resolution in physical pixels to the resolution in CSS
            pixels)
        device_width_px (float): The device display width in CSS 'px'
        device_height_px (float): The device display height in CSS 'px'
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ua": 'ua',
        "mtype": 'type',
        "name": 'name',
        "version": 'version',
        "version_major": 'version-major',
        "browser_engine": 'browser-engine',
        "browser_release": 'browser-release',
        "os": 'os',
        "os_family": 'os-family',
        "os_version": 'os-version',
        "os_version_major": 'os-version-major',
        "is_mobile": 'is-mobile',
        "is_webview": 'is-webview',
        "device_brand": 'device-brand',
        "device_model": 'device-model',
        "device_model_code": 'device-model-code',
        "device_release": 'device-release',
        "device_price": 'device-price',
        "device_resolution": 'device-resolution',
        "device_ppi": 'device-ppi',
        "device_pixel_ratio": 'device-pixel-ratio',
        "device_width_px": 'device-width-px',
        "device_height_px": 'device-height-px'
    }

    def __init__(self,
                 ua=None,
                 mtype=None,
                 name=None,
                 version=None,
                 version_major=None,
                 browser_engine=None,
                 browser_release=None,
                 os=None,
                 os_family=None,
                 os_version=None,
                 os_version_major=None,
                 is_mobile=None,
                 is_webview=None,
                 device_brand=None,
                 device_model=None,
                 device_model_code=None,
                 device_release=None,
                 device_price=None,
                 device_resolution=None,
                 device_ppi=None,
                 device_pixel_ratio=None,
                 device_width_px=None,
                 device_height_px=None,
                 additional_properties=None):
        """Constructor for the UaLookupResponse class"""

        # Initialize members of the class
        self.ua = ua 
        self.mtype = mtype 
        self.name = name 
        self.version = version 
        self.version_major = version_major 
        self.browser_engine = browser_engine 
        self.browser_release = browser_release 
        self.os = os 
        self.os_family = os_family 
        self.os_version = os_version 
        self.os_version_major = os_version_major 
        self.is_mobile = is_mobile 
        self.is_webview = is_webview 
        self.device_brand = device_brand 
        self.device_model = device_model 
        self.device_model_code = device_model_code 
        self.device_release = device_release 
        self.device_price = device_price 
        self.device_resolution = device_resolution 
        self.device_ppi = device_ppi 
        self.device_pixel_ratio = device_pixel_ratio 
        self.device_width_px = device_width_px 
        self.device_height_px = device_height_px 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        ua = dictionary.get("ua") if dictionary.get("ua") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        version = dictionary.get("version") if dictionary.get("version") else None
        version_major = dictionary.get("version-major") if dictionary.get("version-major") else None
        browser_engine = dictionary.get("browser-engine") if dictionary.get("browser-engine") else None
        browser_release = dictionary.get("browser-release") if dictionary.get("browser-release") else None
        os = dictionary.get("os") if dictionary.get("os") else None
        os_family = dictionary.get("os-family") if dictionary.get("os-family") else None
        os_version = dictionary.get("os-version") if dictionary.get("os-version") else None
        os_version_major = dictionary.get("os-version-major") if dictionary.get("os-version-major") else None
        is_mobile = dictionary.get("is-mobile") if "is-mobile" in dictionary.keys() else None
        is_webview = dictionary.get("is-webview") if "is-webview" in dictionary.keys() else None
        device_brand = dictionary.get("device-brand") if dictionary.get("device-brand") else None
        device_model = dictionary.get("device-model") if dictionary.get("device-model") else None
        device_model_code = dictionary.get("device-model-code") if dictionary.get("device-model-code") else None
        device_release = dictionary.get("device-release") if dictionary.get("device-release") else None
        device_price = dictionary.get("device-price") if dictionary.get("device-price") else None
        device_resolution = dictionary.get("device-resolution") if dictionary.get("device-resolution") else None
        device_ppi = dictionary.get("device-ppi") if dictionary.get("device-ppi") else None
        device_pixel_ratio = dictionary.get("device-pixel-ratio") if dictionary.get("device-pixel-ratio") else None
        device_width_px = dictionary.get("device-width-px") if dictionary.get("device-width-px") else None
        device_height_px = dictionary.get("device-height-px") if dictionary.get("device-height-px") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(ua,
                   mtype,
                   name,
                   version,
                   version_major,
                   browser_engine,
                   browser_release,
                   os,
                   os_family,
                   os_version,
                   os_version_major,
                   is_mobile,
                   is_webview,
                   device_brand,
                   device_model,
                   device_model_code,
                   device_release,
                   device_price,
                   device_resolution,
                   device_ppi,
                   device_pixel_ratio,
                   device_width_px,
                   device_height_px,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'ua={self.ua!r}, '
                f'mtype={self.mtype!r}, '
                f'name={self.name!r}, '
                f'version={self.version!r}, '
                f'version_major={self.version_major!r}, '
                f'browser_engine={self.browser_engine!r}, '
                f'browser_release={self.browser_release!r}, '
                f'os={self.os!r}, '
                f'os_family={self.os_family!r}, '
                f'os_version={self.os_version!r}, '
                f'os_version_major={self.os_version_major!r}, '
                f'is_mobile={self.is_mobile!r}, '
                f'is_webview={self.is_webview!r}, '
                f'device_brand={self.device_brand!r}, '
                f'device_model={self.device_model!r}, '
                f'device_model_code={self.device_model_code!r}, '
                f'device_release={self.device_release!r}, '
                f'device_price={self.device_price!r}, '
                f'device_resolution={self.device_resolution!r}, '
                f'device_ppi={self.device_ppi!r}, '
                f'device_pixel_ratio={self.device_pixel_ratio!r}, '
                f'device_width_px={self.device_width_px!r}, '
                f'device_height_px={self.device_height_px!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'ua={self.ua!s}, '
                f'mtype={self.mtype!s}, '
                f'name={self.name!s}, '
                f'version={self.version!s}, '
                f'version_major={self.version_major!s}, '
                f'browser_engine={self.browser_engine!s}, '
                f'browser_release={self.browser_release!s}, '
                f'os={self.os!s}, '
                f'os_family={self.os_family!s}, '
                f'os_version={self.os_version!s}, '
                f'os_version_major={self.os_version_major!s}, '
                f'is_mobile={self.is_mobile!s}, '
                f'is_webview={self.is_webview!s}, '
                f'device_brand={self.device_brand!s}, '
                f'device_model={self.device_model!s}, '
                f'device_model_code={self.device_model_code!s}, '
                f'device_release={self.device_release!s}, '
                f'device_price={self.device_price!s}, '
                f'device_resolution={self.device_resolution!s}, '
                f'device_ppi={self.device_ppi!s}, '
                f'device_pixel_ratio={self.device_pixel_ratio!s}, '
                f'device_width_px={self.device_width_px!s}, '
                f'device_height_px={self.device_height_px!s}, '
                f'additional_properties={self.additional_properties!s})')
