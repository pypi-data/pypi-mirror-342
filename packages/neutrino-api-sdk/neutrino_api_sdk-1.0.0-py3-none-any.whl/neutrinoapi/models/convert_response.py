# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class ConvertResponse(object):

    """Implementation of the 'ConvertResponse' model.

    Structure of convert

    Attributes:
        valid (bool): True if the conversion was successful and produced a
            valid result
        result (str): The result of the conversion in string format
        from_value (str): The value being converted from
        to_type (str): The type being converted to
        from_type (str): The type of the value being converted from
        result_float (float): The result of the conversion as a floating-point
            number
        from_name (str): The full name of the type being converted from
        from_symbol (str): The standard UTF-8 symbol used to represent the
            type being converted from
        to_name (str): The full name of the type being converted to
        to_symbol (str): The standard UTF-8 symbol used to represent the type
            being converted to
        historical_date (str): If a historical conversion was made using the
            'historical-date' request option this will contain the exact date
            used for the conversion in ISO format: YYYY-MM-DD
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "valid": 'valid',
        "result": 'result',
        "from_value": 'from-value',
        "to_type": 'to-type',
        "from_type": 'from-type',
        "result_float": 'result-float',
        "from_name": 'from-name',
        "from_symbol": 'from-symbol',
        "to_name": 'to-name',
        "to_symbol": 'to-symbol',
        "historical_date": 'historical-date'
    }

    def __init__(self,
                 valid=None,
                 result=None,
                 from_value=None,
                 to_type=None,
                 from_type=None,
                 result_float=None,
                 from_name=None,
                 from_symbol=None,
                 to_name=None,
                 to_symbol=None,
                 historical_date=None,
                 additional_properties=None):
        """Constructor for the ConvertResponse class"""

        # Initialize members of the class
        self.valid = valid 
        self.result = result 
        self.from_value = from_value 
        self.to_type = to_type 
        self.from_type = from_type 
        self.result_float = result_float 
        self.from_name = from_name 
        self.from_symbol = from_symbol 
        self.to_name = to_name 
        self.to_symbol = to_symbol 
        self.historical_date = historical_date 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        valid = dictionary.get("valid") if "valid" in dictionary.keys() else None
        result = dictionary.get("result") if dictionary.get("result") else None
        from_value = dictionary.get("from-value") if dictionary.get("from-value") else None
        to_type = dictionary.get("to-type") if dictionary.get("to-type") else None
        from_type = dictionary.get("from-type") if dictionary.get("from-type") else None
        result_float = dictionary.get("result-float") if dictionary.get("result-float") else None
        from_name = dictionary.get("from-name") if dictionary.get("from-name") else None
        from_symbol = dictionary.get("from-symbol") if dictionary.get("from-symbol") else None
        to_name = dictionary.get("to-name") if dictionary.get("to-name") else None
        to_symbol = dictionary.get("to-symbol") if dictionary.get("to-symbol") else None
        historical_date = dictionary.get("historical-date") if dictionary.get("historical-date") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(valid,
                   result,
                   from_value,
                   to_type,
                   from_type,
                   result_float,
                   from_name,
                   from_symbol,
                   to_name,
                   to_symbol,
                   historical_date,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'valid={self.valid!r}, '
                f'result={self.result!r}, '
                f'from_value={self.from_value!r}, '
                f'to_type={self.to_type!r}, '
                f'from_type={self.from_type!r}, '
                f'result_float={self.result_float!r}, '
                f'from_name={self.from_name!r}, '
                f'from_symbol={self.from_symbol!r}, '
                f'to_name={self.to_name!r}, '
                f'to_symbol={self.to_symbol!r}, '
                f'historical_date={self.historical_date!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'valid={self.valid!s}, '
                f'result={self.result!s}, '
                f'from_value={self.from_value!s}, '
                f'to_type={self.to_type!s}, '
                f'from_type={self.from_type!s}, '
                f'result_float={self.result_float!s}, '
                f'from_name={self.from_name!s}, '
                f'from_symbol={self.from_symbol!s}, '
                f'to_name={self.to_name!s}, '
                f'to_symbol={self.to_symbol!s}, '
                f'historical_date={self.historical_date!s}, '
                f'additional_properties={self.additional_properties!s})')
