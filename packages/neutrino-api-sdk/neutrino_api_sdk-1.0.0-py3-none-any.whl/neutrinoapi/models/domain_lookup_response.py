# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper
from neutrinoapi.models.blocklist_sensor import BlocklistSensor


class DomainLookupResponse(object):

    """Implementation of the 'DomainLookupResponse' model.

    Structure of domain-lookup

    Attributes:
        domain (str): The primary domain name excluding any subdomains. This
            is also referred to as the second-level domain (SLD)
        is_malicious (bool): Consider this domain malicious as it is currently
            listed on at least 1 blocklist
        blocklists (List[str]): An array of strings indicating which blocklist
            categories this domain is listed on. Current possible values are:
            <br> <ul> <li>phishing - Domain has recently been hosting phishing
            links or involved in the sending of phishing messages</li>
            <li>malware - Domain has recently been hosting malware or involved
            in the distribution of malware</li> <li>spam - Domain has recently
            been sending spam either directly or indirectly</li>
            <li>anonymizer - Domain is involved in anonymizer activity such as
            disposable email, hosting proxies or tor services</li>
            <li>nefarious - Domain is involved in nefarious or malicious
            activity such as hacking, fraud or other abusive behavior</li>
            </ul>
        sensors (List[BlocklistSensor]): An array of objects containing
            details on which specific blocklist sensors have detected this
            domain
        valid (bool): True if a valid domain was found. For a domain to be
            considered valid it must be registered and have valid DNS NS
            records
        fqdn (str): The fully qualified domain name (FQDN)
        is_subdomain (bool): Is the FQDN a subdomain of the primary domain
        tld (str): The top-level domain (TLD)
        tld_cc (str): For a country code top-level domain (ccTLD) this will
            contain the associated ISO 2-letter country code
        rank (int): The domains estimated global traffic rank with the highest
            rank being 1. A value of 0 indicates the domain is currently
            ranked outside of the top 1M of domains
        is_gov (bool): Is this domain under a government or military TLD
        is_opennic (bool): Is this domain under an OpenNIC TLD
        is_pending (bool): True if this domain is unseen and is currently
            being processed in the background. This field only matters when
            the 'live' lookup setting has been explicitly disabled and
            indicates that not all domain data my be present yet
        is_adult (bool): This domain is hosting adult content such as porn,
            webcams, escorts, etc
        registered_date (str): The ISO date this domain was registered or
            first seen on the internet. An empty value indicates we could not
            reliably determine the date
        age (int): The number of days since the domain was registered. A
            domain age of under 90 days is generally considered to be
            potentially risky. A value of 0 indicates no registration date was
            found for this domain
        registrar_name (str): The name of the domain registrar owning this
            domain
        registrar_id (int): The IANA registrar ID (0 if no registrar ID was
            found)
        dns_provider (str): The primary domain of the DNS provider for this
            domain
        mail_provider (str): The primary domain of the email provider for this
            domain. An empty value indicates the domain has no valid MX records
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "domain": 'domain',
        "is_malicious": 'is-malicious',
        "blocklists": 'blocklists',
        "sensors": 'sensors',
        "valid": 'valid',
        "fqdn": 'fqdn',
        "is_subdomain": 'is-subdomain',
        "tld": 'tld',
        "tld_cc": 'tld-cc',
        "rank": 'rank',
        "is_gov": 'is-gov',
        "is_opennic": 'is-opennic',
        "is_pending": 'is-pending',
        "is_adult": 'is-adult',
        "registered_date": 'registered-date',
        "age": 'age',
        "registrar_name": 'registrar-name',
        "registrar_id": 'registrar-id',
        "dns_provider": 'dns-provider',
        "mail_provider": 'mail-provider'
    }

    def __init__(self,
                 domain=None,
                 is_malicious=None,
                 blocklists=None,
                 sensors=None,
                 valid=None,
                 fqdn=None,
                 is_subdomain=None,
                 tld=None,
                 tld_cc=None,
                 rank=None,
                 is_gov=None,
                 is_opennic=None,
                 is_pending=None,
                 is_adult=None,
                 registered_date=None,
                 age=None,
                 registrar_name=None,
                 registrar_id=None,
                 dns_provider=None,
                 mail_provider=None,
                 additional_properties=None):
        """Constructor for the DomainLookupResponse class"""

        # Initialize members of the class
        self.domain = domain 
        self.is_malicious = is_malicious 
        self.blocklists = blocklists 
        self.sensors = sensors 
        self.valid = valid 
        self.fqdn = fqdn 
        self.is_subdomain = is_subdomain 
        self.tld = tld 
        self.tld_cc = tld_cc 
        self.rank = rank 
        self.is_gov = is_gov 
        self.is_opennic = is_opennic 
        self.is_pending = is_pending 
        self.is_adult = is_adult 
        self.registered_date = registered_date 
        self.age = age 
        self.registrar_name = registrar_name 
        self.registrar_id = registrar_id 
        self.dns_provider = dns_provider 
        self.mail_provider = mail_provider 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        domain = dictionary.get("domain") if dictionary.get("domain") else None
        is_malicious = dictionary.get("is-malicious") if "is-malicious" in dictionary.keys() else None
        blocklists = dictionary.get("blocklists") if dictionary.get("blocklists") else None
        sensors = None
        if dictionary.get('sensors') is not None:
            sensors = [BlocklistSensor.from_dictionary(x) for x in dictionary.get('sensors')]
        valid = dictionary.get("valid") if "valid" in dictionary.keys() else None
        fqdn = dictionary.get("fqdn") if dictionary.get("fqdn") else None
        is_subdomain = dictionary.get("is-subdomain") if "is-subdomain" in dictionary.keys() else None
        tld = dictionary.get("tld") if dictionary.get("tld") else None
        tld_cc = dictionary.get("tld-cc") if dictionary.get("tld-cc") else None
        rank = dictionary.get("rank") if dictionary.get("rank") else None
        is_gov = dictionary.get("is-gov") if "is-gov" in dictionary.keys() else None
        is_opennic = dictionary.get("is-opennic") if "is-opennic" in dictionary.keys() else None
        is_pending = dictionary.get("is-pending") if "is-pending" in dictionary.keys() else None
        is_adult = dictionary.get("is-adult") if "is-adult" in dictionary.keys() else None
        registered_date = dictionary.get("registered-date") if dictionary.get("registered-date") else None
        age = dictionary.get("age") if dictionary.get("age") else None
        registrar_name = dictionary.get("registrar-name") if dictionary.get("registrar-name") else None
        registrar_id = dictionary.get("registrar-id") if dictionary.get("registrar-id") else None
        dns_provider = dictionary.get("dns-provider") if dictionary.get("dns-provider") else None
        mail_provider = dictionary.get("mail-provider") if dictionary.get("mail-provider") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(domain,
                   is_malicious,
                   blocklists,
                   sensors,
                   valid,
                   fqdn,
                   is_subdomain,
                   tld,
                   tld_cc,
                   rank,
                   is_gov,
                   is_opennic,
                   is_pending,
                   is_adult,
                   registered_date,
                   age,
                   registrar_name,
                   registrar_id,
                   dns_provider,
                   mail_provider,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'domain={self.domain!r}, '
                f'is_malicious={self.is_malicious!r}, '
                f'blocklists={self.blocklists!r}, '
                f'sensors={self.sensors!r}, '
                f'valid={self.valid!r}, '
                f'fqdn={self.fqdn!r}, '
                f'is_subdomain={self.is_subdomain!r}, '
                f'tld={self.tld!r}, '
                f'tld_cc={self.tld_cc!r}, '
                f'rank={self.rank!r}, '
                f'is_gov={self.is_gov!r}, '
                f'is_opennic={self.is_opennic!r}, '
                f'is_pending={self.is_pending!r}, '
                f'is_adult={self.is_adult!r}, '
                f'registered_date={self.registered_date!r}, '
                f'age={self.age!r}, '
                f'registrar_name={self.registrar_name!r}, '
                f'registrar_id={self.registrar_id!r}, '
                f'dns_provider={self.dns_provider!r}, '
                f'mail_provider={self.mail_provider!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'domain={self.domain!s}, '
                f'is_malicious={self.is_malicious!s}, '
                f'blocklists={self.blocklists!s}, '
                f'sensors={self.sensors!s}, '
                f'valid={self.valid!s}, '
                f'fqdn={self.fqdn!s}, '
                f'is_subdomain={self.is_subdomain!s}, '
                f'tld={self.tld!s}, '
                f'tld_cc={self.tld_cc!s}, '
                f'rank={self.rank!s}, '
                f'is_gov={self.is_gov!s}, '
                f'is_opennic={self.is_opennic!s}, '
                f'is_pending={self.is_pending!s}, '
                f'is_adult={self.is_adult!s}, '
                f'registered_date={self.registered_date!s}, '
                f'age={self.age!s}, '
                f'registrar_name={self.registrar_name!s}, '
                f'registrar_id={self.registrar_id!s}, '
                f'dns_provider={self.dns_provider!s}, '
                f'mail_provider={self.mail_provider!s}, '
                f'additional_properties={self.additional_properties!s})')
