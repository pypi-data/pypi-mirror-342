# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class BadWordFilterResponse(object):

    """Implementation of the 'BadWordFilterResponse' model.

    Structure of bad-word-filter

    Attributes:
        bad_words_list (List[str]): An array of the bad words found
        bad_words_total (int): Total number of bad words detected
        censored_content (str): The censored content (only set if
            censor-character has been set)
        is_bad (bool): Does the text contain bad words
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bad_words_list": 'bad-words-list',
        "bad_words_total": 'bad-words-total',
        "censored_content": 'censored-content',
        "is_bad": 'is-bad'
    }

    def __init__(self,
                 bad_words_list=None,
                 bad_words_total=None,
                 censored_content=None,
                 is_bad=None,
                 additional_properties=None):
        """Constructor for the BadWordFilterResponse class"""

        # Initialize members of the class
        self.bad_words_list = bad_words_list 
        self.bad_words_total = bad_words_total 
        self.censored_content = censored_content 
        self.is_bad = is_bad 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        bad_words_list = dictionary.get("bad-words-list") if dictionary.get("bad-words-list") else None
        bad_words_total = dictionary.get("bad-words-total") if dictionary.get("bad-words-total") else None
        censored_content = dictionary.get("censored-content") if dictionary.get("censored-content") else None
        is_bad = dictionary.get("is-bad") if "is-bad" in dictionary.keys() else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(bad_words_list,
                   bad_words_total,
                   censored_content,
                   is_bad,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'bad_words_list={self.bad_words_list!r}, '
                f'bad_words_total={self.bad_words_total!r}, '
                f'censored_content={self.censored_content!r}, '
                f'is_bad={self.is_bad!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'bad_words_list={self.bad_words_list!s}, '
                f'bad_words_total={self.bad_words_total!s}, '
                f'censored_content={self.censored_content!s}, '
                f'is_bad={self.is_bad!s}, '
                f'additional_properties={self.additional_properties!s})')
