# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class HlrLookupResponse(object):

    """Implementation of the 'HLRLookupResponse' model.

    Structure of hlr-lookup

    Attributes:
        number_valid (bool): True if this a valid phone number
        international_calling_code (str): The international calling code
        mnc (str): The mobile MNC number (Mobile Network Code)
        number_type (str): The number type, possible values are: <br> <ul>
            <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li>
            <li>toll-free</li> <li>voip</li> <li>unknown</li> </ul>
        hlr_valid (bool): Was the HLR lookup successful. If true then this is
            a working and registered cell-phone or mobile device (SMS and
            phone calls will be delivered)
        hlr_status (str): The HLR lookup status, possible values are: <br>
            <ul> <li>ok - the HLR lookup was successful and the device is
            connected</li> <li>absent - the number was once registered but the
            device has been switched off or out of network range for some
            time</li> <li>unknown - the number is not known by the mobile
            network</li> <li>invalid - the number is not a valid mobile MSISDN
            number</li> <li>fixed-line - the number is a registered fixed-line
            not mobile</li> <li>voip - the number has been detected as a VOIP
            line</li> <li>failed - the HLR lookup has failed, we could not
            determine the real status of this number</li> </ul>
        ported_network (str): The ported to network/carrier name (only set if
            the number has been ported)
        imsi (str): The mobile IMSI number (International Mobile Subscriber
            Identity)
        mcc (str): The mobile MCC number (Mobile Country Code)
        international_number (str): The number represented in full
            international format
        local_number (str): The number represented in local dialing format
        country_code (str): The number location as an ISO 2-letter country code
        is_ported (bool): Has this number been ported to another network
        msin (str): The mobile MSIN number (Mobile Subscription Identification
            Number)
        location (str): The number location. Could be a city, region or
            country depending on the type of number
        origin_network (str): The origin network/carrier name
        is_mobile (bool): True if this is a mobile number (only true with 100%
            certainty, if the number type is unknown this value will be false)
        is_roaming (bool): Is this number currently roaming from its origin
            country
        country (str): The phone number country
        country_code_3 (str): The number location as an ISO 3-letter country
            code
        currency_code (str): ISO 4217 currency code associated with the country
        roaming_country_code (str): If the number is currently roaming, the
            ISO 2-letter country code of the roaming in country
        msc (str): The mobile MSC number (Mobile Switching Center)
        current_network (str): The currently used network/carrier name
        network_tags (str): Contains any additional details about the current
            network such as former network names and mobile technology utilized
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "number_valid": 'number-valid',
        "international_calling_code": 'international-calling-code',
        "mnc": 'mnc',
        "number_type": 'number-type',
        "hlr_valid": 'hlr-valid',
        "hlr_status": 'hlr-status',
        "ported_network": 'ported-network',
        "imsi": 'imsi',
        "mcc": 'mcc',
        "international_number": 'international-number',
        "local_number": 'local-number',
        "country_code": 'country-code',
        "is_ported": 'is-ported',
        "msin": 'msin',
        "location": 'location',
        "origin_network": 'origin-network',
        "is_mobile": 'is-mobile',
        "is_roaming": 'is-roaming',
        "country": 'country',
        "country_code_3": 'country-code3',
        "currency_code": 'currency-code',
        "roaming_country_code": 'roaming-country-code',
        "msc": 'msc',
        "current_network": 'current-network',
        "network_tags": 'network-tags'
    }

    def __init__(self,
                 number_valid=None,
                 international_calling_code=None,
                 mnc=None,
                 number_type=None,
                 hlr_valid=None,
                 hlr_status=None,
                 ported_network=None,
                 imsi=None,
                 mcc=None,
                 international_number=None,
                 local_number=None,
                 country_code=None,
                 is_ported=None,
                 msin=None,
                 location=None,
                 origin_network=None,
                 is_mobile=None,
                 is_roaming=None,
                 country=None,
                 country_code_3=None,
                 currency_code=None,
                 roaming_country_code=None,
                 msc=None,
                 current_network=None,
                 network_tags=None,
                 additional_properties=None):
        """Constructor for the HlrLookupResponse class"""

        # Initialize members of the class
        self.number_valid = number_valid 
        self.international_calling_code = international_calling_code 
        self.mnc = mnc 
        self.number_type = number_type 
        self.hlr_valid = hlr_valid 
        self.hlr_status = hlr_status 
        self.ported_network = ported_network 
        self.imsi = imsi 
        self.mcc = mcc 
        self.international_number = international_number 
        self.local_number = local_number 
        self.country_code = country_code 
        self.is_ported = is_ported 
        self.msin = msin 
        self.location = location 
        self.origin_network = origin_network 
        self.is_mobile = is_mobile 
        self.is_roaming = is_roaming 
        self.country = country 
        self.country_code_3 = country_code_3 
        self.currency_code = currency_code 
        self.roaming_country_code = roaming_country_code 
        self.msc = msc 
        self.current_network = current_network 
        self.network_tags = network_tags 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        number_valid = dictionary.get("number-valid") if "number-valid" in dictionary.keys() else None
        international_calling_code = dictionary.get("international-calling-code") if dictionary.get("international-calling-code") else None
        mnc = dictionary.get("mnc") if dictionary.get("mnc") else None
        number_type = dictionary.get("number-type") if dictionary.get("number-type") else None
        hlr_valid = dictionary.get("hlr-valid") if "hlr-valid" in dictionary.keys() else None
        hlr_status = dictionary.get("hlr-status") if dictionary.get("hlr-status") else None
        ported_network = dictionary.get("ported-network") if dictionary.get("ported-network") else None
        imsi = dictionary.get("imsi") if dictionary.get("imsi") else None
        mcc = dictionary.get("mcc") if dictionary.get("mcc") else None
        international_number = dictionary.get("international-number") if dictionary.get("international-number") else None
        local_number = dictionary.get("local-number") if dictionary.get("local-number") else None
        country_code = dictionary.get("country-code") if dictionary.get("country-code") else None
        is_ported = dictionary.get("is-ported") if "is-ported" in dictionary.keys() else None
        msin = dictionary.get("msin") if dictionary.get("msin") else None
        location = dictionary.get("location") if dictionary.get("location") else None
        origin_network = dictionary.get("origin-network") if dictionary.get("origin-network") else None
        is_mobile = dictionary.get("is-mobile") if "is-mobile" in dictionary.keys() else None
        is_roaming = dictionary.get("is-roaming") if "is-roaming" in dictionary.keys() else None
        country = dictionary.get("country") if dictionary.get("country") else None
        country_code_3 = dictionary.get("country-code3") if dictionary.get("country-code3") else None
        currency_code = dictionary.get("currency-code") if dictionary.get("currency-code") else None
        roaming_country_code = dictionary.get("roaming-country-code") if dictionary.get("roaming-country-code") else None
        msc = dictionary.get("msc") if dictionary.get("msc") else None
        current_network = dictionary.get("current-network") if dictionary.get("current-network") else None
        network_tags = dictionary.get("network-tags") if dictionary.get("network-tags") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(number_valid,
                   international_calling_code,
                   mnc,
                   number_type,
                   hlr_valid,
                   hlr_status,
                   ported_network,
                   imsi,
                   mcc,
                   international_number,
                   local_number,
                   country_code,
                   is_ported,
                   msin,
                   location,
                   origin_network,
                   is_mobile,
                   is_roaming,
                   country,
                   country_code_3,
                   currency_code,
                   roaming_country_code,
                   msc,
                   current_network,
                   network_tags,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'number_valid={self.number_valid!r}, '
                f'international_calling_code={self.international_calling_code!r}, '
                f'mnc={self.mnc!r}, '
                f'number_type={self.number_type!r}, '
                f'hlr_valid={self.hlr_valid!r}, '
                f'hlr_status={self.hlr_status!r}, '
                f'ported_network={self.ported_network!r}, '
                f'imsi={self.imsi!r}, '
                f'mcc={self.mcc!r}, '
                f'international_number={self.international_number!r}, '
                f'local_number={self.local_number!r}, '
                f'country_code={self.country_code!r}, '
                f'is_ported={self.is_ported!r}, '
                f'msin={self.msin!r}, '
                f'location={self.location!r}, '
                f'origin_network={self.origin_network!r}, '
                f'is_mobile={self.is_mobile!r}, '
                f'is_roaming={self.is_roaming!r}, '
                f'country={self.country!r}, '
                f'country_code_3={self.country_code_3!r}, '
                f'currency_code={self.currency_code!r}, '
                f'roaming_country_code={self.roaming_country_code!r}, '
                f'msc={self.msc!r}, '
                f'current_network={self.current_network!r}, '
                f'network_tags={self.network_tags!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'number_valid={self.number_valid!s}, '
                f'international_calling_code={self.international_calling_code!s}, '
                f'mnc={self.mnc!s}, '
                f'number_type={self.number_type!s}, '
                f'hlr_valid={self.hlr_valid!s}, '
                f'hlr_status={self.hlr_status!s}, '
                f'ported_network={self.ported_network!s}, '
                f'imsi={self.imsi!s}, '
                f'mcc={self.mcc!s}, '
                f'international_number={self.international_number!s}, '
                f'local_number={self.local_number!s}, '
                f'country_code={self.country_code!s}, '
                f'is_ported={self.is_ported!s}, '
                f'msin={self.msin!s}, '
                f'location={self.location!s}, '
                f'origin_network={self.origin_network!s}, '
                f'is_mobile={self.is_mobile!s}, '
                f'is_roaming={self.is_roaming!s}, '
                f'country={self.country!s}, '
                f'country_code_3={self.country_code_3!s}, '
                f'currency_code={self.currency_code!s}, '
                f'roaming_country_code={self.roaming_country_code!s}, '
                f'msc={self.msc!s}, '
                f'current_network={self.current_network!s}, '
                f'network_tags={self.network_tags!s}, '
                f'additional_properties={self.additional_properties!s})')
