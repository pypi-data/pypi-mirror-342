# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper
from neutrinoapi.models.timezone import Timezone


class Location(object):

    """Implementation of the 'Location' model.

    Structure of locations

    Attributes:
        country (str): The country of the location
        address (str): The complete address using comma-separated values
        city (str): The city of the location
        country_code (str): The ISO 2-letter country code of the location
        country_code_3 (str): The ISO 3-letter country code of the location
        latitude (float): The location latitude
        postal_code (str): The postal code for the location
        longitude (float): The location longitude
        state (str): The state of the location
        address_components (Dict[str, str]): The components which make up the
            address such as road, city, state, etc
        currency_code (str): ISO 4217 currency code associated with the country
        location_type (str): The detected location type ordered roughly from
            most to least precise, possible values are: <br> <ul> <li>address
            - indicates a precise street address</li> <li>street - accurate to
            the street level but may not point to the exact location of the
            house/building number</li> <li>city - accurate to the city level,
            this includes villages, towns, suburbs, etc</li> <li>postal-code -
            indicates a postal code area (no house or street information
            present)</li> <li>railway - location is part of a rail network
            such as a station or railway track</li> <li>natural - indicates a
            natural feature, for example a mountain peak or a waterway</li>
            <li>island - location is an island or archipelago</li>
            <li>administrative - indicates an administrative boundary such as
            a country, state or province</li> </ul>
        location_tags (List[str]): Array of strings containing any location
            tags associated with the address. Tags are additional pieces of
            metadata about a specific location, there are thousands of
            different tags. Some examples of tags: shop, office, cafe, bank,
            pub
        timezone (Timezone): Structure of timezone
        region_code (str): The ISO 3166-2 region code for the location
        postal_address (str): The formatted address using local standards
            suitable for printing on an envelope
        language_code (str): The ISO 2-letter language code for the official
            language spoken in the country
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "country": 'country',
        "address": 'address',
        "city": 'city',
        "country_code": 'country-code',
        "country_code_3": 'country-code3',
        "latitude": 'latitude',
        "postal_code": 'postal-code',
        "longitude": 'longitude',
        "state": 'state',
        "address_components": 'address-components',
        "currency_code": 'currency-code',
        "location_type": 'location-type',
        "location_tags": 'location-tags',
        "timezone": 'timezone',
        "region_code": 'region-code',
        "postal_address": 'postal-address',
        "language_code": 'language-code'
    }

    def __init__(self,
                 country=None,
                 address=None,
                 city=None,
                 country_code=None,
                 country_code_3=None,
                 latitude=None,
                 postal_code=None,
                 longitude=None,
                 state=None,
                 address_components=None,
                 currency_code=None,
                 location_type=None,
                 location_tags=None,
                 timezone=None,
                 region_code=None,
                 postal_address=None,
                 language_code=None,
                 additional_properties=None):
        """Constructor for the Location class"""

        # Initialize members of the class
        self.country = country 
        self.address = address 
        self.city = city 
        self.country_code = country_code 
        self.country_code_3 = country_code_3 
        self.latitude = latitude 
        self.postal_code = postal_code 
        self.longitude = longitude 
        self.state = state 
        self.address_components = address_components 
        self.currency_code = currency_code 
        self.location_type = location_type 
        self.location_tags = location_tags 
        self.timezone = timezone 
        self.region_code = region_code 
        self.postal_address = postal_address 
        self.language_code = language_code 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        country = dictionary.get("country") if dictionary.get("country") else None
        address = dictionary.get("address") if dictionary.get("address") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        country_code = dictionary.get("country-code") if dictionary.get("country-code") else None
        country_code_3 = dictionary.get("country-code3") if dictionary.get("country-code3") else None
        latitude = dictionary.get("latitude") if dictionary.get("latitude") else None
        postal_code = dictionary.get("postal-code") if dictionary.get("postal-code") else None
        longitude = dictionary.get("longitude") if dictionary.get("longitude") else None
        state = dictionary.get("state") if dictionary.get("state") else None
        address_components = dictionary.get("address-components") if dictionary.get("address-components") else None
        currency_code = dictionary.get("currency-code") if dictionary.get("currency-code") else None
        location_type = dictionary.get("location-type") if dictionary.get("location-type") else None
        location_tags = dictionary.get("location-tags") if dictionary.get("location-tags") else None
        timezone = Timezone.from_dictionary(dictionary.get('timezone')) if dictionary.get('timezone') else None
        region_code = dictionary.get("region-code") if dictionary.get("region-code") else None
        postal_address = dictionary.get("postal-address") if dictionary.get("postal-address") else None
        language_code = dictionary.get("language-code") if dictionary.get("language-code") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(country,
                   address,
                   city,
                   country_code,
                   country_code_3,
                   latitude,
                   postal_code,
                   longitude,
                   state,
                   address_components,
                   currency_code,
                   location_type,
                   location_tags,
                   timezone,
                   region_code,
                   postal_address,
                   language_code,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'country={self.country!r}, '
                f'address={self.address!r}, '
                f'city={self.city!r}, '
                f'country_code={self.country_code!r}, '
                f'country_code_3={self.country_code_3!r}, '
                f'latitude={self.latitude!r}, '
                f'postal_code={self.postal_code!r}, '
                f'longitude={self.longitude!r}, '
                f'state={self.state!r}, '
                f'address_components={self.address_components!r}, '
                f'currency_code={self.currency_code!r}, '
                f'location_type={self.location_type!r}, '
                f'location_tags={self.location_tags!r}, '
                f'timezone={self.timezone!r}, '
                f'region_code={self.region_code!r}, '
                f'postal_address={self.postal_address!r}, '
                f'language_code={self.language_code!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'country={self.country!s}, '
                f'address={self.address!s}, '
                f'city={self.city!s}, '
                f'country_code={self.country_code!s}, '
                f'country_code_3={self.country_code_3!s}, '
                f'latitude={self.latitude!s}, '
                f'postal_code={self.postal_code!s}, '
                f'longitude={self.longitude!s}, '
                f'state={self.state!s}, '
                f'address_components={self.address_components!s}, '
                f'currency_code={self.currency_code!s}, '
                f'location_type={self.location_type!s}, '
                f'location_tags={self.location_tags!s}, '
                f'timezone={self.timezone!s}, '
                f'region_code={self.region_code!s}, '
                f'postal_address={self.postal_address!s}, '
                f'language_code={self.language_code!s}, '
                f'additional_properties={self.additional_properties!s})')
