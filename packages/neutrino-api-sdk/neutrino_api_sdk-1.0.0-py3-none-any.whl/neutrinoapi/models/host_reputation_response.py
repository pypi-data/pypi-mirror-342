# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper
from neutrinoapi.models.blacklist import Blacklist


class HostReputationResponse(object):

    """Implementation of the 'HostReputationResponse' model.

    Structure of host-reputation

    Attributes:
        is_listed (bool): Is this host blacklisted
        lists (List[Blacklist]): Array of objects for each DNSBL checked
        list_count (int): The number of DNSBLs the host is listed on
        host (str): The IP address or host name
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "is_listed": 'is-listed',
        "lists": 'lists',
        "list_count": 'list-count',
        "host": 'host'
    }

    def __init__(self,
                 is_listed=None,
                 lists=None,
                 list_count=None,
                 host=None,
                 additional_properties=None):
        """Constructor for the HostReputationResponse class"""

        # Initialize members of the class
        self.is_listed = is_listed 
        self.lists = lists 
        self.list_count = list_count 
        self.host = host 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        is_listed = dictionary.get("is-listed") if "is-listed" in dictionary.keys() else None
        lists = None
        if dictionary.get('lists') is not None:
            lists = [Blacklist.from_dictionary(x) for x in dictionary.get('lists')]
        list_count = dictionary.get("list-count") if dictionary.get("list-count") else None
        host = dictionary.get("host") if dictionary.get("host") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(is_listed,
                   lists,
                   list_count,
                   host,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'is_listed={self.is_listed!r}, '
                f'lists={self.lists!r}, '
                f'list_count={self.list_count!r}, '
                f'host={self.host!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'is_listed={self.is_listed!s}, '
                f'lists={self.lists!s}, '
                f'list_count={self.list_count!s}, '
                f'host={self.host!s}, '
                f'additional_properties={self.additional_properties!s})')
