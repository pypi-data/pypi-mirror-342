# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from neutrinoapi.configuration import Configuration
from neutrinoapi.controllers.base_controller import BaseController
from neutrinoapi.configuration import Environment
from neutrinoapi.http.auth.user_id import UserId
from neutrinoapi.http.auth.api_key import ApiKey
from neutrinoapi.controllers.imaging_controller import ImagingController
from neutrinoapi.controllers.telephony_controller import TelephonyController
from neutrinoapi.controllers.data_tools_controller import DataToolsController
from neutrinoapi.controllers.security_and_networking_controller\
    import SecurityAndNetworkingController
from neutrinoapi.controllers.geolocation_controller\
    import GeolocationController
from neutrinoapi.controllers.e_commerce_controller import ECommerceController
from neutrinoapi.controllers.www_controller import WwwController


class NeutrinoapiClient(object):
    @LazyProperty
    def imaging(self):
        return ImagingController(self.global_configuration)

    @LazyProperty
    def telephony(self):
        return TelephonyController(self.global_configuration)

    @LazyProperty
    def data_tools(self):
        return DataToolsController(self.global_configuration)

    @LazyProperty
    def security_and_networking(self):
        return SecurityAndNetworkingController(self.global_configuration)

    @LazyProperty
    def geolocation(self):
        return GeolocationController(self.global_configuration)

    @LazyProperty
    def e_commerce(self):
        return ECommerceController(self.global_configuration)

    @LazyProperty
    def www(self):
        return WwwController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 logging_configuration=None, environment=Environment.MULTICLOUD,
                 user_id_credentials=None, api_key_credentials=None,
                 config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            logging_configuration=logging_configuration,
            environment=environment, user_id_credentials=user_id_credentials,
            api_key_credentials=api_key_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['user-id', 'api-key']}
        self.auth_managers['user-id'] = UserId(self.config.user_id_credentials)
        self.auth_managers['api-key'] = ApiKey(self.config.api_key_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

