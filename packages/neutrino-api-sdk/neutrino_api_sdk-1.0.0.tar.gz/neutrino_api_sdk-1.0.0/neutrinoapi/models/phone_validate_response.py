# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class PhoneValidateResponse(object):

    """Implementation of the 'PhoneValidateResponse' model.

    Structure of phone-validate

    Attributes:
        valid (bool): Is this a valid phone number
        international_calling_code (str): The international calling code
        country_code (str): The phone number country as an ISO 2-letter
            country code
        location (str): The phone number location. Could be the city, region
            or country depending on the type of number
        is_mobile (bool): True if this is a mobile number. If the number type
            is unknown this value will be false
        mtype (str): The number type based on the number prefix. <br>Possible
            values are: <br> <ul> <li>mobile</li> <li>fixed-line</li>
            <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown
            (use HLR lookup)</li> </ul>
        international_number (str): The number represented in full
            international format (E.164)
        local_number (str): The number represented in local dialing format
        country (str): The phone number country
        country_code_3 (str): The phone number country as an ISO 3-letter
            country code
        currency_code (str): ISO 4217 currency code associated with the country
        prefix_network (str): The network/carrier who owns the prefix (this
            only works for some countries, use HLR lookup for global network
            detection)
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "valid": 'valid',
        "international_calling_code": 'international-calling-code',
        "country_code": 'country-code',
        "location": 'location',
        "is_mobile": 'is-mobile',
        "mtype": 'type',
        "international_number": 'international-number',
        "local_number": 'local-number',
        "country": 'country',
        "country_code_3": 'country-code3',
        "currency_code": 'currency-code',
        "prefix_network": 'prefix-network'
    }

    def __init__(self,
                 valid=None,
                 international_calling_code=None,
                 country_code=None,
                 location=None,
                 is_mobile=None,
                 mtype=None,
                 international_number=None,
                 local_number=None,
                 country=None,
                 country_code_3=None,
                 currency_code=None,
                 prefix_network=None,
                 additional_properties=None):
        """Constructor for the PhoneValidateResponse class"""

        # Initialize members of the class
        self.valid = valid 
        self.international_calling_code = international_calling_code 
        self.country_code = country_code 
        self.location = location 
        self.is_mobile = is_mobile 
        self.mtype = mtype 
        self.international_number = international_number 
        self.local_number = local_number 
        self.country = country 
        self.country_code_3 = country_code_3 
        self.currency_code = currency_code 
        self.prefix_network = prefix_network 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        valid = dictionary.get("valid") if "valid" in dictionary.keys() else None
        international_calling_code = dictionary.get("international-calling-code") if dictionary.get("international-calling-code") else None
        country_code = dictionary.get("country-code") if dictionary.get("country-code") else None
        location = dictionary.get("location") if dictionary.get("location") else None
        is_mobile = dictionary.get("is-mobile") if "is-mobile" in dictionary.keys() else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        international_number = dictionary.get("international-number") if dictionary.get("international-number") else None
        local_number = dictionary.get("local-number") if dictionary.get("local-number") else None
        country = dictionary.get("country") if dictionary.get("country") else None
        country_code_3 = dictionary.get("country-code3") if dictionary.get("country-code3") else None
        currency_code = dictionary.get("currency-code") if dictionary.get("currency-code") else None
        prefix_network = dictionary.get("prefix-network") if dictionary.get("prefix-network") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(valid,
                   international_calling_code,
                   country_code,
                   location,
                   is_mobile,
                   mtype,
                   international_number,
                   local_number,
                   country,
                   country_code_3,
                   currency_code,
                   prefix_network,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'valid={self.valid!r}, '
                f'international_calling_code={self.international_calling_code!r}, '
                f'country_code={self.country_code!r}, '
                f'location={self.location!r}, '
                f'is_mobile={self.is_mobile!r}, '
                f'mtype={self.mtype!r}, '
                f'international_number={self.international_number!r}, '
                f'local_number={self.local_number!r}, '
                f'country={self.country!r}, '
                f'country_code_3={self.country_code_3!r}, '
                f'currency_code={self.currency_code!r}, '
                f'prefix_network={self.prefix_network!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'valid={self.valid!s}, '
                f'international_calling_code={self.international_calling_code!s}, '
                f'country_code={self.country_code!s}, '
                f'location={self.location!s}, '
                f'is_mobile={self.is_mobile!s}, '
                f'mtype={self.mtype!s}, '
                f'international_number={self.international_number!s}, '
                f'local_number={self.local_number!s}, '
                f'country={self.country!s}, '
                f'country_code_3={self.country_code_3!s}, '
                f'currency_code={self.currency_code!s}, '
                f'prefix_network={self.prefix_network!s}, '
                f'additional_properties={self.additional_properties!s})')
