# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper
from neutrinoapi.models.blocklist_sensor import BlocklistSensor


class IpBlocklistResponse(object):

    """Implementation of the 'IPBlocklistResponse' model.

    Structure of ip-blocklist

    Attributes:
        ip (str): The IP address
        is_bot (bool): IP is hosting a malicious bot or is part of a botnet.
            This is a broad category which includes brute-force crackers
        is_exploit_bot (bool): IP is hosting an exploit finding bot or is
            running exploit scanning software
        is_malware (bool): IP is involved in distributing or is running malware
        is_spider (bool): IP is running a hostile web spider / web crawler
        is_dshield (bool): IP has been flagged as a significant attack source
            by DShield (dshield.org)
        list_count (int): The number of blocklists the IP is listed on
        is_proxy (bool): IP has been detected as an anonymous web proxy or
            anonymous HTTP proxy
        is_hijacked (bool): IP is part of a hijacked netblock or a netblock
            controlled by a criminal organization
        is_tor (bool): IP is a Tor node or running a Tor related service
        is_spyware (bool): IP is involved in distributing or is running spyware
        is_spam_bot (bool): IP address is hosting a spam bot, comment spamming
            or any other spamming type software
        is_listed (bool): Is this IP on a blocklist
        is_vpn (bool): IP belongs to a public VPN provider (only set if the
            'vpn-lookup' option is enabled)
        last_seen (int): The unix time when this IP was last seen on any
            blocklist. IPs are automatically removed after 7 days therefor
            this value will never be older than 7 days
        blocklists (List[str]): An array of strings indicating which blocklist
            categories this IP is listed on. Current possible values are: <br>
            <ul> <li>tor - IP is a Tor node or running a Tor related
            service</li> <li>proxy - IP has been detected as an anonymous web
            proxy or HTTP proxy</li> <li>vpn - IP belongs to a public VPN
            provider</li> <li>bot - IP is hosting a malicious bot or is part
            of a botnet. This is a broad category which includes brute-force
            crackers</li> <li>spam-bot - IP address is hosting a spam bot,
            comment spamming or any other spamming type software</li>
            <li>exploit-bot - IP is hosting an exploit finding bot or is
            running exploit scanning software</li> <li>hijacked - IP is part
            of a hijacked netblock or a netblock controlled by a criminal
            organization</li> <li>malware - IP is currently involved in
            distributing or is running malware</li> <li>spyware - IP is
            currently involved in distributing or is running spyware</li>
            <li>spider - IP is running a hostile web spider / web crawler</li>
            <li>dshield - IP has been flagged as a significant attack source
            by DShield (dshield.org)</li> </ul>
        sensors (List[BlocklistSensor]): An array of objects containing
            details on which specific sensors detected the IP
        cidr (str): The CIDR address for this listing (only set if the IP is
            listed)
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ip": 'ip',
        "is_bot": 'is-bot',
        "is_exploit_bot": 'is-exploit-bot',
        "is_malware": 'is-malware',
        "is_spider": 'is-spider',
        "is_dshield": 'is-dshield',
        "list_count": 'list-count',
        "is_proxy": 'is-proxy',
        "is_hijacked": 'is-hijacked',
        "is_tor": 'is-tor',
        "is_spyware": 'is-spyware',
        "is_spam_bot": 'is-spam-bot',
        "is_listed": 'is-listed',
        "is_vpn": 'is-vpn',
        "last_seen": 'last-seen',
        "blocklists": 'blocklists',
        "sensors": 'sensors',
        "cidr": 'cidr'
    }

    def __init__(self,
                 ip=None,
                 is_bot=None,
                 is_exploit_bot=None,
                 is_malware=None,
                 is_spider=None,
                 is_dshield=None,
                 list_count=None,
                 is_proxy=None,
                 is_hijacked=None,
                 is_tor=None,
                 is_spyware=None,
                 is_spam_bot=None,
                 is_listed=None,
                 is_vpn=None,
                 last_seen=None,
                 blocklists=None,
                 sensors=None,
                 cidr=None,
                 additional_properties=None):
        """Constructor for the IpBlocklistResponse class"""

        # Initialize members of the class
        self.ip = ip 
        self.is_bot = is_bot 
        self.is_exploit_bot = is_exploit_bot 
        self.is_malware = is_malware 
        self.is_spider = is_spider 
        self.is_dshield = is_dshield 
        self.list_count = list_count 
        self.is_proxy = is_proxy 
        self.is_hijacked = is_hijacked 
        self.is_tor = is_tor 
        self.is_spyware = is_spyware 
        self.is_spam_bot = is_spam_bot 
        self.is_listed = is_listed 
        self.is_vpn = is_vpn 
        self.last_seen = last_seen 
        self.blocklists = blocklists 
        self.sensors = sensors 
        self.cidr = cidr 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        ip = dictionary.get("ip") if dictionary.get("ip") else None
        is_bot = dictionary.get("is-bot") if "is-bot" in dictionary.keys() else None
        is_exploit_bot = dictionary.get("is-exploit-bot") if "is-exploit-bot" in dictionary.keys() else None
        is_malware = dictionary.get("is-malware") if "is-malware" in dictionary.keys() else None
        is_spider = dictionary.get("is-spider") if "is-spider" in dictionary.keys() else None
        is_dshield = dictionary.get("is-dshield") if "is-dshield" in dictionary.keys() else None
        list_count = dictionary.get("list-count") if dictionary.get("list-count") else None
        is_proxy = dictionary.get("is-proxy") if "is-proxy" in dictionary.keys() else None
        is_hijacked = dictionary.get("is-hijacked") if "is-hijacked" in dictionary.keys() else None
        is_tor = dictionary.get("is-tor") if "is-tor" in dictionary.keys() else None
        is_spyware = dictionary.get("is-spyware") if "is-spyware" in dictionary.keys() else None
        is_spam_bot = dictionary.get("is-spam-bot") if "is-spam-bot" in dictionary.keys() else None
        is_listed = dictionary.get("is-listed") if "is-listed" in dictionary.keys() else None
        is_vpn = dictionary.get("is-vpn") if "is-vpn" in dictionary.keys() else None
        last_seen = dictionary.get("last-seen") if dictionary.get("last-seen") else None
        blocklists = dictionary.get("blocklists") if dictionary.get("blocklists") else None
        sensors = None
        if dictionary.get('sensors') is not None:
            sensors = [BlocklistSensor.from_dictionary(x) for x in dictionary.get('sensors')]
        cidr = dictionary.get("cidr") if dictionary.get("cidr") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(ip,
                   is_bot,
                   is_exploit_bot,
                   is_malware,
                   is_spider,
                   is_dshield,
                   list_count,
                   is_proxy,
                   is_hijacked,
                   is_tor,
                   is_spyware,
                   is_spam_bot,
                   is_listed,
                   is_vpn,
                   last_seen,
                   blocklists,
                   sensors,
                   cidr,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'ip={self.ip!r}, '
                f'is_bot={self.is_bot!r}, '
                f'is_exploit_bot={self.is_exploit_bot!r}, '
                f'is_malware={self.is_malware!r}, '
                f'is_spider={self.is_spider!r}, '
                f'is_dshield={self.is_dshield!r}, '
                f'list_count={self.list_count!r}, '
                f'is_proxy={self.is_proxy!r}, '
                f'is_hijacked={self.is_hijacked!r}, '
                f'is_tor={self.is_tor!r}, '
                f'is_spyware={self.is_spyware!r}, '
                f'is_spam_bot={self.is_spam_bot!r}, '
                f'is_listed={self.is_listed!r}, '
                f'is_vpn={self.is_vpn!r}, '
                f'last_seen={self.last_seen!r}, '
                f'blocklists={self.blocklists!r}, '
                f'sensors={self.sensors!r}, '
                f'cidr={self.cidr!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'ip={self.ip!s}, '
                f'is_bot={self.is_bot!s}, '
                f'is_exploit_bot={self.is_exploit_bot!s}, '
                f'is_malware={self.is_malware!s}, '
                f'is_spider={self.is_spider!s}, '
                f'is_dshield={self.is_dshield!s}, '
                f'list_count={self.list_count!s}, '
                f'is_proxy={self.is_proxy!s}, '
                f'is_hijacked={self.is_hijacked!s}, '
                f'is_tor={self.is_tor!s}, '
                f'is_spyware={self.is_spyware!s}, '
                f'is_spam_bot={self.is_spam_bot!s}, '
                f'is_listed={self.is_listed!s}, '
                f'is_vpn={self.is_vpn!s}, '
                f'last_seen={self.last_seen!s}, '
                f'blocklists={self.blocklists!s}, '
                f'sensors={self.sensors!s}, '
                f'cidr={self.cidr!s}, '
                f'additional_properties={self.additional_properties!s})')
