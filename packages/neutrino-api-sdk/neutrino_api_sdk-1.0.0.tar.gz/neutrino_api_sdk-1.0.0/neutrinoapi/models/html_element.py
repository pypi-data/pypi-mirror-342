# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class HtmlElement(object):

    """Implementation of the 'HTMLElement' model.

    Structure of elements

    Attributes:
        mclass (str): The 'class' attribute of the element
        href (str): The 'href' attribute of the element
        html (str): The raw HTML of the element
        id (str): The 'id' attribute of the element
        text (str): The plain-text content of the element with normalized
            whitespace
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mclass": 'class',
        "href": 'href',
        "html": 'html',
        "id": 'id',
        "text": 'text'
    }

    def __init__(self,
                 mclass=None,
                 href=None,
                 html=None,
                 id=None,
                 text=None,
                 additional_properties=None):
        """Constructor for the HtmlElement class"""

        # Initialize members of the class
        self.mclass = mclass 
        self.href = href 
        self.html = html 
        self.id = id 
        self.text = text 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mclass = dictionary.get("class") if dictionary.get("class") else None
        href = dictionary.get("href") if dictionary.get("href") else None
        html = dictionary.get("html") if dictionary.get("html") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        text = dictionary.get("text") if dictionary.get("text") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(mclass,
                   href,
                   html,
                   id,
                   text,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mclass={self.mclass!r}, '
                f'href={self.href!r}, '
                f'html={self.html!r}, '
                f'id={self.id!r}, '
                f'text={self.text!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mclass={self.mclass!s}, '
                f'href={self.href!s}, '
                f'html={self.html!s}, '
                f'id={self.id!s}, '
                f'text={self.text!s}, '
                f'additional_properties={self.additional_properties!s})')
