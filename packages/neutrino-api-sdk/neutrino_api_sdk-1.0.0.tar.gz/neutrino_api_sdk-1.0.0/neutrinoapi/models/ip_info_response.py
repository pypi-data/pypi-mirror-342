# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper
from neutrinoapi.models.timezone import Timezone


class IpInfoResponse(object):

    """Implementation of the 'IPInfoResponse' model.

    Structure of ip-info

    Attributes:
        valid (bool): True if this is a valid IPv4 or IPv6 address
        country (str): Full country name
        hostname (str): The IPs full hostname (only set if reverse-lookup has
            been used)
        city (str): Name of the city (if detectable)
        country_code (str): ISO 2-letter country code
        latitude (float): Location latitude
        region (str): Name of the region (if detectable)
        longitude (float): Location longitude
        continent_code (str): ISO 2-letter continent code
        ip (str): The IPv4 or IPv6 address returned
        country_code_3 (str): ISO 3-letter country code
        currency_code (str): ISO 4217 currency code associated with the country
        host_domain (str): The IPs host domain (only set if reverse-lookup has
            been used)
        timezone (Timezone): Structure of timezone
        is_v_6 (bool): True if this is a IPv6 address. False if IPv4
        is_v_4_mapped (bool): True if this is a <a
            href="https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses
            ">IPv4 mapped IPv6 address</a>
        is_bogon (bool): True if this is a bogon IP address such as a private
            network, local network or reserved address
        region_code (str): ISO 3166-2 region code (if detectable)
        language_code (str): The ISO 2-letter language code for the official
            language spoken in the country
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "valid": 'valid',
        "country": 'country',
        "hostname": 'hostname',
        "city": 'city',
        "country_code": 'country-code',
        "latitude": 'latitude',
        "region": 'region',
        "longitude": 'longitude',
        "continent_code": 'continent-code',
        "ip": 'ip',
        "country_code_3": 'country-code3',
        "currency_code": 'currency-code',
        "host_domain": 'host-domain',
        "timezone": 'timezone',
        "is_v_6": 'is-v6',
        "is_v_4_mapped": 'is-v4-mapped',
        "is_bogon": 'is-bogon',
        "region_code": 'region-code',
        "language_code": 'language-code'
    }

    def __init__(self,
                 valid=None,
                 country=None,
                 hostname=None,
                 city=None,
                 country_code=None,
                 latitude=None,
                 region=None,
                 longitude=None,
                 continent_code=None,
                 ip=None,
                 country_code_3=None,
                 currency_code=None,
                 host_domain=None,
                 timezone=None,
                 is_v_6=None,
                 is_v_4_mapped=None,
                 is_bogon=None,
                 region_code=None,
                 language_code=None,
                 additional_properties=None):
        """Constructor for the IpInfoResponse class"""

        # Initialize members of the class
        self.valid = valid 
        self.country = country 
        self.hostname = hostname 
        self.city = city 
        self.country_code = country_code 
        self.latitude = latitude 
        self.region = region 
        self.longitude = longitude 
        self.continent_code = continent_code 
        self.ip = ip 
        self.country_code_3 = country_code_3 
        self.currency_code = currency_code 
        self.host_domain = host_domain 
        self.timezone = timezone 
        self.is_v_6 = is_v_6 
        self.is_v_4_mapped = is_v_4_mapped 
        self.is_bogon = is_bogon 
        self.region_code = region_code 
        self.language_code = language_code 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        valid = dictionary.get("valid") if "valid" in dictionary.keys() else None
        country = dictionary.get("country") if dictionary.get("country") else None
        hostname = dictionary.get("hostname") if dictionary.get("hostname") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        country_code = dictionary.get("country-code") if dictionary.get("country-code") else None
        latitude = dictionary.get("latitude") if dictionary.get("latitude") else None
        region = dictionary.get("region") if dictionary.get("region") else None
        longitude = dictionary.get("longitude") if dictionary.get("longitude") else None
        continent_code = dictionary.get("continent-code") if dictionary.get("continent-code") else None
        ip = dictionary.get("ip") if dictionary.get("ip") else None
        country_code_3 = dictionary.get("country-code3") if dictionary.get("country-code3") else None
        currency_code = dictionary.get("currency-code") if dictionary.get("currency-code") else None
        host_domain = dictionary.get("host-domain") if dictionary.get("host-domain") else None
        timezone = Timezone.from_dictionary(dictionary.get('timezone')) if dictionary.get('timezone') else None
        is_v_6 = dictionary.get("is-v6") if "is-v6" in dictionary.keys() else None
        is_v_4_mapped = dictionary.get("is-v4-mapped") if "is-v4-mapped" in dictionary.keys() else None
        is_bogon = dictionary.get("is-bogon") if "is-bogon" in dictionary.keys() else None
        region_code = dictionary.get("region-code") if dictionary.get("region-code") else None
        language_code = dictionary.get("language-code") if dictionary.get("language-code") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(valid,
                   country,
                   hostname,
                   city,
                   country_code,
                   latitude,
                   region,
                   longitude,
                   continent_code,
                   ip,
                   country_code_3,
                   currency_code,
                   host_domain,
                   timezone,
                   is_v_6,
                   is_v_4_mapped,
                   is_bogon,
                   region_code,
                   language_code,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'valid={self.valid!r}, '
                f'country={self.country!r}, '
                f'hostname={self.hostname!r}, '
                f'city={self.city!r}, '
                f'country_code={self.country_code!r}, '
                f'latitude={self.latitude!r}, '
                f'region={self.region!r}, '
                f'longitude={self.longitude!r}, '
                f'continent_code={self.continent_code!r}, '
                f'ip={self.ip!r}, '
                f'country_code_3={self.country_code_3!r}, '
                f'currency_code={self.currency_code!r}, '
                f'host_domain={self.host_domain!r}, '
                f'timezone={self.timezone!r}, '
                f'is_v_6={self.is_v_6!r}, '
                f'is_v_4_mapped={self.is_v_4_mapped!r}, '
                f'is_bogon={self.is_bogon!r}, '
                f'region_code={self.region_code!r}, '
                f'language_code={self.language_code!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'valid={self.valid!s}, '
                f'country={self.country!s}, '
                f'hostname={self.hostname!s}, '
                f'city={self.city!s}, '
                f'country_code={self.country_code!s}, '
                f'latitude={self.latitude!s}, '
                f'region={self.region!s}, '
                f'longitude={self.longitude!s}, '
                f'continent_code={self.continent_code!s}, '
                f'ip={self.ip!s}, '
                f'country_code_3={self.country_code_3!s}, '
                f'currency_code={self.currency_code!s}, '
                f'host_domain={self.host_domain!s}, '
                f'timezone={self.timezone!s}, '
                f'is_v_6={self.is_v_6!s}, '
                f'is_v_4_mapped={self.is_v_4_mapped!s}, '
                f'is_bogon={self.is_bogon!s}, '
                f'region_code={self.region_code!s}, '
                f'language_code={self.language_code!s}, '
                f'additional_properties={self.additional_properties!s})')
