# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class BinLookupResponse(object):

    """Implementation of the 'BINLookupResponse' model.

    Structure of bin-lookup

    Attributes:
        country (str): The full country name of the issuer
        ip_city (str): The city of the customers IP (if detectable)
        ip_matches_bin (bool): True if the customers IP country matches the
            BIN country
        card_type (str): The card type, will always be one of: DEBIT, CREDIT,
            CHARGE CARD
        card_category (str): The card category. There are many different card
            categories the most common card categories are: CLASSIC, BUSINESS,
            CORPORATE, PLATINUM, PREPAID
        ip_country_code (str): The ISO 2-letter country code of the customers
            IP
        ip_country (str): The country of the customers IP
        issuer (str): The card issuer
        ip_blocklisted (bool): True if the customers IP is listed on one of
            our blocklists, see the <a
            href="http://www.neutrinoapi.com/api/ip-blocklist/">IP Blocklist
            API</a>
        valid (bool): Is this a valid BIN or IIN number
        ip_blocklists (List[str]): An array of strings indicating which
            blocklists this IP is listed on
        issuer_website (str): The card issuers website
        country_code (str): The ISO 2-letter country code of the issuer
        ip_region (str): The region of the customers IP (if detectable)
        card_brand (str): The card brand (e.g. Visa or Mastercard)
        issuer_phone (str): The card issuers phone number
        country_code_3 (str): The ISO 3-letter country code of the issuer
        currency_code (str): ISO 4217 currency code associated with the
            country of the issuer
        ip_country_code_3 (str): The ISO 3-letter country code of the
            customers IP
        is_commercial (bool): Is this a commercial/business use card
        is_prepaid (bool): Is this a prepaid or prepaid reloadable card
        bin_number (str): The BIN number returned. You may count the number of
            digits in this field to determine if the BIN is likely to be based
            on an 8-digit or 6-digit card
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "country": 'country',
        "ip_city": 'ip-city',
        "ip_matches_bin": 'ip-matches-bin',
        "card_type": 'card-type',
        "card_category": 'card-category',
        "ip_country_code": 'ip-country-code',
        "ip_country": 'ip-country',
        "issuer": 'issuer',
        "ip_blocklisted": 'ip-blocklisted',
        "valid": 'valid',
        "ip_blocklists": 'ip-blocklists',
        "issuer_website": 'issuer-website',
        "country_code": 'country-code',
        "ip_region": 'ip-region',
        "card_brand": 'card-brand',
        "issuer_phone": 'issuer-phone',
        "country_code_3": 'country-code3',
        "currency_code": 'currency-code',
        "ip_country_code_3": 'ip-country-code3',
        "is_commercial": 'is-commercial',
        "is_prepaid": 'is-prepaid',
        "bin_number": 'bin-number'
    }

    def __init__(self,
                 country=None,
                 ip_city=None,
                 ip_matches_bin=None,
                 card_type=None,
                 card_category=None,
                 ip_country_code=None,
                 ip_country=None,
                 issuer=None,
                 ip_blocklisted=None,
                 valid=None,
                 ip_blocklists=None,
                 issuer_website=None,
                 country_code=None,
                 ip_region=None,
                 card_brand=None,
                 issuer_phone=None,
                 country_code_3=None,
                 currency_code=None,
                 ip_country_code_3=None,
                 is_commercial=None,
                 is_prepaid=None,
                 bin_number=None,
                 additional_properties=None):
        """Constructor for the BinLookupResponse class"""

        # Initialize members of the class
        self.country = country 
        self.ip_city = ip_city 
        self.ip_matches_bin = ip_matches_bin 
        self.card_type = card_type 
        self.card_category = card_category 
        self.ip_country_code = ip_country_code 
        self.ip_country = ip_country 
        self.issuer = issuer 
        self.ip_blocklisted = ip_blocklisted 
        self.valid = valid 
        self.ip_blocklists = ip_blocklists 
        self.issuer_website = issuer_website 
        self.country_code = country_code 
        self.ip_region = ip_region 
        self.card_brand = card_brand 
        self.issuer_phone = issuer_phone 
        self.country_code_3 = country_code_3 
        self.currency_code = currency_code 
        self.ip_country_code_3 = ip_country_code_3 
        self.is_commercial = is_commercial 
        self.is_prepaid = is_prepaid 
        self.bin_number = bin_number 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        country = dictionary.get("country") if dictionary.get("country") else None
        ip_city = dictionary.get("ip-city") if dictionary.get("ip-city") else None
        ip_matches_bin = dictionary.get("ip-matches-bin") if "ip-matches-bin" in dictionary.keys() else None
        card_type = dictionary.get("card-type") if dictionary.get("card-type") else None
        card_category = dictionary.get("card-category") if dictionary.get("card-category") else None
        ip_country_code = dictionary.get("ip-country-code") if dictionary.get("ip-country-code") else None
        ip_country = dictionary.get("ip-country") if dictionary.get("ip-country") else None
        issuer = dictionary.get("issuer") if dictionary.get("issuer") else None
        ip_blocklisted = dictionary.get("ip-blocklisted") if "ip-blocklisted" in dictionary.keys() else None
        valid = dictionary.get("valid") if "valid" in dictionary.keys() else None
        ip_blocklists = dictionary.get("ip-blocklists") if dictionary.get("ip-blocklists") else None
        issuer_website = dictionary.get("issuer-website") if dictionary.get("issuer-website") else None
        country_code = dictionary.get("country-code") if dictionary.get("country-code") else None
        ip_region = dictionary.get("ip-region") if dictionary.get("ip-region") else None
        card_brand = dictionary.get("card-brand") if dictionary.get("card-brand") else None
        issuer_phone = dictionary.get("issuer-phone") if dictionary.get("issuer-phone") else None
        country_code_3 = dictionary.get("country-code3") if dictionary.get("country-code3") else None
        currency_code = dictionary.get("currency-code") if dictionary.get("currency-code") else None
        ip_country_code_3 = dictionary.get("ip-country-code3") if dictionary.get("ip-country-code3") else None
        is_commercial = dictionary.get("is-commercial") if "is-commercial" in dictionary.keys() else None
        is_prepaid = dictionary.get("is-prepaid") if "is-prepaid" in dictionary.keys() else None
        bin_number = dictionary.get("bin-number") if dictionary.get("bin-number") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(country,
                   ip_city,
                   ip_matches_bin,
                   card_type,
                   card_category,
                   ip_country_code,
                   ip_country,
                   issuer,
                   ip_blocklisted,
                   valid,
                   ip_blocklists,
                   issuer_website,
                   country_code,
                   ip_region,
                   card_brand,
                   issuer_phone,
                   country_code_3,
                   currency_code,
                   ip_country_code_3,
                   is_commercial,
                   is_prepaid,
                   bin_number,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'country={self.country!r}, '
                f'ip_city={self.ip_city!r}, '
                f'ip_matches_bin={self.ip_matches_bin!r}, '
                f'card_type={self.card_type!r}, '
                f'card_category={self.card_category!r}, '
                f'ip_country_code={self.ip_country_code!r}, '
                f'ip_country={self.ip_country!r}, '
                f'issuer={self.issuer!r}, '
                f'ip_blocklisted={self.ip_blocklisted!r}, '
                f'valid={self.valid!r}, '
                f'ip_blocklists={self.ip_blocklists!r}, '
                f'issuer_website={self.issuer_website!r}, '
                f'country_code={self.country_code!r}, '
                f'ip_region={self.ip_region!r}, '
                f'card_brand={self.card_brand!r}, '
                f'issuer_phone={self.issuer_phone!r}, '
                f'country_code_3={self.country_code_3!r}, '
                f'currency_code={self.currency_code!r}, '
                f'ip_country_code_3={self.ip_country_code_3!r}, '
                f'is_commercial={self.is_commercial!r}, '
                f'is_prepaid={self.is_prepaid!r}, '
                f'bin_number={self.bin_number!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'country={self.country!s}, '
                f'ip_city={self.ip_city!s}, '
                f'ip_matches_bin={self.ip_matches_bin!s}, '
                f'card_type={self.card_type!s}, '
                f'card_category={self.card_category!s}, '
                f'ip_country_code={self.ip_country_code!s}, '
                f'ip_country={self.ip_country!s}, '
                f'issuer={self.issuer!s}, '
                f'ip_blocklisted={self.ip_blocklisted!s}, '
                f'valid={self.valid!s}, '
                f'ip_blocklists={self.ip_blocklists!s}, '
                f'issuer_website={self.issuer_website!s}, '
                f'country_code={self.country_code!s}, '
                f'ip_region={self.ip_region!s}, '
                f'card_brand={self.card_brand!s}, '
                f'issuer_phone={self.issuer_phone!s}, '
                f'country_code_3={self.country_code_3!s}, '
                f'currency_code={self.currency_code!s}, '
                f'ip_country_code_3={self.ip_country_code_3!s}, '
                f'is_commercial={self.is_commercial!s}, '
                f'is_prepaid={self.is_prepaid!s}, '
                f'bin_number={self.bin_number!s}, '
                f'additional_properties={self.additional_properties!s})')
