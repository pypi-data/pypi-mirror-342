# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class UrlInfoResponse(object):

    """Implementation of the 'URLInfoResponse' model.

    Structure of url-info

    Attributes:
        http_status_message (str): The HTTP status message assoicated with the
            status code
        server_region (str): The servers IP geo-location: full region name (if
            detectable)
        query (Dict[str, str]): A key-value map of the URL query paramaters
        server_name (str): The name of the server software hosting this URL
        url_port (int): The URL port
        server_country (str): The servers IP geo-location: full country name
        real (bool): Is this URL actually serving real content
        server_city (str): The servers IP geo-location: full city name (if
            detectable)
        url_path (str): The URL path
        url (str): The fully qualified URL. This may be different to the URL
            requested if http-redirect is true
        valid (bool): Is this a valid well-formed URL
        server_hostname (str): The servers hostname (PTR record)
        load_time (float): The time taken to load the URL content in seconds
        http_ok (bool): True if this URL responded with an HTTP OK (200) status
        content_size (int): The size of the URL content in bytes
        http_status (int): The HTTP status code this URL responded with. An
            HTTP status of 0 indicates a network level issue
        server_country_code (str): The servers IP geo-location: ISO 2-letter
            country code
        content_encoding (str): The encoding format the URL uses
        server_ip (str): The IP address of the server hosting this URL
        url_protocol (str): The URL protocol, usually http or https
        content_type (str): The content-type this URL serves
        http_redirect (bool): True if this URL responded with an HTTP redirect
        content (str): The actual content this URL responded with. Only set if
            the 'fetch-content' option was used
        is_timeout (bool): True if a timeout occurred while loading the URL.
            You can set the timeout with the request parameter 'timeout'
        title (str): The document title
        language_code (str): The ISO 2-letter language code of the page.
            Extracted from either the HTML document or via HTTP headers
        is_error (bool): True if an error occurred while loading the URL. This
            includes network errors, TLS errors and timeouts
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "http_status_message": 'http-status-message',
        "server_region": 'server-region',
        "query": 'query',
        "server_name": 'server-name',
        "url_port": 'url-port',
        "server_country": 'server-country',
        "real": 'real',
        "server_city": 'server-city',
        "url_path": 'url-path',
        "url": 'url',
        "valid": 'valid',
        "server_hostname": 'server-hostname',
        "load_time": 'load-time',
        "http_ok": 'http-ok',
        "content_size": 'content-size',
        "http_status": 'http-status',
        "server_country_code": 'server-country-code',
        "content_encoding": 'content-encoding',
        "server_ip": 'server-ip',
        "url_protocol": 'url-protocol',
        "content_type": 'content-type',
        "http_redirect": 'http-redirect',
        "content": 'content',
        "is_timeout": 'is-timeout',
        "title": 'title',
        "language_code": 'language-code',
        "is_error": 'is-error'
    }

    def __init__(self,
                 http_status_message=None,
                 server_region=None,
                 query=None,
                 server_name=None,
                 url_port=None,
                 server_country=None,
                 real=None,
                 server_city=None,
                 url_path=None,
                 url=None,
                 valid=None,
                 server_hostname=None,
                 load_time=None,
                 http_ok=None,
                 content_size=None,
                 http_status=None,
                 server_country_code=None,
                 content_encoding=None,
                 server_ip=None,
                 url_protocol=None,
                 content_type=None,
                 http_redirect=None,
                 content=None,
                 is_timeout=None,
                 title=None,
                 language_code=None,
                 is_error=None,
                 additional_properties=None):
        """Constructor for the UrlInfoResponse class"""

        # Initialize members of the class
        self.http_status_message = http_status_message 
        self.server_region = server_region 
        self.query = query 
        self.server_name = server_name 
        self.url_port = url_port 
        self.server_country = server_country 
        self.real = real 
        self.server_city = server_city 
        self.url_path = url_path 
        self.url = url 
        self.valid = valid 
        self.server_hostname = server_hostname 
        self.load_time = load_time 
        self.http_ok = http_ok 
        self.content_size = content_size 
        self.http_status = http_status 
        self.server_country_code = server_country_code 
        self.content_encoding = content_encoding 
        self.server_ip = server_ip 
        self.url_protocol = url_protocol 
        self.content_type = content_type 
        self.http_redirect = http_redirect 
        self.content = content 
        self.is_timeout = is_timeout 
        self.title = title 
        self.language_code = language_code 
        self.is_error = is_error 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        http_status_message = dictionary.get("http-status-message") if dictionary.get("http-status-message") else None
        server_region = dictionary.get("server-region") if dictionary.get("server-region") else None
        query = dictionary.get("query") if dictionary.get("query") else None
        server_name = dictionary.get("server-name") if dictionary.get("server-name") else None
        url_port = dictionary.get("url-port") if dictionary.get("url-port") else None
        server_country = dictionary.get("server-country") if dictionary.get("server-country") else None
        real = dictionary.get("real") if "real" in dictionary.keys() else None
        server_city = dictionary.get("server-city") if dictionary.get("server-city") else None
        url_path = dictionary.get("url-path") if dictionary.get("url-path") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        valid = dictionary.get("valid") if "valid" in dictionary.keys() else None
        server_hostname = dictionary.get("server-hostname") if dictionary.get("server-hostname") else None
        load_time = dictionary.get("load-time") if dictionary.get("load-time") else None
        http_ok = dictionary.get("http-ok") if "http-ok" in dictionary.keys() else None
        content_size = dictionary.get("content-size") if dictionary.get("content-size") else None
        http_status = dictionary.get("http-status") if dictionary.get("http-status") else None
        server_country_code = dictionary.get("server-country-code") if dictionary.get("server-country-code") else None
        content_encoding = dictionary.get("content-encoding") if dictionary.get("content-encoding") else None
        server_ip = dictionary.get("server-ip") if dictionary.get("server-ip") else None
        url_protocol = dictionary.get("url-protocol") if dictionary.get("url-protocol") else None
        content_type = dictionary.get("content-type") if dictionary.get("content-type") else None
        http_redirect = dictionary.get("http-redirect") if "http-redirect" in dictionary.keys() else None
        content = dictionary.get("content") if dictionary.get("content") else None
        is_timeout = dictionary.get("is-timeout") if "is-timeout" in dictionary.keys() else None
        title = dictionary.get("title") if dictionary.get("title") else None
        language_code = dictionary.get("language-code") if dictionary.get("language-code") else None
        is_error = dictionary.get("is-error") if "is-error" in dictionary.keys() else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(http_status_message,
                   server_region,
                   query,
                   server_name,
                   url_port,
                   server_country,
                   real,
                   server_city,
                   url_path,
                   url,
                   valid,
                   server_hostname,
                   load_time,
                   http_ok,
                   content_size,
                   http_status,
                   server_country_code,
                   content_encoding,
                   server_ip,
                   url_protocol,
                   content_type,
                   http_redirect,
                   content,
                   is_timeout,
                   title,
                   language_code,
                   is_error,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'http_status_message={self.http_status_message!r}, '
                f'server_region={self.server_region!r}, '
                f'query={self.query!r}, '
                f'server_name={self.server_name!r}, '
                f'url_port={self.url_port!r}, '
                f'server_country={self.server_country!r}, '
                f'real={self.real!r}, '
                f'server_city={self.server_city!r}, '
                f'url_path={self.url_path!r}, '
                f'url={self.url!r}, '
                f'valid={self.valid!r}, '
                f'server_hostname={self.server_hostname!r}, '
                f'load_time={self.load_time!r}, '
                f'http_ok={self.http_ok!r}, '
                f'content_size={self.content_size!r}, '
                f'http_status={self.http_status!r}, '
                f'server_country_code={self.server_country_code!r}, '
                f'content_encoding={self.content_encoding!r}, '
                f'server_ip={self.server_ip!r}, '
                f'url_protocol={self.url_protocol!r}, '
                f'content_type={self.content_type!r}, '
                f'http_redirect={self.http_redirect!r}, '
                f'content={self.content!r}, '
                f'is_timeout={self.is_timeout!r}, '
                f'title={self.title!r}, '
                f'language_code={self.language_code!r}, '
                f'is_error={self.is_error!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'http_status_message={self.http_status_message!s}, '
                f'server_region={self.server_region!s}, '
                f'query={self.query!s}, '
                f'server_name={self.server_name!s}, '
                f'url_port={self.url_port!s}, '
                f'server_country={self.server_country!s}, '
                f'real={self.real!s}, '
                f'server_city={self.server_city!s}, '
                f'url_path={self.url_path!s}, '
                f'url={self.url!s}, '
                f'valid={self.valid!s}, '
                f'server_hostname={self.server_hostname!s}, '
                f'load_time={self.load_time!s}, '
                f'http_ok={self.http_ok!s}, '
                f'content_size={self.content_size!s}, '
                f'http_status={self.http_status!s}, '
                f'server_country_code={self.server_country_code!s}, '
                f'content_encoding={self.content_encoding!s}, '
                f'server_ip={self.server_ip!s}, '
                f'url_protocol={self.url_protocol!s}, '
                f'content_type={self.content_type!s}, '
                f'http_redirect={self.http_redirect!s}, '
                f'content={self.content!s}, '
                f'is_timeout={self.is_timeout!s}, '
                f'title={self.title!s}, '
                f'language_code={self.language_code!s}, '
                f'is_error={self.is_error!s}, '
                f'additional_properties={self.additional_properties!s})')
