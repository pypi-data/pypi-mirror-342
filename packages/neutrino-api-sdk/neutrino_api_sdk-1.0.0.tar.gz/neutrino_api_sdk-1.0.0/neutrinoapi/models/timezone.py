# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class Timezone(object):

    """Implementation of the 'Timezone' model.

    Structure of timezone

    Attributes:
        id (str): The time zone ID as per the IANA time zone database
            (tzdata). If empty then no valid timezone was detected
        name (str): The full time zone name
        abbr (str): The time zone abbreviation
        date (str): The current date at the time zone (ISO 8601 format
            'YYYY-MM-DD')
        time (str): The current time at the time zone (ISO 8601 format
            'hh:mm:ss.sss')
        offset (str): The UTC offset for the time zone (ISO 8601 format
            'Â±hh:mm')
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "abbr": 'abbr',
        "date": 'date',
        "time": 'time',
        "offset": 'offset'
    }

    def __init__(self,
                 id=None,
                 name=None,
                 abbr=None,
                 date=None,
                 time=None,
                 offset=None,
                 additional_properties=None):
        """Constructor for the Timezone class"""

        # Initialize members of the class
        self.id = id 
        self.name = name 
        self.abbr = abbr 
        self.date = date 
        self.time = time 
        self.offset = offset 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        abbr = dictionary.get("abbr") if dictionary.get("abbr") else None
        date = dictionary.get("date") if dictionary.get("date") else None
        time = dictionary.get("time") if dictionary.get("time") else None
        offset = dictionary.get("offset") if dictionary.get("offset") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(id,
                   name,
                   abbr,
                   date,
                   time,
                   offset,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'name={self.name!r}, '
                f'abbr={self.abbr!r}, '
                f'date={self.date!r}, '
                f'time={self.time!r}, '
                f'offset={self.offset!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'name={self.name!s}, '
                f'abbr={self.abbr!s}, '
                f'date={self.date!s}, '
                f'time={self.time!s}, '
                f'offset={self.offset!s}, '
                f'additional_properties={self.additional_properties!s})')
