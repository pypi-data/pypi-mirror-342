# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class IpProbeResponse(object):

    """Implementation of the 'IPProbeResponse' model.

    Structure of ip-probe

    Attributes:
        valid (bool): True if this is a valid IPv4 or IPv6 address
        country (str): Full country name
        provider_type (str): The detected provider type, possible values are:
            <br> <ul> <li>isp - IP belongs to an internet service provider.
            This includes both mobile, home and business internet
            providers</li> <li>hosting - IP belongs to a hosting company. This
            includes website hosting, cloud computing platforms and colocation
            facilities</li> <li>vpn - IP belongs to a VPN provider</li>
            <li>proxy - IP belongs to a proxy service. This includes
            HTTP/SOCKS proxies and browser based proxies</li> <li>university -
            IP belongs to a university/college/campus</li> <li>government - IP
            belongs to a government department. This includes military
            facilities</li> <li>commercial - IP belongs to a commercial entity
            such as a corporate headquarters or company office</li>
            <li>unknown - could not identify the provider type</li> </ul>
        country_code (str): ISO 2-letter country code
        hostname (str): The IPs full hostname (PTR)
        provider_domain (str): The domain name of the provider
        city (str): Full city name (if detectable)
        provider_website (str): The website URL for the provider
        ip (str): The IPv4 or IPv6 address returned
        region (str): Full region name (if detectable)
        provider_description (str): A description of the provider (usually
            extracted from the providers website)
        continent_code (str): ISO 2-letter continent code
        is_hosting (bool): True if this IP belongs to a hosting company. Note
            that this can still be true even if the provider type is
            VPN/proxy, this occurs in the case that the IP is detected as both
            types
        is_isp (bool): True if this IP belongs to an internet service
            provider. Note that this can still be true even if the provider
            type is VPN/proxy, this occurs in the case that the IP is detected
            as both types
        country_code_3 (str): ISO 3-letter country code
        currency_code (str): ISO 4217 currency code associated with the country
        is_vpn (bool): True if this IP ia a VPN
        is_proxy (bool): True if this IP is a proxy
        asn (str): The autonomous system (AS) number
        as_cidr (str): The autonomous system (AS) CIDR range
        as_country_code (str): The autonomous system (AS) ISO 2-letter country
            code
        as_country_code_3 (str): The autonomous system (AS) ISO 3-letter
            country code
        as_domains (List[str]): Array of all the domains associated with the
            autonomous system (AS)
        as_description (str): The autonomous system (AS) description / company
            name
        as_age (int): The age of the autonomous system (AS) in number of years
            since registration
        host_domain (str): The IPs host domain
        vpn_domain (str): The domain of the VPN provider (may be empty if the
            VPN domain is not detectable)
        is_v_6 (bool): True if this is a IPv6 address. False if IPv4
        is_v_4_mapped (bool): True if this is a <a
            href="https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses
            ">IPv4 mapped IPv6 address</a>
        is_bogon (bool): True if this is a bogon IP address such as a private
            network, local network or reserved address
        region_code (str): ISO 3166-2 region code (if detectable)
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "valid": 'valid',
        "country": 'country',
        "provider_type": 'provider-type',
        "country_code": 'country-code',
        "hostname": 'hostname',
        "provider_domain": 'provider-domain',
        "city": 'city',
        "provider_website": 'provider-website',
        "ip": 'ip',
        "region": 'region',
        "provider_description": 'provider-description',
        "continent_code": 'continent-code',
        "is_hosting": 'is-hosting',
        "is_isp": 'is-isp',
        "country_code_3": 'country-code3',
        "currency_code": 'currency-code',
        "is_vpn": 'is-vpn',
        "is_proxy": 'is-proxy',
        "asn": 'asn',
        "as_cidr": 'as-cidr',
        "as_country_code": 'as-country-code',
        "as_country_code_3": 'as-country-code3',
        "as_domains": 'as-domains',
        "as_description": 'as-description',
        "as_age": 'as-age',
        "host_domain": 'host-domain',
        "vpn_domain": 'vpn-domain',
        "is_v_6": 'is-v6',
        "is_v_4_mapped": 'is-v4-mapped',
        "is_bogon": 'is-bogon',
        "region_code": 'region-code'
    }

    def __init__(self,
                 valid=None,
                 country=None,
                 provider_type=None,
                 country_code=None,
                 hostname=None,
                 provider_domain=None,
                 city=None,
                 provider_website=None,
                 ip=None,
                 region=None,
                 provider_description=None,
                 continent_code=None,
                 is_hosting=None,
                 is_isp=None,
                 country_code_3=None,
                 currency_code=None,
                 is_vpn=None,
                 is_proxy=None,
                 asn=None,
                 as_cidr=None,
                 as_country_code=None,
                 as_country_code_3=None,
                 as_domains=None,
                 as_description=None,
                 as_age=None,
                 host_domain=None,
                 vpn_domain=None,
                 is_v_6=None,
                 is_v_4_mapped=None,
                 is_bogon=None,
                 region_code=None,
                 additional_properties=None):
        """Constructor for the IpProbeResponse class"""

        # Initialize members of the class
        self.valid = valid 
        self.country = country 
        self.provider_type = provider_type 
        self.country_code = country_code 
        self.hostname = hostname 
        self.provider_domain = provider_domain 
        self.city = city 
        self.provider_website = provider_website 
        self.ip = ip 
        self.region = region 
        self.provider_description = provider_description 
        self.continent_code = continent_code 
        self.is_hosting = is_hosting 
        self.is_isp = is_isp 
        self.country_code_3 = country_code_3 
        self.currency_code = currency_code 
        self.is_vpn = is_vpn 
        self.is_proxy = is_proxy 
        self.asn = asn 
        self.as_cidr = as_cidr 
        self.as_country_code = as_country_code 
        self.as_country_code_3 = as_country_code_3 
        self.as_domains = as_domains 
        self.as_description = as_description 
        self.as_age = as_age 
        self.host_domain = host_domain 
        self.vpn_domain = vpn_domain 
        self.is_v_6 = is_v_6 
        self.is_v_4_mapped = is_v_4_mapped 
        self.is_bogon = is_bogon 
        self.region_code = region_code 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        valid = dictionary.get("valid") if "valid" in dictionary.keys() else None
        country = dictionary.get("country") if dictionary.get("country") else None
        provider_type = dictionary.get("provider-type") if dictionary.get("provider-type") else None
        country_code = dictionary.get("country-code") if dictionary.get("country-code") else None
        hostname = dictionary.get("hostname") if dictionary.get("hostname") else None
        provider_domain = dictionary.get("provider-domain") if dictionary.get("provider-domain") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        provider_website = dictionary.get("provider-website") if dictionary.get("provider-website") else None
        ip = dictionary.get("ip") if dictionary.get("ip") else None
        region = dictionary.get("region") if dictionary.get("region") else None
        provider_description = dictionary.get("provider-description") if dictionary.get("provider-description") else None
        continent_code = dictionary.get("continent-code") if dictionary.get("continent-code") else None
        is_hosting = dictionary.get("is-hosting") if "is-hosting" in dictionary.keys() else None
        is_isp = dictionary.get("is-isp") if "is-isp" in dictionary.keys() else None
        country_code_3 = dictionary.get("country-code3") if dictionary.get("country-code3") else None
        currency_code = dictionary.get("currency-code") if dictionary.get("currency-code") else None
        is_vpn = dictionary.get("is-vpn") if "is-vpn" in dictionary.keys() else None
        is_proxy = dictionary.get("is-proxy") if "is-proxy" in dictionary.keys() else None
        asn = dictionary.get("asn") if dictionary.get("asn") else None
        as_cidr = dictionary.get("as-cidr") if dictionary.get("as-cidr") else None
        as_country_code = dictionary.get("as-country-code") if dictionary.get("as-country-code") else None
        as_country_code_3 = dictionary.get("as-country-code3") if dictionary.get("as-country-code3") else None
        as_domains = dictionary.get("as-domains") if dictionary.get("as-domains") else None
        as_description = dictionary.get("as-description") if dictionary.get("as-description") else None
        as_age = dictionary.get("as-age") if dictionary.get("as-age") else None
        host_domain = dictionary.get("host-domain") if dictionary.get("host-domain") else None
        vpn_domain = dictionary.get("vpn-domain") if dictionary.get("vpn-domain") else None
        is_v_6 = dictionary.get("is-v6") if "is-v6" in dictionary.keys() else None
        is_v_4_mapped = dictionary.get("is-v4-mapped") if "is-v4-mapped" in dictionary.keys() else None
        is_bogon = dictionary.get("is-bogon") if "is-bogon" in dictionary.keys() else None
        region_code = dictionary.get("region-code") if dictionary.get("region-code") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(valid,
                   country,
                   provider_type,
                   country_code,
                   hostname,
                   provider_domain,
                   city,
                   provider_website,
                   ip,
                   region,
                   provider_description,
                   continent_code,
                   is_hosting,
                   is_isp,
                   country_code_3,
                   currency_code,
                   is_vpn,
                   is_proxy,
                   asn,
                   as_cidr,
                   as_country_code,
                   as_country_code_3,
                   as_domains,
                   as_description,
                   as_age,
                   host_domain,
                   vpn_domain,
                   is_v_6,
                   is_v_4_mapped,
                   is_bogon,
                   region_code,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'valid={self.valid!r}, '
                f'country={self.country!r}, '
                f'provider_type={self.provider_type!r}, '
                f'country_code={self.country_code!r}, '
                f'hostname={self.hostname!r}, '
                f'provider_domain={self.provider_domain!r}, '
                f'city={self.city!r}, '
                f'provider_website={self.provider_website!r}, '
                f'ip={self.ip!r}, '
                f'region={self.region!r}, '
                f'provider_description={self.provider_description!r}, '
                f'continent_code={self.continent_code!r}, '
                f'is_hosting={self.is_hosting!r}, '
                f'is_isp={self.is_isp!r}, '
                f'country_code_3={self.country_code_3!r}, '
                f'currency_code={self.currency_code!r}, '
                f'is_vpn={self.is_vpn!r}, '
                f'is_proxy={self.is_proxy!r}, '
                f'asn={self.asn!r}, '
                f'as_cidr={self.as_cidr!r}, '
                f'as_country_code={self.as_country_code!r}, '
                f'as_country_code_3={self.as_country_code_3!r}, '
                f'as_domains={self.as_domains!r}, '
                f'as_description={self.as_description!r}, '
                f'as_age={self.as_age!r}, '
                f'host_domain={self.host_domain!r}, '
                f'vpn_domain={self.vpn_domain!r}, '
                f'is_v_6={self.is_v_6!r}, '
                f'is_v_4_mapped={self.is_v_4_mapped!r}, '
                f'is_bogon={self.is_bogon!r}, '
                f'region_code={self.region_code!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'valid={self.valid!s}, '
                f'country={self.country!s}, '
                f'provider_type={self.provider_type!s}, '
                f'country_code={self.country_code!s}, '
                f'hostname={self.hostname!s}, '
                f'provider_domain={self.provider_domain!s}, '
                f'city={self.city!s}, '
                f'provider_website={self.provider_website!s}, '
                f'ip={self.ip!s}, '
                f'region={self.region!s}, '
                f'provider_description={self.provider_description!s}, '
                f'continent_code={self.continent_code!s}, '
                f'is_hosting={self.is_hosting!s}, '
                f'is_isp={self.is_isp!s}, '
                f'country_code_3={self.country_code_3!s}, '
                f'currency_code={self.currency_code!s}, '
                f'is_vpn={self.is_vpn!s}, '
                f'is_proxy={self.is_proxy!s}, '
                f'asn={self.asn!s}, '
                f'as_cidr={self.as_cidr!s}, '
                f'as_country_code={self.as_country_code!s}, '
                f'as_country_code_3={self.as_country_code_3!s}, '
                f'as_domains={self.as_domains!s}, '
                f'as_description={self.as_description!s}, '
                f'as_age={self.as_age!s}, '
                f'host_domain={self.host_domain!s}, '
                f'vpn_domain={self.vpn_domain!s}, '
                f'is_v_6={self.is_v_6!s}, '
                f'is_v_4_mapped={self.is_v_4_mapped!s}, '
                f'is_bogon={self.is_bogon!s}, '
                f'region_code={self.region_code!s}, '
                f'additional_properties={self.additional_properties!s})')
