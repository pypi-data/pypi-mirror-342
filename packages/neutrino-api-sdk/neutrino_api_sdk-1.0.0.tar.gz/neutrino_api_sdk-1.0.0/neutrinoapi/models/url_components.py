# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper


class UrlComponents(object):

    """Implementation of the 'URLComponents' model.

    Structure of url-components

    Attributes:
        url (str): The complete and final URL
        host (str): The host of the URL. Will be either a domain name,
            sub-domain or IP address
        protocol (str): The protocol of the URL. For a website URL this will
            be either 'https' or 'http'
        path (str): The path of the URL. This is the part coming after the
            host and specifies which resource to load
        port (int): The port of the URL. This is usually 443 for HTTPS and 80
            for HTTP unless otherwise specified in the URL
        query (Dict[str, str]): The query of the URL. Contains a key/value map
            of any HTTP GET query parameters present in the URL
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "url": 'url',
        "host": 'host',
        "protocol": 'protocol',
        "path": 'path',
        "port": 'port',
        "query": 'query'
    }

    def __init__(self,
                 url=None,
                 host=None,
                 protocol=None,
                 path=None,
                 port=None,
                 query=None,
                 additional_properties=None):
        """Constructor for the UrlComponents class"""

        # Initialize members of the class
        self.url = url 
        self.host = host 
        self.protocol = protocol 
        self.path = path 
        self.port = port 
        self.query = query 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        url = dictionary.get("url") if dictionary.get("url") else None
        host = dictionary.get("host") if dictionary.get("host") else None
        protocol = dictionary.get("protocol") if dictionary.get("protocol") else None
        path = dictionary.get("path") if dictionary.get("path") else None
        port = dictionary.get("port") if dictionary.get("port") else None
        query = dictionary.get("query") if dictionary.get("query") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(url,
                   host,
                   protocol,
                   path,
                   port,
                   query,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'url={self.url!r}, '
                f'host={self.host!r}, '
                f'protocol={self.protocol!r}, '
                f'path={self.path!r}, '
                f'port={self.port!r}, '
                f'query={self.query!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'url={self.url!s}, '
                f'host={self.host!s}, '
                f'protocol={self.protocol!s}, '
                f'path={self.path!s}, '
                f'port={self.port!s}, '
                f'query={self.query!s}, '
                f'additional_properties={self.additional_properties!s})')
