# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from neutrinoapi.api_helper import APIHelper
from neutrinoapi.models.exec_result import ExecResult
from neutrinoapi.models.html_element import HtmlElement
from neutrinoapi.models.url_components import UrlComponents


class BrowserBotResponse(object):

    """Implementation of the 'BrowserBotResponse' model.

    Structure of browser-bot

    Attributes:
        url (str): The requested URL. This may not be the same as the final
            destination URL, if the URL redirects then it will be set in
            'http-redirect-url' and 'is-http-redirect' will also be true
        content (str): The complete raw, decompressed and decoded page
            content. Usually will be either HTML, JSON or XML
        mime_type (str): The document MIME type
        title (str): The document title
        is_error (bool): True if an error has occurred loading the page. Check
            the 'error-message' field for details
        is_timeout (bool): True if a timeout occurred while loading the page.
            You can set the timeout with the request parameter 'timeout'
        error_message (str): Contains the error message if an error has
            occurred ('is-error' will be true)
        http_status_code (int): The HTTP status code the URL returned
        http_status_message (str): The HTTP status message the URL returned
        is_http_ok (bool): True if the HTTP status is OK (200)
        is_http_redirect (bool): True if the URL responded with an HTTP
            redirect
        http_redirect_url (str): The redirected URL if the URL responded with
            an HTTP redirect
        server_ip (str): The HTTP servers IP address
        load_time (float): The number of seconds taken to load the page (from
            initial request until DOM ready)
        response_headers (Dict[str, str]): Map containing all the HTTP
            response headers the URL responded with
        is_secure (bool): True if the page is secured using TLS/SSL
        security_details (Dict[str, str]): Map containing details of the
            TLS/SSL setup
        elements (List[HtmlElement]): Array containing all the elements
            matching the supplied selector
        exec_results (List[ExecResult]): If you executed any JavaScript this
            array holds the results as objects
        language_code (str): The ISO 2-letter language code of the page.
            Extracted from either the HTML document or via HTTP headers
        url_components (UrlComponents): Structure of url-components
        url_valid (bool): True if the URL supplied is valid
        content_size (int): The size of the returned content in bytes
        server_hostname (str): The HTTP servers hostname (PTR/RDNS record)
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "url": 'url',
        "content": 'content',
        "mime_type": 'mime-type',
        "title": 'title',
        "is_error": 'is-error',
        "is_timeout": 'is-timeout',
        "error_message": 'error-message',
        "http_status_code": 'http-status-code',
        "http_status_message": 'http-status-message',
        "is_http_ok": 'is-http-ok',
        "is_http_redirect": 'is-http-redirect',
        "http_redirect_url": 'http-redirect-url',
        "server_ip": 'server-ip',
        "load_time": 'load-time',
        "response_headers": 'response-headers',
        "is_secure": 'is-secure',
        "security_details": 'security-details',
        "elements": 'elements',
        "exec_results": 'exec-results',
        "language_code": 'language-code',
        "url_components": 'url-components',
        "url_valid": 'url-valid',
        "content_size": 'content-size',
        "server_hostname": 'server-hostname'
    }

    def __init__(self,
                 url=None,
                 content=None,
                 mime_type=None,
                 title=None,
                 is_error=None,
                 is_timeout=None,
                 error_message=None,
                 http_status_code=None,
                 http_status_message=None,
                 is_http_ok=None,
                 is_http_redirect=None,
                 http_redirect_url=None,
                 server_ip=None,
                 load_time=None,
                 response_headers=None,
                 is_secure=None,
                 security_details=None,
                 elements=None,
                 exec_results=None,
                 language_code=None,
                 url_components=None,
                 url_valid=None,
                 content_size=None,
                 server_hostname=None,
                 additional_properties=None):
        """Constructor for the BrowserBotResponse class"""

        # Initialize members of the class
        self.url = url 
        self.content = content 
        self.mime_type = mime_type 
        self.title = title 
        self.is_error = is_error 
        self.is_timeout = is_timeout 
        self.error_message = error_message 
        self.http_status_code = http_status_code 
        self.http_status_message = http_status_message 
        self.is_http_ok = is_http_ok 
        self.is_http_redirect = is_http_redirect 
        self.http_redirect_url = http_redirect_url 
        self.server_ip = server_ip 
        self.load_time = load_time 
        self.response_headers = response_headers 
        self.is_secure = is_secure 
        self.security_details = security_details 
        self.elements = elements 
        self.exec_results = exec_results 
        self.language_code = language_code 
        self.url_components = url_components 
        self.url_valid = url_valid 
        self.content_size = content_size 
        self.server_hostname = server_hostname 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        url = dictionary.get("url") if dictionary.get("url") else None
        content = dictionary.get("content") if dictionary.get("content") else None
        mime_type = dictionary.get("mime-type") if dictionary.get("mime-type") else None
        title = dictionary.get("title") if dictionary.get("title") else None
        is_error = dictionary.get("is-error") if "is-error" in dictionary.keys() else None
        is_timeout = dictionary.get("is-timeout") if "is-timeout" in dictionary.keys() else None
        error_message = dictionary.get("error-message") if dictionary.get("error-message") else None
        http_status_code = dictionary.get("http-status-code") if dictionary.get("http-status-code") else None
        http_status_message = dictionary.get("http-status-message") if dictionary.get("http-status-message") else None
        is_http_ok = dictionary.get("is-http-ok") if "is-http-ok" in dictionary.keys() else None
        is_http_redirect = dictionary.get("is-http-redirect") if "is-http-redirect" in dictionary.keys() else None
        http_redirect_url = dictionary.get("http-redirect-url") if dictionary.get("http-redirect-url") else None
        server_ip = dictionary.get("server-ip") if dictionary.get("server-ip") else None
        load_time = dictionary.get("load-time") if dictionary.get("load-time") else None
        response_headers = dictionary.get("response-headers") if dictionary.get("response-headers") else None
        is_secure = dictionary.get("is-secure") if "is-secure" in dictionary.keys() else None
        security_details = dictionary.get("security-details") if dictionary.get("security-details") else None
        elements = None
        if dictionary.get('elements') is not None:
            elements = [HtmlElement.from_dictionary(x) for x in dictionary.get('elements')]
        exec_results = None
        if dictionary.get('exec-results') is not None:
            exec_results = [ExecResult.from_dictionary(x) for x in dictionary.get('exec-results')]
        language_code = dictionary.get("language-code") if dictionary.get("language-code") else None
        url_components = UrlComponents.from_dictionary(dictionary.get('url-components')) if dictionary.get('url-components') else None
        url_valid = dictionary.get("url-valid") if "url-valid" in dictionary.keys() else None
        content_size = dictionary.get("content-size") if dictionary.get("content-size") else None
        server_hostname = dictionary.get("server-hostname") if dictionary.get("server-hostname") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(url,
                   content,
                   mime_type,
                   title,
                   is_error,
                   is_timeout,
                   error_message,
                   http_status_code,
                   http_status_message,
                   is_http_ok,
                   is_http_redirect,
                   http_redirect_url,
                   server_ip,
                   load_time,
                   response_headers,
                   is_secure,
                   security_details,
                   elements,
                   exec_results,
                   language_code,
                   url_components,
                   url_valid,
                   content_size,
                   server_hostname,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'url={self.url!r}, '
                f'content={self.content!r}, '
                f'mime_type={self.mime_type!r}, '
                f'title={self.title!r}, '
                f'is_error={self.is_error!r}, '
                f'is_timeout={self.is_timeout!r}, '
                f'error_message={self.error_message!r}, '
                f'http_status_code={self.http_status_code!r}, '
                f'http_status_message={self.http_status_message!r}, '
                f'is_http_ok={self.is_http_ok!r}, '
                f'is_http_redirect={self.is_http_redirect!r}, '
                f'http_redirect_url={self.http_redirect_url!r}, '
                f'server_ip={self.server_ip!r}, '
                f'load_time={self.load_time!r}, '
                f'response_headers={self.response_headers!r}, '
                f'is_secure={self.is_secure!r}, '
                f'security_details={self.security_details!r}, '
                f'elements={self.elements!r}, '
                f'exec_results={self.exec_results!r}, '
                f'language_code={self.language_code!r}, '
                f'url_components={self.url_components!r}, '
                f'url_valid={self.url_valid!r}, '
                f'content_size={self.content_size!r}, '
                f'server_hostname={self.server_hostname!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'url={self.url!s}, '
                f'content={self.content!s}, '
                f'mime_type={self.mime_type!s}, '
                f'title={self.title!s}, '
                f'is_error={self.is_error!s}, '
                f'is_timeout={self.is_timeout!s}, '
                f'error_message={self.error_message!s}, '
                f'http_status_code={self.http_status_code!s}, '
                f'http_status_message={self.http_status_message!s}, '
                f'is_http_ok={self.is_http_ok!s}, '
                f'is_http_redirect={self.is_http_redirect!s}, '
                f'http_redirect_url={self.http_redirect_url!s}, '
                f'server_ip={self.server_ip!s}, '
                f'load_time={self.load_time!s}, '
                f'response_headers={self.response_headers!s}, '
                f'is_secure={self.is_secure!s}, '
                f'security_details={self.security_details!s}, '
                f'elements={self.elements!s}, '
                f'exec_results={self.exec_results!s}, '
                f'language_code={self.language_code!s}, '
                f'url_components={self.url_components!s}, '
                f'url_valid={self.url_valid!s}, '
                f'content_size={self.content_size!s}, '
                f'server_hostname={self.server_hostname!s}, '
                f'additional_properties={self.additional_properties!s})')
