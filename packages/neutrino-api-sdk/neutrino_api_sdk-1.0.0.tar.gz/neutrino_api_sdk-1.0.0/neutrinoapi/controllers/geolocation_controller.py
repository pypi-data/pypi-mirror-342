# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from neutrinoapi.api_helper import APIHelper
from neutrinoapi.configuration import Server
from neutrinoapi.http.api_response import ApiResponse
from neutrinoapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from neutrinoapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from neutrinoapi.models.ip_info_response import IpInfoResponse
from neutrinoapi.models.geocode_reverse_response import GeocodeReverseResponse
from neutrinoapi.models.geocode_address_response import GeocodeAddressResponse
from neutrinoapi.exceptions.api_error_exception import ApiErrorException


class GeolocationController(BaseController):

    """A Controller to access Endpoints in the neutrinoapi API."""
    def __init__(self, config):
        super(GeolocationController, self).__init__(config)

    def ip_info(self,
                ip,
                reverse_lookup=False):
        """Does a GET request to /ip-info.

        Get location information about an IP address and do reverse DNS (PTR)
        lookups

        Args:
            ip (str): An IPv4 or IPv6 address. Accepts standard IP notation
                and also CIDR notation
            reverse_lookup (bool, optional): Do a reverse DNS (PTR) lookup.
                This option can add extra delay to the request so only use it
                if you need it

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/ip-info')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('ip')
                         .value(ip)
                         .is_required(True))
            .query_param(Parameter()
                         .key('reverse-lookup')
                         .value(reverse_lookup))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(IpInfoResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def geocode_reverse(self,
                        latitude,
                        longitude,
                        language_code='en',
                        zoom='address'):
        """Does a GET request to /geocode-reverse.

        Convert a geographic coordinate (latitude and longitude) into a real
        world address

        Args:
            latitude (str): The location latitude in decimal degrees format
            longitude (str): The location longitude in decimal degrees format
            language_code (str, optional): The language to display results in,
                available languages are: <ul> <li>de, en, es, fr, it, pt,
                ru</li> </ul>
            zoom (str, optional): The zoom level to respond with: <br> <ul>
                <li>address - the most precise address available</li>
                <li>street - the street level</li> <li>city - the city
                level</li> <li>state - the state level</li> <li>country - the
                country level</li> </ul>

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geocode-reverse')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('latitude')
                         .value(latitude)
                         .is_required(True))
            .query_param(Parameter()
                         .key('longitude')
                         .value(longitude)
                         .is_required(True))
            .query_param(Parameter()
                         .key('language-code')
                         .value(language_code))
            .query_param(Parameter()
                         .key('zoom')
                         .value(zoom))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GeocodeReverseResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def geocode_address(self,
                        address=None,
                        house_number=None,
                        street=None,
                        city=None,
                        county=None,
                        state=None,
                        postal_code=None,
                        country_code=None,
                        language_code='en',
                        fuzzy_search=False):
        """Does a GET request to /geocode-address.

        Geocode an address, partial address or just the name of a place

        Args:
            address (str, optional): The full address, partial address or name
                of a place to try and locate. Comma separated address
                components are preferred.
            house_number (str, optional): The house/building number to locate
            street (str, optional): The street/road name to locate
            city (str, optional): The city/town name to locate
            county (str, optional): The county/region name to locate
            state (str, optional): The state name to locate
            postal_code (str, optional): The postal code to locate
            country_code (str, optional): Limit result to this country (the
                default is no country bias)
            language_code (str, optional): The language to display results in,
                available languages are: <ul> <li>de, en, es, fr, it, pt, ru,
                zh</li> </ul>
            fuzzy_search (bool, optional): If no matches are found for the
                given address, start performing a recursive fuzzy search until
                a geolocation is found. This option is recommended for
                processing user input or implementing auto-complete. We use a
                combination of approximate string matching and data cleansing
                to find possible location matches

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geocode-address')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('address')
                         .value(address))
            .query_param(Parameter()
                         .key('house-number')
                         .value(house_number))
            .query_param(Parameter()
                         .key('street')
                         .value(street))
            .query_param(Parameter()
                         .key('city')
                         .value(city))
            .query_param(Parameter()
                         .key('county')
                         .value(county))
            .query_param(Parameter()
                         .key('state')
                         .value(state))
            .query_param(Parameter()
                         .key('postal-code')
                         .value(postal_code))
            .query_param(Parameter()
                         .key('country-code')
                         .value(country_code))
            .query_param(Parameter()
                         .key('language-code')
                         .value(language_code))
            .query_param(Parameter()
                         .key('fuzzy-search')
                         .value(fuzzy_search))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GeocodeAddressResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()
