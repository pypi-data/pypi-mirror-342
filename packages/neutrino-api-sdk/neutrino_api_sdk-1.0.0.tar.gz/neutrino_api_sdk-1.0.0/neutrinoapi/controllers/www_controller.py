# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from neutrinoapi.api_helper import APIHelper
from neutrinoapi.configuration import Server
from neutrinoapi.http.api_response import ApiResponse
from neutrinoapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from neutrinoapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.configurations.endpoint_configuration import EndpointConfiguration
from neutrinoapi.models.url_info_response import UrlInfoResponse
from neutrinoapi.models.browser_bot_response import BrowserBotResponse
from neutrinoapi.exceptions.api_error_exception import ApiErrorException


class WwwController(BaseController):

    """A Controller to access Endpoints in the neutrinoapi API."""
    def __init__(self, config):
        super(WwwController, self).__init__(config)

    def html_clean(self,
                   content,
                   output_type):
        """Does a POST request to /html-clean.

        Clean and sanitize untrusted HTML

        Args:
            content (str): The HTML content. This can be either a URL to load
                from, a file upload (multipart/form-data) or an HTML content
                string
            output_type (str): The level of sanitization, possible values are:
                <br><b>plain-text</b>: reduce the content to plain text only
                (no HTML tags at all) <br><b>simple-text</b>: allow only very
                basic text formatting tags like b, em, i, strong, u
                <br><b>basic-html</b>: allow advanced text formatting and
                hyper links <br><b>basic-html-with-images</b>: same as basic
                html but also allows image tags <br><b>advanced-html</b>: same
                as basic html with images but also allows many more common
                HTML tags like table, ul, dl, pre <br>

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/html-clean')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('content')
                        .value(content)
                        .is_required(True))
            .form_param(Parameter()
                        .key('output-type')
                        .value(output_type)
                        .is_required(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()

    def url_info(self,
                 url,
                 fetch_content=False,
                 ignore_certificate_errors=False,
                 timeout=60,
                 retry=0):
        """Does a GET request to /url-info.

        Parse, analyze and retrieve content from the supplied URL

        Args:
            url (str): The URL to probe
            fetch_content (bool, optional): If this URL responds with html,
                text, json or xml then return the response. This option is
                useful if you want to perform further processing on the URL
                content (e.g. with the HTML Extract or HTML Clean APIs)
            ignore_certificate_errors (bool, optional): Ignore any TLS/SSL
                certificate errors and load the URL anyway
            timeout (int, optional): Timeout in seconds. Give up if still
                trying to load the URL after this number of seconds
            retry (int, optional): If the request fails for any reason try
                again this many times

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/url-info')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('url')
                         .value(url)
                         .is_required(True))
            .query_param(Parameter()
                         .key('fetch-content')
                         .value(fetch_content))
            .query_param(Parameter()
                         .key('ignore-certificate-errors')
                         .value(ignore_certificate_errors))
            .query_param(Parameter()
                         .key('timeout')
                         .value(timeout))
            .query_param(Parameter()
                         .key('retry')
                         .value(retry))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UrlInfoResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def browser_bot(self,
                    url,
                    timeout=30,
                    delay=3,
                    selector=None,
                    mexec=None,
                    user_agent=None,
                    ignore_certificate_errors=False):
        """Does a POST request to /browser-bot.

        Browser bot can extract content, interact with keyboard and mouse
        events, and execute JavaScript on a website

        Args:
            url (str): The URL to load
            timeout (int, optional): Timeout in seconds. Give up if still
                trying to load the page after this number of seconds
            delay (int, optional): Delay in seconds to wait before capturing
                any page data, executing selectors or JavaScript
            selector (str, optional): Extract content from the page DOM using
                this selector. Commonly known as a CSS selector, you can find
                a good reference <a
                href="https://www.w3schools.com/cssref/css_selectors.asp">here<
                /a>
            mexec (List[str], optional): Execute JavaScript on the website.
                This parameter accepts JavaScript as either a string
                containing JavaScript or for sending multiple separate
                statements a JSON array or POST array can also be used. If a
                statement returns any value it will be returned in the
                'exec-results' response. You can also use the following
                specially defined user interaction functions: <br> <div>
                sleep(seconds); Just wait/sleep for the specified number of
                seconds. <br>click('selector'); Click on the first element
                matching the given selector. <br>focus('selector'); Focus on
                the first element matching the given selector.
                <br>keys('characters'); Send the specified keyboard
                characters. Use click() or focus() first to send keys to a
                specific element. <br>enter(); Send the Enter key. <br>tab();
                Send the Tab key. <br> </div>
            user_agent (str, optional): Override the browsers default
                user-agent string with this one
            ignore_certificate_errors (bool, optional): Ignore any TLS/SSL
                certificate errors and load the page anyway

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/browser-bot')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('url')
                        .value(url)
                        .is_required(True))
            .form_param(Parameter()
                        .key('timeout')
                        .value(timeout))
            .form_param(Parameter()
                        .key('delay')
                        .value(delay))
            .form_param(Parameter()
                        .key('selector')
                        .value(selector))
            .form_param(Parameter()
                        .key('exec')
                        .value(mexec))
            .form_param(Parameter()
                        .key('user-agent')
                        .value(user_agent))
            .form_param(Parameter()
                        .key('ignore-certificate-errors')
                        .value(ignore_certificate_errors))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BrowserBotResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()
