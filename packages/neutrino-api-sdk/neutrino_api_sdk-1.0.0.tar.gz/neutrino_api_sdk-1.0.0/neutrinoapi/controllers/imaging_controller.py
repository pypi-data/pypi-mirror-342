# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from neutrinoapi.api_helper import APIHelper
from neutrinoapi.configuration import Server
from neutrinoapi.http.api_response import ApiResponse
from neutrinoapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from neutrinoapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.configurations.endpoint_configuration import EndpointConfiguration
from neutrinoapi.exceptions.api_error_exception import ApiErrorException


class ImagingController(BaseController):

    """A Controller to access Endpoints in the neutrinoapi API."""
    def __init__(self, config):
        super(ImagingController, self).__init__(config)

    def html_render(self,
                    content,
                    format='PDF',
                    page_size='A4',
                    title=None,
                    margin=0,
                    margin_left=0,
                    margin_right=0,
                    margin_top=0,
                    margin_bottom=0,
                    landscape=False,
                    zoom=1,
                    grayscale=False,
                    css=None,
                    image_width=1024,
                    image_height=None,
                    delay=0,
                    page_width=None,
                    page_height=None,
                    timeout=300,
                    ignore_certificate_errors=False,
                    header=None,
                    footer=None,
                    bg_color=None,
                    mexec=None,
                    user_agent=None):
        """Does a POST request to /html-render.

        Render HTML content to PDF, JPG or PNG

        Args:
            content (str): The HTML content. This can be either a URL to load
                from, a file upload (multipart/form-data) or an HTML content
                string
            format (str, optional): Which format to output, available options
                are: PDF, PNG, JPG
            page_size (str, optional): Set the document page size, can be one
                of: A0 - A9, B0 - B10, Comm10E, DLE or Letter
            title (str, optional): The document title
            margin (float, optional): The document margin (in mm)
            margin_left (float, optional): The document left margin (in mm)
            margin_right (float, optional): The document right margin (in mm)
            margin_top (float, optional): The document top margin (in mm)
            margin_bottom (float, optional): The document bottom margin (in mm)
            landscape (bool, optional): Set the document to landscape
                orientation
            zoom (float, optional): Set the zoom factor when rendering the
                page (2.0 for double size, 0.5 for half size)
            grayscale (bool, optional): Render the final document in grayscale
            css (str, optional): Inject custom CSS into the HTML. e.g. 'body {
                background-color: red;}'
            image_width (int, optional): If rendering to an image format (PNG
                or JPG) use this image width (in pixels)
            image_height (int, optional): If rendering to an image format (PNG
                or JPG) use this image height (in pixels). The default is
                automatic which dynamically sets the image height based on the
                content
            delay (int, optional): Number of seconds to wait before rendering
                the page (can be useful for pages with animations etc)
            page_width (float, optional): Set the PDF page width explicitly
                (in mm)
            page_height (float, optional): Set the PDF page height explicitly
                (in mm)
            timeout (int, optional): Timeout in seconds. Give up if still
                trying to load the HTML content after this number of seconds
            ignore_certificate_errors (bool, optional): Ignore any TLS/SSL
                certificate errors
            header (str, optional): The header HTML to insert into each page.
                The following dynamic tags are supported: {date}, {title},
                {url}, {pageNumber}, {totalPages}
            footer (str, optional): The footer HTML to insert into each page.
                The following dynamic tags are supported: {date}, {title},
                {url}, {pageNumber}, {totalPages}
            bg_color (str, optional): For image rendering set the background
                color in hexadecimal notation (e.g. #0000ff). For PNG output
                the special value of 'transparent' can be used to create a
                transparent PNG
            mexec (str, optional): Execute JavaScript on the website. This
                parameter accepts JavaScript as either a string containing
                JavaScript or for sending multiple separate statements a JSON
                array or POST array can also be used. You can also use the
                following specially defined user interaction functions: <br>
                <div> sleep(seconds); Just wait/sleep for the specified number
                of seconds. <br>click('selector'); Click on the first element
                matching the given selector. <br>focus('selector'); Focus on
                the first element matching the given selector.
                <br>keys('characters'); Send the specified keyboard
                characters. Use click() or focus() first to send keys to a
                specific element. <br>enter(); Send the Enter key. <br>tab();
                Send the Tab key. <br> </div>
            user_agent (str, optional): Override the browsers default
                user-agent string with this one

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/html-render')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('content')
                        .value(content)
                        .is_required(True))
            .form_param(Parameter()
                        .key('format')
                        .value(format))
            .form_param(Parameter()
                        .key('page-size')
                        .value(page_size))
            .form_param(Parameter()
                        .key('title')
                        .value(title))
            .form_param(Parameter()
                        .key('margin')
                        .value(margin))
            .form_param(Parameter()
                        .key('margin-left')
                        .value(margin_left))
            .form_param(Parameter()
                        .key('margin-right')
                        .value(margin_right))
            .form_param(Parameter()
                        .key('margin-top')
                        .value(margin_top))
            .form_param(Parameter()
                        .key('margin-bottom')
                        .value(margin_bottom))
            .form_param(Parameter()
                        .key('landscape')
                        .value(landscape))
            .form_param(Parameter()
                        .key('zoom')
                        .value(zoom))
            .form_param(Parameter()
                        .key('grayscale')
                        .value(grayscale))
            .form_param(Parameter()
                        .key('css')
                        .value(css))
            .form_param(Parameter()
                        .key('image-width')
                        .value(image_width))
            .form_param(Parameter()
                        .key('image-height')
                        .value(image_height))
            .form_param(Parameter()
                        .key('delay')
                        .value(delay))
            .form_param(Parameter()
                        .key('page-width')
                        .value(page_width))
            .form_param(Parameter()
                        .key('page-height')
                        .value(page_height))
            .form_param(Parameter()
                        .key('timeout')
                        .value(timeout))
            .form_param(Parameter()
                        .key('ignore-certificate-errors')
                        .value(ignore_certificate_errors))
            .form_param(Parameter()
                        .key('header')
                        .value(header))
            .form_param(Parameter()
                        .key('footer')
                        .value(footer))
            .form_param(Parameter()
                        .key('bg-color')
                        .value(bg_color))
            .form_param(Parameter()
                        .key('exec')
                        .value(mexec))
            .form_param(Parameter()
                        .key('user-agent')
                        .value(user_agent))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()

    def image_watermark(self,
                        image_url,
                        watermark_url,
                        opacity=50,
                        format='png',
                        position='center',
                        width=None,
                        height=None,
                        resize_mode='scale',
                        bg_color='transparent'):
        """Does a POST request to /image-watermark.

        Watermark one image with another image

        Args:
            image_url (str): The URL or Base64 encoded Data URL for the source
                image. You can also upload an image file directly using
                multipart/form-data
            watermark_url (str): The URL or Base64 encoded Data URL for the
                watermark image. You can also upload an image file directly
                using multipart/form-data
            opacity (int, optional): The opacity of the watermark (0 to 100)
            format (str, optional): The output image format, can be either png
                or jpg
            position (str, optional): The position of the watermark image,
                possible values are: <br>center, top-left, top-center,
                top-right, bottom-left, bottom-center, bottom-right
            width (int, optional): If set resize the resulting image to this
                width (in px)
            height (int, optional): If set resize the resulting image to this
                height (in px)
            resize_mode (str, optional): The resize mode to use, we support 3
                main resizing modes: <ul> <li><b>scale</b><br>Resize to within
                the width and height specified while preserving aspect ratio.
                In this mode the width or height will be automatically
                adjusted to fit the aspect ratio</li> <li><b>pad</b><br>Resize
                to exactly the width and height specified while preserving
                aspect ratio and pad any space left over. Any padded space
                will be filled in with the 'bg-color' value</li>
                <li><b>crop</b><br>Resize to exactly the width and height
                specified while preserving aspect ratio and crop any space
                which fall outside the area. The cropping window is centered
                on the original image</li> </ul>
            bg_color (str, optional): The image background color in
                hexadecimal notation (e.g. #0000ff). For PNG output the
                special value of 'transparent' can also be used. For JPG
                output the default is black (#000000)

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/image-watermark')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('image-url')
                        .value(image_url)
                        .is_required(True))
            .form_param(Parameter()
                        .key('watermark-url')
                        .value(watermark_url)
                        .is_required(True))
            .form_param(Parameter()
                        .key('opacity')
                        .value(opacity))
            .form_param(Parameter()
                        .key('format')
                        .value(format))
            .form_param(Parameter()
                        .key('position')
                        .value(position))
            .form_param(Parameter()
                        .key('width')
                        .value(width))
            .form_param(Parameter()
                        .key('height')
                        .value(height))
            .form_param(Parameter()
                        .key('resize-mode')
                        .value(resize_mode))
            .form_param(Parameter()
                        .key('bg-color')
                        .value(bg_color))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()

    def qr_code(self,
                content,
                width=256,
                height=256,
                fg_color='#000000',
                bg_color='#ffffff',
                code_format='qr'):
        """Does a POST request to /qr-code.

        Generate a QR code as a PNG image

        Args:
            content (str): The content to encode into the QR code (e.g. a URL
                or a phone number)
            width (int, optional): The width of the QR code (in px)
            height (int, optional): The height of the QR code (in px)
            fg_color (str, optional): The QR code foreground color
            bg_color (str, optional): The QR code background color
            code_format (str, optional): The barcode format to output.
                Accepted formats are: qr, c128

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/qr-code')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('content')
                        .value(content)
                        .is_required(True))
            .form_param(Parameter()
                        .key('width')
                        .value(width))
            .form_param(Parameter()
                        .key('height')
                        .value(height))
            .form_param(Parameter()
                        .key('fg-color')
                        .value(fg_color))
            .form_param(Parameter()
                        .key('bg-color')
                        .value(bg_color))
            .form_param(Parameter()
                        .key('code-format')
                        .value(code_format))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()

    def image_resize(self,
                     image_url,
                     width,
                     height=None,
                     format='png',
                     resize_mode='scale',
                     bg_color='transparent'):
        """Does a POST request to /image-resize.

        Resize an image and output as either JPEG or PNG

        Args:
            image_url (str): The URL or Base64 encoded Data URL for the source
                image. You can also upload an image file directly using
                multipart/form-data
            width (int): The width to resize to (in px)
            height (int, optional): The height to resize to (in px). If you
                don't set this field then the height will be automatic based
                on the requested width and image aspect ratio
            format (str, optional): The output image format, can be either png
                or jpg
            resize_mode (str, optional): The resize mode to use, we support 3
                main resizing modes: <ul> <li><b>scale</b><br>Resize to within
                the width and height specified while preserving aspect ratio.
                In this mode the width or height will be automatically
                adjusted to fit the aspect ratio</li> <li><b>pad</b><br>Resize
                to exactly the width and height specified while preserving
                aspect ratio and pad any space left over. Any padded space
                will be filled in with the 'bg-color' value</li>
                <li><b>crop</b><br>Resize to exactly the width and height
                specified while preserving aspect ratio and crop any space
                which fall outside the area. The cropping window is centered
                on the original image</li> </ul>
            bg_color (str, optional): The image background color in
                hexadecimal notation (e.g. #0000ff). For PNG output the
                special value of 'transparent' can also be used. For JPG
                output the default is black (#000000)

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/image-resize')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('image-url')
                        .value(image_url)
                        .is_required(True))
            .form_param(Parameter()
                        .key('width')
                        .value(width)
                        .is_required(True))
            .form_param(Parameter()
                        .key('height')
                        .value(height))
            .form_param(Parameter()
                        .key('format')
                        .value(format))
            .form_param(Parameter()
                        .key('resize-mode')
                        .value(resize_mode))
            .form_param(Parameter()
                        .key('bg-color')
                        .value(bg_color))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()
