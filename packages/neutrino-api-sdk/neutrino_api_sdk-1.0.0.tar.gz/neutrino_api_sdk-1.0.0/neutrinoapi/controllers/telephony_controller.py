# -*- coding: utf-8 -*-

"""
neutrinoapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from neutrinoapi.api_helper import APIHelper
from neutrinoapi.configuration import Server
from neutrinoapi.http.api_response import ApiResponse
from neutrinoapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from neutrinoapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from neutrinoapi.models.sms_verify_response import SmsVerifyResponse
from neutrinoapi.models.phone_playback_response import PhonePlaybackResponse
from neutrinoapi.models.hlr_lookup_response import HlrLookupResponse
from neutrinoapi.models.verify_security_code_response import VerifySecurityCodeResponse
from neutrinoapi.models.phone_verify_response import PhoneVerifyResponse
from neutrinoapi.exceptions.api_error_exception import ApiErrorException


class TelephonyController(BaseController):

    """A Controller to access Endpoints in the neutrinoapi API."""
    def __init__(self, config):
        super(TelephonyController, self).__init__(config)

    def sms_verify(self,
                   number,
                   code_length=5,
                   security_code=None,
                   country_code=None,
                   language_code='en',
                   limit=10,
                   limit_ttl=1,
                   brand_name=None):
        """Does a POST request to /sms-verify.

        Send a unique security code to any mobile device via SMS

        Args:
            number (str): The phone number to send a verification code to
            code_length (int, optional): The number of digits to use in the
                security code (must be between 4 and 12)
            security_code (int, optional): Pass in your own security code.
                This is useful if you have implemented TOTP or similar 2FA
                methods. If not set then we will generate a secure random code
            country_code (str, optional): ISO 2-letter country code, assume
                numbers are based in this country. <br>If not set numbers are
                assumed to be in international format (with or without the
                leading + sign)
            language_code (str, optional): The language to send the
                verification code in, available languages are: <ul> <li>de -
                German</li> <li>en - English</li> <li>es - Spanish</li> <li>fr
                - French</li> <li>it - Italian</li> <li>pt - Portuguese</li>
                <li>ru - Russian</li> </ul>
            limit (int, optional): Limit the total number of SMS allowed to
                the supplied phone number, if the limit is reached within the
                TTL then error code 14 will be returned
            limit_ttl (int, optional): Set the TTL in number of days that the
                'limit' option will remember a phone number (the default is 1
                day and the maximum is 365 days)
            brand_name (str, optional): Set a custom brand or product name in
                the verification message

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/sms-verify')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('number')
                        .value(number)
                        .is_required(True))
            .form_param(Parameter()
                        .key('code-length')
                        .value(code_length))
            .form_param(Parameter()
                        .key('security-code')
                        .value(security_code))
            .form_param(Parameter()
                        .key('country-code')
                        .value(country_code))
            .form_param(Parameter()
                        .key('language-code')
                        .value(language_code))
            .form_param(Parameter()
                        .key('limit')
                        .value(limit))
            .form_param(Parameter()
                        .key('limit-ttl')
                        .value(limit_ttl))
            .form_param(Parameter()
                        .key('brand-name')
                        .value(brand_name))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SmsVerifyResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def phone_playback(self,
                       number,
                       audio_url,
                       limit=3,
                       limit_ttl=1):
        """Does a POST request to /phone-playback.

        Make an automated call to any valid phone number and playback an audio
        message

        Args:
            number (str): The phone number to call. Must be in valid
                international format
            audio_url (str): A URL to a valid audio file. Accepted audio
                formats are: <ul> <li>MP3</li> <li>WAV</li> <li>OGG</li>
                </ul>You can use the following MP3 URL for testing:
                <br>https://www.neutrinoapi.com/test-files/test1.mp3
            limit (int, optional): Limit the total number of calls allowed to
                the supplied phone number, if the limit is reached within the
                TTL then error code 14 will be returned
            limit_ttl (int, optional): Set the TTL in number of days that the
                'limit' option will remember a phone number (the default is 1
                day and the maximum is 365 days)

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/phone-playback')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('number')
                        .value(number)
                        .is_required(True))
            .form_param(Parameter()
                        .key('audio-url')
                        .value(audio_url)
                        .is_required(True))
            .form_param(Parameter()
                        .key('limit')
                        .value(limit))
            .form_param(Parameter()
                        .key('limit-ttl')
                        .value(limit_ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PhonePlaybackResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def hlr_lookup(self,
                   number,
                   country_code=None):
        """Does a GET request to /hlr-lookup.

        Connect to the global mobile cellular network and retrieve the status
        of a mobile device

        Args:
            number (str): A phone number
            country_code (str, optional): ISO 2-letter country code, assume
                numbers are based in this country. <br>If not set numbers are
                assumed to be in international format (with or without the
                leading + sign)

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/hlr-lookup')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('number')
                         .value(number)
                         .is_required(True))
            .query_param(Parameter()
                         .key('country-code')
                         .value(country_code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(HlrLookupResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def verify_security_code(self,
                             security_code,
                             limit_by=None):
        """Does a GET request to /verify-security-code.

        Check if a security code sent via SMS Verify or Phone Verify is valid

        Args:
            security_code (str): The security code to verify
            limit_by (str, optional): If set then enable additional
                brute-force protection by limiting the number of attempts by
                the supplied value. This can be set to any unique identifier
                you would like to limit by, for example a hash of the users
                email, phone number or IP address. Requests to this API will
                be ignored after approximately 10 failed verification attempts

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/verify-security-code')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('security-code')
                         .value(security_code)
                         .is_required(True))
            .query_param(Parameter()
                         .key('limit-by')
                         .value(limit_by))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VerifySecurityCodeResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()

    def phone_verify(self,
                     number,
                     code_length=6,
                     security_code=None,
                     playback_delay=800,
                     country_code=None,
                     language_code='en',
                     limit=3,
                     limit_ttl=1):
        """Does a POST request to /phone-verify.

        Make an automated call to any valid phone number and playback a unique
        security code

        Args:
            number (str): The phone number to send the verification code to
            code_length (int, optional): The number of digits to use in the
                security code (between 4 and 12)
            security_code (int, optional): Pass in your own security code.
                This is useful if you have implemented TOTP or similar 2FA
                methods. If not set then we will generate a secure random code
            playback_delay (int, optional): The delay in milliseconds between
                the playback of each security code
            country_code (str, optional): ISO 2-letter country code, assume
                numbers are based in this country. <br>If not set numbers are
                assumed to be in international format (with or without the
                leading + sign)
            language_code (str, optional): The language to playback the
                verification code in, available languages are: <ul> <li>de -
                German</li> <li>en - English</li> <li>es - Spanish</li> <li>fr
                - French</li> <li>it - Italian</li> <li>pt - Portuguese</li>
                <li>ru - Russian</li> </ul>
            limit (int, optional): Limit the total number of calls allowed to
                the supplied phone number, if the limit is reached within the
                TTL then error code 14 will be returned
            limit_ttl (int, optional): Set the TTL in number of days that the
                'limit' option will remember a phone number (the default is 1
                day and the maximum is 365 days)

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/phone-verify')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('number')
                        .value(number)
                        .is_required(True))
            .form_param(Parameter()
                        .key('code-length')
                        .value(code_length))
            .form_param(Parameter()
                        .key('security-code')
                        .value(security_code))
            .form_param(Parameter()
                        .key('playback-delay')
                        .value(playback_delay))
            .form_param(Parameter()
                        .key('country-code')
                        .value(country_code))
            .form_param(Parameter()
                        .key('language-code')
                        .value(language_code))
            .form_param(Parameter()
                        .key('limit')
                        .value(limit))
            .form_param(Parameter()
                        .key('limit-ttl')
                        .value(limit_ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('user-id'), Single('api-key')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PhoneVerifyResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Your API request has been rejected. Check error code for details', ApiErrorException)
            .local_error('403', 'You have failed to authenticate', ApiErrorException)
            .local_error('500', 'We messed up, sorry! Your request has caused a fatal exception', ApiErrorException)
            .local_error('default', 'We messed up, sorry! Your request has caused an error', ApiErrorException)
        ).execute()
