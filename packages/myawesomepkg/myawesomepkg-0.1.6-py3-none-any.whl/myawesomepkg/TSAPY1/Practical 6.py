{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b44241f4-33e7-483e-ad33-770c3738e6b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "      <th>species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width  petal_length  petal_width species\n",
       "0           5.1          3.5           1.4          0.2  setosa\n",
       "1           4.9          3.0           1.4          0.2  setosa\n",
       "2           4.7          3.2           1.3          0.2  setosa\n",
       "3           4.6          3.1           1.5          0.2  setosa\n",
       "4           5.0          3.6           1.4          0.2  setosa"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Data Representation in Scikit-Learn\n",
    "import seaborn as sns\n",
    "iris = sns.load_dataset('iris')\n",
    "iris.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "29407558-d45a-4444-beb9-0982c5340b41",
   "metadata": {},
   "outputs": [],
   "source": [
    " import matplotlib.pyplot as plt\n",
    " import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "66305114-31af-43da-ac91-dc18e51882ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Supervised learning example: Simple linear regression\n",
    "rng = np.random.RandomState(42)\n",
    "x = 10 * rng.rand(50)\n",
    "y = 2 * x - 1 + rng.randn(50)\n",
    "plt.scatter(x, y);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "83401fbc-f2ef-47b0-849c-477d4e1f95a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label  sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link \" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link \">i<span>Not fitted</span></span></div></label><div class=\"sk-toggleable__content \"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "model = LinearRegression(fit_intercept=True)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d37cfab3-5d76-44c2-a3c3-b7771253afc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50, 1)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " X = x[:, np.newaxis]\n",
    " X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3ef32ec7-ce44-497e-b2aa-402efcff7adf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.9776566])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X, y)\n",
    "model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e54a1515-4672-4fe6-be81-99a4ac1e3bc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.9033107255311164"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.intercept_\n",
    "-0.90331072553111635"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5b98c9f7-b3f8-4c50-ada4-9bbf9bba5a25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    " xfit = np.linspace(-1, 11)\n",
    " Xfit = xfit[:, np.newaxis]\n",
    " yfit = model.predict(Xfit)\n",
    " plt.scatter(x, y)\n",
    " plt.plot(xfit, yfit);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4d3d2915-5b70-4a34-b5ea-a107f70b7f15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 100 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Loading and visualizing the digits data\n",
    "from sklearn.datasets import load_digits\n",
    "digits = load_digits()\n",
    "digits.images.shape\n",
    "import matplotlib.pyplot as plt\n",
    "fig, axes = plt.subplots(10, 10, figsize=(8, 8),\n",
    " subplot_kw={'xticks':[], 'yticks':[]},\n",
    " gridspec_kw=dict(hspace=0.1, wspace=0.1))\n",
    "for i, ax in enumerate(axes.flat):\n",
    " ax.imshow(digits.images[i], cmap='binary', interpolation='nearest')\n",
    " ax.text(0.05, 0.05, str(digits.target[i]),\n",
    "     transform=ax.transAxes, color='green')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "fb9b507e-c733-4f28-aa27-b5391e67cce2",
   "metadata": {},
   "outputs": [],
   "source": [
    " # Hyperparameters and Model Validation\n",
    " from sklearn.datasets import load_iris\n",
    " iris = load_iris()\n",
    " iris = load_iris()\n",
    " X = iris.data\n",
    " y = iris.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2949b52b-5889-4a52-b509-e176a3b4d86e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "model = KNeighborsClassifier(n_neighbors=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "af8d07d0-5cda-4273-bda7-ea0b6ef78993",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "accuracy_score(y, y_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a76fc5fc-4aed-4d70-8d4e-dbd9ea6c400c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9333333333333333\n"
     ]
    }
   ],
   "source": [
    "#Model validation the right way: Holdout sets\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression  # Example model\n",
    "\n",
    "# Example dataset\n",
    "X, y = load_iris(return_X_y=True)\n",
    "\n",
    "# Split the data\n",
    "X1, X2, y1, y2 = train_test_split(X, y, random_state=0, train_size=0.5)\n",
    "\n",
    "# Model\n",
    "model = LogisticRegression()\n",
    "model.fit(X1, y1)\n",
    "\n",
    "# Prediction\n",
    "y2_model = model.predict(X2)\n",
    "\n",
    "# Evaluation\n",
    "acc = accuracy_score(y2, y2_model)\n",
    "print(\"Accuracy:\", acc)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1752312c-9a4a-44b4-bb8b-2c84906bf358",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature Engineering\n",
    "data = [\n",
    "     {'price': 850000, 'rooms': 4, 'neighborhood': 'Queen Anne'},\n",
    "     {'price': 700000, 'rooms': 3, 'neighborhood': 'Fremont'},\n",
    "     {'price': 650000, 'rooms': 3, 'neighborhood': 'Wallingford'},\n",
    "     {'price': 600000, 'rooms': 2, 'neighborhood': 'Fremont'}\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0d41a31a-1e1e-4f1a-8258-06f44a2528ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[     0,      1,      0, 850000,      4],\n",
       "       [     1,      0,      0, 700000,      3],\n",
       "       [     0,      0,      1, 650000,      3],\n",
       "       [     1,      0,      0, 600000,      2]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_extraction import DictVectorizer\n",
    "vec = DictVectorizer(sparse=False, dtype=int)\n",
    "vec.fit_transform(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ac7053a-8a00-49b7-bf4d-6d3e1373686e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
