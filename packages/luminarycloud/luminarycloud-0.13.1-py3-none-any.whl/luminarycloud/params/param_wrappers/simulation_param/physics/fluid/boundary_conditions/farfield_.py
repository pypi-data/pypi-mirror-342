# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable, _param_name_to_table_type
from google.protobuf.message import Message as _Message

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud.types.adfloat import _to_ad_proto, _from_ad_proto
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from luminarycloud.params.param_wrappers._lib import ParamGroupWrapper, CodeRepr, create_unique_id

from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions_fluid_ import (
    BoundaryConditionsFluid,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions_fluid_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.komega.bc_komega_variables_ import (
    BcKomegaVariables,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.komega.bc_komega_variables_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.spalart_allmaras.bc_sa_variable_ import (
    BcSaVariable,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.spalart_allmaras.bc_sa_variable_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.komega.bc_turbulent_viscosity_and_intensity_komega_ import (
    BcTurbulentViscosityAndIntensityKomega,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.komega.bc_turbulent_viscosity_and_intensity_komega_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.komega.bc_turbulent_viscosity_ratio_and_intensity_komega_ import (
    BcTurbulentViscosityRatioAndIntensityKomega,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.komega.bc_turbulent_viscosity_ratio_and_intensity_komega_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.spalart_allmaras.bc_turbulent_viscosity_ratio_sa_ import (
    BcTurbulentViscosityRatioSa,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.spalart_allmaras.bc_turbulent_viscosity_ratio_sa_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.spalart_allmaras.bc_turbulent_viscosity_sa_ import (
    BcTurbulentViscositySa,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.spalart_allmaras.bc_turbulent_viscosity_sa_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.komega_boundary_conditions_ import (
    KomegaBoundaryConditions,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.komega_boundary_conditions_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.spalart_allmaras_boundary_conditions_ import (
    SpalartAllmarasBoundaryConditions,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence.spalart_allmaras_boundary_conditions_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence_boundary_conditions_ import (
    TurbulenceBoundaryConditions,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.boundary_conditions.turbulence_boundary_conditions_ import *


@dataclass(kw_only=True)
class Farfield(BoundaryConditionsFluid):
    """Farfield boundary condition."""

    momentum: enum.FarfieldMomentum = enum.FarfieldMomentum.FARFIELD_MACH_NUMBER
    "Method of defining the farfield momentum conditions."
    mach_number: float = 0.5
    "Mach number at the boundary."
    velocity: float = 1.0
    "Velocity magnitude at the boundary."
    pressure: float = 101325
    "Static pressure at the boundary relative to the material reference pressure."
    temperature: float = 288.15
    "Static temperature at the boundary."
    direction_specification: enum.FarFieldFlowDirectionSpecification = (
        enum.FarFieldFlowDirectionSpecification.FARFIELD_DIRECTION
    )
    "Method of defining the flow direction at the far-field."
    direction: Vector3 = field(default_factory=lambda: Vector3(1.0, 0.0, 0.0))
    "Vector specifying the flow direction at the far-field boundary. Automatically scaled to a unit vector internally."
    angle_alpha: float = 0.0
    "Angle of attack. Positive angle of attack results in a non-zero far-field velocity component in the negative body-z direction."
    angle_beta: float = 0.0
    "Angle of sideslip. Positive angle of sideslip results in a non-zero far-field velocity component in the positive body-y direction."
    turbulence: TurbulenceBoundaryConditions = field(default_factory=TurbulenceBoundaryConditions)
    "Turbulence boundary conditions."

    def _to_proto(self) -> clientpb.BoundaryConditionsFluid:
        _proto = super()._to_proto()
        _proto.physical_boundary = enum.PhysicalBoundary.FARFIELD.value
        _proto.farfield_momentum = self.momentum.value
        _proto.farfield_mach_number.CopyFrom(_to_ad_proto(self.mach_number))
        _proto.farfield_velocity_magnitude.CopyFrom(_to_ad_proto(self.velocity))
        _proto.farfield_pressure.CopyFrom(_to_ad_proto(self.pressure))
        _proto.farfield_temperature.CopyFrom(_to_ad_proto(self.temperature))
        _proto.far_field_flow_direction_specification = self.direction_specification.value
        _proto.farfield_flow_direction.CopyFrom(self.direction._to_ad_proto())
        _proto.farfield_angle_alpha.CopyFrom(_to_ad_proto(self.angle_alpha))
        _proto.farfield_angle_beta.CopyFrom(_to_ad_proto(self.angle_beta))
        if isinstance(self.turbulence.spalart_allmaras, BcTurbulentViscosityRatioSa):
            _proto.turbulence_specification_spalart_allmaras = clientpb.TURBULENT_VISCOSITY_RATIO_SA
            _proto.turbulent_viscosity_ratio.CopyFrom(
                _to_ad_proto(self.turbulence.spalart_allmaras.viscosity_ratio)
            )
        if isinstance(self.turbulence.spalart_allmaras, BcTurbulentViscositySa):
            _proto.turbulence_specification_spalart_allmaras = clientpb.TURBULENT_VISCOSITY_SA
            _proto.turbulent_viscosity.CopyFrom(
                _to_ad_proto(self.turbulence.spalart_allmaras.viscosity)
            )
        if isinstance(self.turbulence.spalart_allmaras, BcSaVariable):
            _proto.turbulence_specification_spalart_allmaras = clientpb.BC_SA_VARIABLE
            _proto.bc_uniform_nu_tilde.CopyFrom(
                _to_ad_proto(self.turbulence.spalart_allmaras.sa_variable)
            )
            _proto.bc_nu_tilde_col.value = self.turbulence.spalart_allmaras.sa_variable_column_index
        if isinstance(self.turbulence.komega, BcTurbulentViscosityRatioAndIntensityKomega):
            _proto.turbulence_specification_komega = (
                clientpb.BC_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
            )
            _proto.turbulent_viscosity_ratio.CopyFrom(
                _to_ad_proto(self.turbulence.komega.viscosity_ratio)
            )
            _proto.turbulence_intensity.CopyFrom(_to_ad_proto(self.turbulence.komega.intensity))
        if isinstance(self.turbulence.komega, BcTurbulentViscosityAndIntensityKomega):
            _proto.turbulence_specification_komega = (
                clientpb.BC_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
            )
            _proto.turbulent_viscosity.CopyFrom(_to_ad_proto(self.turbulence.komega.viscosity))
            _proto.turbulence_intensity.CopyFrom(_to_ad_proto(self.turbulence.komega.intensity))
        if isinstance(self.turbulence.komega, BcKomegaVariables):
            _proto.turbulence_specification_komega = clientpb.BC_KOMEGA_VARIABLES
            _proto.bc_uniform_tke.CopyFrom(_to_ad_proto(self.turbulence.komega.tke))
            _proto.bc_uniform_omega.CopyFrom(_to_ad_proto(self.turbulence.komega.omega))
            _proto.bc_tke_col.value = self.turbulence.komega.tke_column_index
            _proto.bc_omega_col.value = self.turbulence.komega.omega_column_index
        return _proto

    def _from_proto(self, proto: clientpb.BoundaryConditionsFluid) -> None:
        super()._from_proto(proto)
        assert proto.physical_boundary == enum.PhysicalBoundary.FARFIELD.value
        self.momentum = enum.FarfieldMomentum(proto.farfield_momentum)
        self.mach_number = _from_ad_proto(proto.farfield_mach_number)
        self.velocity = _from_ad_proto(proto.farfield_velocity_magnitude)
        self.pressure = _from_ad_proto(proto.farfield_pressure)
        self.temperature = _from_ad_proto(proto.farfield_temperature)
        self.direction_specification = enum.FarFieldFlowDirectionSpecification(
            proto.far_field_flow_direction_specification
        )
        self.direction._from_ad_proto(proto.farfield_flow_direction)
        self.angle_alpha = _from_ad_proto(proto.farfield_angle_alpha)
        self.angle_beta = _from_ad_proto(proto.farfield_angle_beta)
        if (
            proto.turbulence_specification_spalart_allmaras
            == clientpb.INVALID_TURBULENCE_SPECIFICATION_SPALART_ALLMARAS
        ):
            raise ValueError("Invalid spalart_allmaras_boundary_conditions")
        elif (
            proto.turbulence_specification_spalart_allmaras == clientpb.TURBULENT_VISCOSITY_RATIO_SA
        ):
            self.turbulence.spalart_allmaras = BcTurbulentViscosityRatioSa()
            self.turbulence.spalart_allmaras.viscosity_ratio = _from_ad_proto(
                proto.turbulent_viscosity_ratio
            )
        elif proto.turbulence_specification_spalart_allmaras == clientpb.TURBULENT_VISCOSITY_SA:
            self.turbulence.spalart_allmaras = BcTurbulentViscositySa()
            self.turbulence.spalart_allmaras.viscosity = _from_ad_proto(proto.turbulent_viscosity)
        elif proto.turbulence_specification_spalart_allmaras == clientpb.BC_SA_VARIABLE:
            self.turbulence.spalart_allmaras = BcSaVariable()
            self.turbulence.spalart_allmaras.sa_variable = _from_ad_proto(proto.bc_uniform_nu_tilde)
            self.turbulence.spalart_allmaras.sa_variable_column_index = proto.bc_nu_tilde_col.value
        if (
            proto.turbulence_specification_komega
            == clientpb.INVALID_TURBULENCE_SPECIFICATION_KOMEGA
        ):
            raise ValueError("Invalid komega_boundary_conditions")
        elif (
            proto.turbulence_specification_komega
            == clientpb.BC_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
        ):
            self.turbulence.komega = BcTurbulentViscosityRatioAndIntensityKomega()
            self.turbulence.komega.viscosity_ratio = _from_ad_proto(proto.turbulent_viscosity_ratio)
            self.turbulence.komega.intensity = _from_ad_proto(proto.turbulence_intensity)
        elif (
            proto.turbulence_specification_komega
            == clientpb.BC_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
        ):
            self.turbulence.komega = BcTurbulentViscosityAndIntensityKomega()
            self.turbulence.komega.viscosity = _from_ad_proto(proto.turbulent_viscosity)
            self.turbulence.komega.intensity = _from_ad_proto(proto.turbulence_intensity)
        elif proto.turbulence_specification_komega == clientpb.BC_KOMEGA_VARIABLES:
            self.turbulence.komega = BcKomegaVariables()
            self.turbulence.komega.tke = _from_ad_proto(proto.bc_uniform_tke)
            self.turbulence.komega.omega = _from_ad_proto(proto.bc_uniform_omega)
            self.turbulence.komega.tke_column_index = proto.bc_tke_col.value
            self.turbulence.komega.omega_column_index = proto.bc_omega_col.value
        return None
