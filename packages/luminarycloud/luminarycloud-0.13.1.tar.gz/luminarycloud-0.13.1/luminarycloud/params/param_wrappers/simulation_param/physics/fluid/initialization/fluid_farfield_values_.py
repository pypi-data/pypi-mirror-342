# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable, _param_name_to_table_type
from google.protobuf.message import Message as _Message

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud.types.adfloat import _to_ad_proto, _from_ad_proto
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from luminarycloud.params.param_wrappers._lib import ParamGroupWrapper, CodeRepr, create_unique_id

from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization_fluid_ import (
    InitializationFluid,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization_fluid_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.komega.init_farfield_values_komega_ import (
    InitFarfieldValuesKomega,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.komega.init_farfield_values_komega_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.spalart_allmaras.init_farfield_values_sa_ import (
    InitFarfieldValuesSa,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.spalart_allmaras.init_farfield_values_sa_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.spalart_allmaras.init_sa_variable_ import (
    InitSaVariable,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.spalart_allmaras.init_sa_variable_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.komega.init_turbulent_viscosity_and_intensity_komega_ import (
    InitTurbulentViscosityAndIntensityKomega,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.komega.init_turbulent_viscosity_and_intensity_komega_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.komega.init_turbulent_viscosity_ratio_and_intensity_komega_ import (
    InitTurbulentViscosityRatioAndIntensityKomega,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.komega.init_turbulent_viscosity_ratio_and_intensity_komega_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.spalart_allmaras.init_turbulent_viscosity_ratio_sa_ import (
    InitTurbulentViscosityRatioSa,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.spalart_allmaras.init_turbulent_viscosity_ratio_sa_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.spalart_allmaras.init_turbulent_viscosity_sa_ import (
    InitTurbulentViscositySa,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.spalart_allmaras.init_turbulent_viscosity_sa_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.komega_initialization_ import (
    KomegaInitialization,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.komega_initialization_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.spalart_allmaras_initialization_ import (
    SpalartAllmarasInitialization,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence.spalart_allmaras_initialization_ import *
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence_initialization_ import (
    TurbulenceInitialization,
)
from luminarycloud.params.param_wrappers.simulation_param.physics.fluid.initialization.turbulence_initialization_ import *


@dataclass(kw_only=True)
class FluidFarfieldValues(InitializationFluid):
    """Initialize all fields uniformly in space using the values at the far-field boundary."""

    turbulence: TurbulenceInitialization = field(default_factory=TurbulenceInitialization)
    ""

    def _to_proto(self) -> clientpb.InitializationFluid:
        _proto = super()._to_proto()
        _proto.initialization_type = enum.InitializationType.FARFIELD_VALUES.value
        if isinstance(self.turbulence.spalart_allmaras, InitTurbulentViscosityRatioSa):
            _proto.turbulent_variable_initialization_type_sa = (
                clientpb.INIT_TURBULENT_VISCOSITY_RATIO_SA
            )
            _proto.init_turbulent_viscosity_ratio.CopyFrom(
                _to_ad_proto(self.turbulence.spalart_allmaras.viscosity_ratio)
            )
        if isinstance(self.turbulence.spalart_allmaras, InitTurbulentViscositySa):
            _proto.turbulent_variable_initialization_type_sa = clientpb.INIT_TURBULENT_VISCOSITY_SA
            _proto.init_turbulent_viscosity.CopyFrom(
                _to_ad_proto(self.turbulence.spalart_allmaras.viscosity)
            )
        if isinstance(self.turbulence.spalart_allmaras, InitSaVariable):
            _proto.turbulent_variable_initialization_type_sa = clientpb.INIT_SA_VARIABLE
            _proto.uniform_nu_tilde.CopyFrom(
                _to_ad_proto(self.turbulence.spalart_allmaras.sa_variable)
            )
        if isinstance(self.turbulence.spalart_allmaras, InitFarfieldValuesSa):
            _proto.turbulent_variable_initialization_type_sa = clientpb.INIT_FARFIELD_VALUES_SA
        if isinstance(self.turbulence.komega, InitTurbulentViscosityRatioAndIntensityKomega):
            _proto.turbulent_variable_initialization_type_komega = (
                clientpb.INIT_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
            )
            _proto.init_turbulent_viscosity_ratio.CopyFrom(
                _to_ad_proto(self.turbulence.komega.viscosity_ratio)
            )
            _proto.init_turbulence_intensity.CopyFrom(
                _to_ad_proto(self.turbulence.komega.intensity)
            )
        if isinstance(self.turbulence.komega, InitTurbulentViscosityAndIntensityKomega):
            _proto.turbulent_variable_initialization_type_komega = (
                clientpb.INIT_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
            )
            _proto.init_turbulent_viscosity.CopyFrom(_to_ad_proto(self.turbulence.komega.viscosity))
            _proto.init_turbulence_intensity.CopyFrom(
                _to_ad_proto(self.turbulence.komega.intensity)
            )
        if isinstance(self.turbulence.komega, InitFarfieldValuesKomega):
            _proto.turbulent_variable_initialization_type_komega = (
                clientpb.INIT_FARFIELD_VALUES_KOMEGA
            )
        return _proto

    def _from_proto(self, proto: clientpb.InitializationFluid) -> None:
        super()._from_proto(proto)
        assert proto.initialization_type == enum.InitializationType.FARFIELD_VALUES.value
        if (
            proto.turbulent_variable_initialization_type_sa
            == clientpb.INVALID_TURBULENT_VARIABLE_INITIALIZATION_TYPE_SA
        ):
            raise ValueError("Invalid spalart_allmaras_initialization")
        elif (
            proto.turbulent_variable_initialization_type_sa
            == clientpb.INIT_TURBULENT_VISCOSITY_RATIO_SA
        ):
            self.turbulence.spalart_allmaras = InitTurbulentViscosityRatioSa()
            self.turbulence.spalart_allmaras.viscosity_ratio = _from_ad_proto(
                proto.init_turbulent_viscosity_ratio
            )
        elif (
            proto.turbulent_variable_initialization_type_sa == clientpb.INIT_TURBULENT_VISCOSITY_SA
        ):
            self.turbulence.spalart_allmaras = InitTurbulentViscositySa()
            self.turbulence.spalart_allmaras.viscosity = _from_ad_proto(
                proto.init_turbulent_viscosity
            )
        elif proto.turbulent_variable_initialization_type_sa == clientpb.INIT_SA_VARIABLE:
            self.turbulence.spalart_allmaras = InitSaVariable()
            self.turbulence.spalart_allmaras.sa_variable = _from_ad_proto(proto.uniform_nu_tilde)
        elif proto.turbulent_variable_initialization_type_sa == clientpb.INIT_FARFIELD_VALUES_SA:
            self.turbulence.spalart_allmaras = InitFarfieldValuesSa()
        if (
            proto.turbulent_variable_initialization_type_komega
            == clientpb.INVALID_TURBULENT_VARIABLE_INITIALIZATION_TYPE_KOMEGA
        ):
            raise ValueError("Invalid komega_initialization")
        elif (
            proto.turbulent_variable_initialization_type_komega
            == clientpb.INIT_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
        ):
            self.turbulence.komega = InitTurbulentViscosityRatioAndIntensityKomega()
            self.turbulence.komega.viscosity_ratio = _from_ad_proto(
                proto.init_turbulent_viscosity_ratio
            )
            self.turbulence.komega.intensity = _from_ad_proto(proto.init_turbulence_intensity)
        elif (
            proto.turbulent_variable_initialization_type_komega
            == clientpb.INIT_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
        ):
            self.turbulence.komega = InitTurbulentViscosityAndIntensityKomega()
            self.turbulence.komega.viscosity = _from_ad_proto(proto.init_turbulent_viscosity)
            self.turbulence.komega.intensity = _from_ad_proto(proto.init_turbulence_intensity)
        elif (
            proto.turbulent_variable_initialization_type_komega
            == clientpb.INIT_FARFIELD_VALUES_KOMEGA
        ):
            self.turbulence.komega = InitFarfieldValuesKomega()
        return None
