"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import luminarycloud._proto.base.base_pb2
import luminarycloud._proto.cad.shape_pb2
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class RefinementLevel(google.protobuf.message.Message):
    """In OpenFOAM this refers to the refinement level specification like
    (distance level).
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DISTANCE_FIELD_NUMBER: builtins.int
    LEVEL_FIELD_NUMBER: builtins.int
    distance: builtins.float
    level: builtins.float
    def __init__(
        self,
        *,
        distance: builtins.float | None = ...,
        level: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_distance", b"_distance", "_level", b"_level", "distance", b"distance", "level", b"level"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_distance", b"_distance", "_level", b"_level", "distance", b"distance", "level", b"level"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_distance", b"_distance"]) -> typing_extensions.Literal["distance"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_level", b"_level"]) -> typing_extensions.Literal["level"] | None: ...

global___RefinementLevel = RefinementLevel

class RefinementSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REFINEMENT_LEVELS_FIELD_NUMBER: builtins.int
    @property
    def refinement_levels(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RefinementLevel]: ...
    def __init__(
        self,
        *,
        refinement_levels: collections.abc.Iterable[global___RefinementLevel] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["refinement_levels", b"refinement_levels"]) -> None: ...

global___RefinementSpec = RefinementSpec

class OutputInfo(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OUTPUT_LCMESH_URL_FIELD_NUMBER: builtins.int
    output_lcmesh_url: builtins.str
    def __init__(
        self,
        *,
        output_lcmesh_url: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["output_lcmesh_url", b"output_lcmesh_url"]) -> None: ...

global___OutputInfo = OutputInfo

class BackgroundMesh(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CUBE_FIELD_NUMBER: builtins.int
    N_X_FIELD_NUMBER: builtins.int
    N_Y_FIELD_NUMBER: builtins.int
    N_Z_FIELD_NUMBER: builtins.int
    @property
    def cube(self) -> luminarycloud._proto.cad.shape_pb2.Cube: ...
    n_x: builtins.int
    """The number of cells in each principal direction."""
    n_y: builtins.int
    n_z: builtins.int
    def __init__(
        self,
        *,
        cube: luminarycloud._proto.cad.shape_pb2.Cube | None = ...,
        n_x: builtins.int = ...,
        n_y: builtins.int = ...,
        n_z: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cube", b"cube", "shape", b"shape"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cube", b"cube", "n_x", b"n_x", "n_y", b"n_y", "n_z", b"n_z", "shape", b"shape"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["shape", b"shape"]) -> typing_extensions.Literal["cube"] | None: ...

global___BackgroundMesh = BackgroundMesh

class RefinementSurfaces(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INPUT_FILE_REFINEMENT_MIN_LEVEL_FIELD_NUMBER: builtins.int
    INPUT_FILE_REFINEMENT_MAX_LEVEL_FIELD_NUMBER: builtins.int
    input_file_refinement_min_level: builtins.float
    input_file_refinement_max_level: builtins.float
    def __init__(
        self,
        *,
        input_file_refinement_min_level: builtins.float | None = ...,
        input_file_refinement_max_level: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_input_file_refinement_max_level", b"_input_file_refinement_max_level", "_input_file_refinement_min_level", b"_input_file_refinement_min_level", "input_file_refinement_max_level", b"input_file_refinement_max_level", "input_file_refinement_min_level", b"input_file_refinement_min_level"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_input_file_refinement_max_level", b"_input_file_refinement_max_level", "_input_file_refinement_min_level", b"_input_file_refinement_min_level", "input_file_refinement_max_level", b"input_file_refinement_max_level", "input_file_refinement_min_level", b"input_file_refinement_min_level"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_input_file_refinement_max_level", b"_input_file_refinement_max_level"]) -> typing_extensions.Literal["input_file_refinement_max_level"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_input_file_refinement_min_level", b"_input_file_refinement_min_level"]) -> typing_extensions.Literal["input_file_refinement_min_level"] | None: ...

global___RefinementSurfaces = RefinementSurfaces

class CastellatedMeshControls(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MAX_GLOBAL_CELLS_FIELD_NUMBER: builtins.int
    MIN_REFINEMENT_CELLS_FIELD_NUMBER: builtins.int
    N_CELLS_BETWEEN_LEVELS_FIELD_NUMBER: builtins.int
    RESOLVE_FEATURE_ANGLE_FIELD_NUMBER: builtins.int
    LOCATION_IN_MESH_FIELD_NUMBER: builtins.int
    REFINEMENT_SURFACES_FIELD_NUMBER: builtins.int
    max_global_cells: builtins.int
    min_refinement_cells: builtins.int
    n_cells_between_levels: builtins.int
    resolve_feature_angle: builtins.float
    @property
    def location_in_mesh(self) -> luminarycloud._proto.base.base_pb2.Vector3:
        """Point that allows distinguishing between interior and exterior of the
        mesh. It must be inside of the wanted mesh.
        """
    @property
    def refinement_surfaces(self) -> global___RefinementSurfaces: ...
    def __init__(
        self,
        *,
        max_global_cells: builtins.int | None = ...,
        min_refinement_cells: builtins.int | None = ...,
        n_cells_between_levels: builtins.int | None = ...,
        resolve_feature_angle: builtins.float | None = ...,
        location_in_mesh: luminarycloud._proto.base.base_pb2.Vector3 | None = ...,
        refinement_surfaces: global___RefinementSurfaces | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_max_global_cells", b"_max_global_cells", "_min_refinement_cells", b"_min_refinement_cells", "_n_cells_between_levels", b"_n_cells_between_levels", "_resolve_feature_angle", b"_resolve_feature_angle", "location_in_mesh", b"location_in_mesh", "max_global_cells", b"max_global_cells", "min_refinement_cells", b"min_refinement_cells", "n_cells_between_levels", b"n_cells_between_levels", "refinement_surfaces", b"refinement_surfaces", "resolve_feature_angle", b"resolve_feature_angle"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_max_global_cells", b"_max_global_cells", "_min_refinement_cells", b"_min_refinement_cells", "_n_cells_between_levels", b"_n_cells_between_levels", "_resolve_feature_angle", b"_resolve_feature_angle", "location_in_mesh", b"location_in_mesh", "max_global_cells", b"max_global_cells", "min_refinement_cells", b"min_refinement_cells", "n_cells_between_levels", b"n_cells_between_levels", "refinement_surfaces", b"refinement_surfaces", "resolve_feature_angle", b"resolve_feature_angle"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_max_global_cells", b"_max_global_cells"]) -> typing_extensions.Literal["max_global_cells"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_min_refinement_cells", b"_min_refinement_cells"]) -> typing_extensions.Literal["min_refinement_cells"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_cells_between_levels", b"_n_cells_between_levels"]) -> typing_extensions.Literal["n_cells_between_levels"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_resolve_feature_angle", b"_resolve_feature_angle"]) -> typing_extensions.Literal["resolve_feature_angle"] | None: ...

global___CastellatedMeshControls = CastellatedMeshControls

class FeatureEdges(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FEATURE_ANGLE_FIELD_NUMBER: builtins.int
    REFINEMENT_SPEC_FIELD_NUMBER: builtins.int
    feature_angle: builtins.float
    """Extract the edges shared between surface normals that form an angle less
    than feature_angle degrees.
    """
    @property
    def refinement_spec(self) -> global___RefinementSpec: ...
    def __init__(
        self,
        *,
        feature_angle: builtins.float | None = ...,
        refinement_spec: global___RefinementSpec | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_feature_angle", b"_feature_angle", "feature_angle", b"feature_angle", "refinement_spec", b"refinement_spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_feature_angle", b"_feature_angle", "feature_angle", b"feature_angle", "refinement_spec", b"refinement_spec"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_feature_angle", b"_feature_angle"]) -> typing_extensions.Literal["feature_angle"] | None: ...

global___FeatureEdges = FeatureEdges

class SnapControls(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    N_SMOOTH_PATCH_FIELD_NUMBER: builtins.int
    TOLERANCE_FIELD_NUMBER: builtins.int
    N_SOLVE_ITER_FIELD_NUMBER: builtins.int
    N_RELAX_ITER_FIELD_NUMBER: builtins.int
    N_FEATURE_SNAP_ITER_FIELD_NUMBER: builtins.int
    n_smooth_patch: builtins.int
    tolerance: builtins.float
    n_solve_iter: builtins.int
    n_relax_iter: builtins.int
    n_feature_snap_iter: builtins.int
    def __init__(
        self,
        *,
        n_smooth_patch: builtins.int | None = ...,
        tolerance: builtins.float | None = ...,
        n_solve_iter: builtins.int | None = ...,
        n_relax_iter: builtins.int | None = ...,
        n_feature_snap_iter: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_n_feature_snap_iter", b"_n_feature_snap_iter", "_n_relax_iter", b"_n_relax_iter", "_n_smooth_patch", b"_n_smooth_patch", "_n_solve_iter", b"_n_solve_iter", "_tolerance", b"_tolerance", "n_feature_snap_iter", b"n_feature_snap_iter", "n_relax_iter", b"n_relax_iter", "n_smooth_patch", b"n_smooth_patch", "n_solve_iter", b"n_solve_iter", "tolerance", b"tolerance"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_n_feature_snap_iter", b"_n_feature_snap_iter", "_n_relax_iter", b"_n_relax_iter", "_n_smooth_patch", b"_n_smooth_patch", "_n_solve_iter", b"_n_solve_iter", "_tolerance", b"_tolerance", "n_feature_snap_iter", b"n_feature_snap_iter", "n_relax_iter", b"n_relax_iter", "n_smooth_patch", b"n_smooth_patch", "n_solve_iter", b"n_solve_iter", "tolerance", b"tolerance"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_feature_snap_iter", b"_n_feature_snap_iter"]) -> typing_extensions.Literal["n_feature_snap_iter"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_relax_iter", b"_n_relax_iter"]) -> typing_extensions.Literal["n_relax_iter"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_smooth_patch", b"_n_smooth_patch"]) -> typing_extensions.Literal["n_smooth_patch"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_solve_iter", b"_n_solve_iter"]) -> typing_extensions.Literal["n_solve_iter"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_tolerance", b"_tolerance"]) -> typing_extensions.Literal["tolerance"] | None: ...

global___SnapControls = SnapControls

class AddLayersControls(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RELATIVE_SIZES_FIELD_NUMBER: builtins.int
    EXPANSION_RATIO_FIELD_NUMBER: builtins.int
    FINAL_LAYER_THICKNESS_FIELD_NUMBER: builtins.int
    MIN_THICKNESS_FIELD_NUMBER: builtins.int
    N_GROW_FIELD_NUMBER: builtins.int
    FEATURE_ANGLE_FIELD_NUMBER: builtins.int
    SLIP_FEATURE_ANGLE_FIELD_NUMBER: builtins.int
    N_RELAX_ITER_FIELD_NUMBER: builtins.int
    N_SMOOTH_SURFACE_NORMALS_FIELD_NUMBER: builtins.int
    N_SMOOTH_NORMALS_FIELD_NUMBER: builtins.int
    N_SMOOTH_THICKNESS_FIELD_NUMBER: builtins.int
    MAX_FACE_THICKNESS_RATIO_FIELD_NUMBER: builtins.int
    MAX_THICKNESS_TO_MEDIAL_RATIO_FIELD_NUMBER: builtins.int
    MIN_MEDIAL_AXIS_ANGLE_FIELD_NUMBER: builtins.int
    N_BUFFER_CELLS_NO_EXTRUDE_FIELD_NUMBER: builtins.int
    N_LAYER_ITER_FIELD_NUMBER: builtins.int
    N_SURFACE_LAYERS_FIELD_NUMBER: builtins.int
    relative_sizes: builtins.bool
    expansion_ratio: builtins.float
    final_layer_thickness: builtins.float
    min_thickness: builtins.float
    n_grow: builtins.int
    feature_angle: builtins.float
    slip_feature_angle: builtins.float
    n_relax_iter: builtins.int
    n_smooth_surface_normals: builtins.int
    n_smooth_normals: builtins.int
    n_smooth_thickness: builtins.int
    max_face_thickness_ratio: builtins.float
    max_thickness_to_medial_ratio: builtins.float
    min_medial_axis_angle: builtins.float
    n_buffer_cells_no_extrude: builtins.int
    n_layer_iter: builtins.int
    n_surface_layers: builtins.int
    def __init__(
        self,
        *,
        relative_sizes: builtins.bool | None = ...,
        expansion_ratio: builtins.float | None = ...,
        final_layer_thickness: builtins.float | None = ...,
        min_thickness: builtins.float | None = ...,
        n_grow: builtins.int | None = ...,
        feature_angle: builtins.float | None = ...,
        slip_feature_angle: builtins.float | None = ...,
        n_relax_iter: builtins.int | None = ...,
        n_smooth_surface_normals: builtins.int | None = ...,
        n_smooth_normals: builtins.int | None = ...,
        n_smooth_thickness: builtins.int | None = ...,
        max_face_thickness_ratio: builtins.float | None = ...,
        max_thickness_to_medial_ratio: builtins.float | None = ...,
        min_medial_axis_angle: builtins.float | None = ...,
        n_buffer_cells_no_extrude: builtins.int | None = ...,
        n_layer_iter: builtins.int | None = ...,
        n_surface_layers: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_expansion_ratio", b"_expansion_ratio", "_feature_angle", b"_feature_angle", "_final_layer_thickness", b"_final_layer_thickness", "_max_face_thickness_ratio", b"_max_face_thickness_ratio", "_max_thickness_to_medial_ratio", b"_max_thickness_to_medial_ratio", "_min_medial_axis_angle", b"_min_medial_axis_angle", "_min_thickness", b"_min_thickness", "_n_buffer_cells_no_extrude", b"_n_buffer_cells_no_extrude", "_n_grow", b"_n_grow", "_n_layer_iter", b"_n_layer_iter", "_n_relax_iter", b"_n_relax_iter", "_n_smooth_normals", b"_n_smooth_normals", "_n_smooth_surface_normals", b"_n_smooth_surface_normals", "_n_smooth_thickness", b"_n_smooth_thickness", "_n_surface_layers", b"_n_surface_layers", "_relative_sizes", b"_relative_sizes", "_slip_feature_angle", b"_slip_feature_angle", "expansion_ratio", b"expansion_ratio", "feature_angle", b"feature_angle", "final_layer_thickness", b"final_layer_thickness", "max_face_thickness_ratio", b"max_face_thickness_ratio", "max_thickness_to_medial_ratio", b"max_thickness_to_medial_ratio", "min_medial_axis_angle", b"min_medial_axis_angle", "min_thickness", b"min_thickness", "n_buffer_cells_no_extrude", b"n_buffer_cells_no_extrude", "n_grow", b"n_grow", "n_layer_iter", b"n_layer_iter", "n_relax_iter", b"n_relax_iter", "n_smooth_normals", b"n_smooth_normals", "n_smooth_surface_normals", b"n_smooth_surface_normals", "n_smooth_thickness", b"n_smooth_thickness", "n_surface_layers", b"n_surface_layers", "relative_sizes", b"relative_sizes", "slip_feature_angle", b"slip_feature_angle"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_expansion_ratio", b"_expansion_ratio", "_feature_angle", b"_feature_angle", "_final_layer_thickness", b"_final_layer_thickness", "_max_face_thickness_ratio", b"_max_face_thickness_ratio", "_max_thickness_to_medial_ratio", b"_max_thickness_to_medial_ratio", "_min_medial_axis_angle", b"_min_medial_axis_angle", "_min_thickness", b"_min_thickness", "_n_buffer_cells_no_extrude", b"_n_buffer_cells_no_extrude", "_n_grow", b"_n_grow", "_n_layer_iter", b"_n_layer_iter", "_n_relax_iter", b"_n_relax_iter", "_n_smooth_normals", b"_n_smooth_normals", "_n_smooth_surface_normals", b"_n_smooth_surface_normals", "_n_smooth_thickness", b"_n_smooth_thickness", "_n_surface_layers", b"_n_surface_layers", "_relative_sizes", b"_relative_sizes", "_slip_feature_angle", b"_slip_feature_angle", "expansion_ratio", b"expansion_ratio", "feature_angle", b"feature_angle", "final_layer_thickness", b"final_layer_thickness", "max_face_thickness_ratio", b"max_face_thickness_ratio", "max_thickness_to_medial_ratio", b"max_thickness_to_medial_ratio", "min_medial_axis_angle", b"min_medial_axis_angle", "min_thickness", b"min_thickness", "n_buffer_cells_no_extrude", b"n_buffer_cells_no_extrude", "n_grow", b"n_grow", "n_layer_iter", b"n_layer_iter", "n_relax_iter", b"n_relax_iter", "n_smooth_normals", b"n_smooth_normals", "n_smooth_surface_normals", b"n_smooth_surface_normals", "n_smooth_thickness", b"n_smooth_thickness", "n_surface_layers", b"n_surface_layers", "relative_sizes", b"relative_sizes", "slip_feature_angle", b"slip_feature_angle"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_expansion_ratio", b"_expansion_ratio"]) -> typing_extensions.Literal["expansion_ratio"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_feature_angle", b"_feature_angle"]) -> typing_extensions.Literal["feature_angle"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_final_layer_thickness", b"_final_layer_thickness"]) -> typing_extensions.Literal["final_layer_thickness"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_max_face_thickness_ratio", b"_max_face_thickness_ratio"]) -> typing_extensions.Literal["max_face_thickness_ratio"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_max_thickness_to_medial_ratio", b"_max_thickness_to_medial_ratio"]) -> typing_extensions.Literal["max_thickness_to_medial_ratio"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_min_medial_axis_angle", b"_min_medial_axis_angle"]) -> typing_extensions.Literal["min_medial_axis_angle"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_min_thickness", b"_min_thickness"]) -> typing_extensions.Literal["min_thickness"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_buffer_cells_no_extrude", b"_n_buffer_cells_no_extrude"]) -> typing_extensions.Literal["n_buffer_cells_no_extrude"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_grow", b"_n_grow"]) -> typing_extensions.Literal["n_grow"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_layer_iter", b"_n_layer_iter"]) -> typing_extensions.Literal["n_layer_iter"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_relax_iter", b"_n_relax_iter"]) -> typing_extensions.Literal["n_relax_iter"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_smooth_normals", b"_n_smooth_normals"]) -> typing_extensions.Literal["n_smooth_normals"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_smooth_surface_normals", b"_n_smooth_surface_normals"]) -> typing_extensions.Literal["n_smooth_surface_normals"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_smooth_thickness", b"_n_smooth_thickness"]) -> typing_extensions.Literal["n_smooth_thickness"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_n_surface_layers", b"_n_surface_layers"]) -> typing_extensions.Literal["n_surface_layers"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_relative_sizes", b"_relative_sizes"]) -> typing_extensions.Literal["relative_sizes"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_slip_feature_angle", b"_slip_feature_angle"]) -> typing_extensions.Literal["slip_feature_angle"] | None: ...

global___AddLayersControls = AddLayersControls

class RefinementRegionParams(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    CUBE_FIELD_NUMBER: builtins.int
    REFINEMENT_SPEC_FIELD_NUMBER: builtins.int
    id: builtins.str
    """The id of the refinement region to be used when visualizing the regions."""
    name: builtins.str
    """the user-defined name of the region."""
    @property
    def cube(self) -> luminarycloud._proto.cad.shape_pb2.Cube: ...
    @property
    def refinement_spec(self) -> global___RefinementSpec: ...
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        name: builtins.str = ...,
        cube: luminarycloud._proto.cad.shape_pb2.Cube | None = ...,
        refinement_spec: global___RefinementSpec | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cube", b"cube", "refinement_spec", b"refinement_spec", "shape", b"shape"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cube", b"cube", "id", b"id", "name", b"name", "refinement_spec", b"refinement_spec", "shape", b"shape"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["shape", b"shape"]) -> typing_extensions.Literal["cube"] | None: ...

global___RefinementRegionParams = RefinementRegionParams

class OpenfoamMeshShmConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FEATURE_EDGES_FIELD_NUMBER: builtins.int
    CASTELLATED_MESH_CONTROLS_FIELD_NUMBER: builtins.int
    SNAP_CONTROLS_FIELD_NUMBER: builtins.int
    ADD_LAYERS_CONTROLS_FIELD_NUMBER: builtins.int
    @property
    def feature_edges(self) -> global___FeatureEdges: ...
    @property
    def castellated_mesh_controls(self) -> global___CastellatedMeshControls: ...
    @property
    def snap_controls(self) -> global___SnapControls: ...
    @property
    def add_layers_controls(self) -> global___AddLayersControls: ...
    def __init__(
        self,
        *,
        feature_edges: global___FeatureEdges | None = ...,
        castellated_mesh_controls: global___CastellatedMeshControls | None = ...,
        snap_controls: global___SnapControls | None = ...,
        add_layers_controls: global___AddLayersControls | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_add_layers_controls", b"_add_layers_controls", "_castellated_mesh_controls", b"_castellated_mesh_controls", "_feature_edges", b"_feature_edges", "_snap_controls", b"_snap_controls", "add_layers_controls", b"add_layers_controls", "castellated_mesh_controls", b"castellated_mesh_controls", "feature_edges", b"feature_edges", "snap_controls", b"snap_controls"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_add_layers_controls", b"_add_layers_controls", "_castellated_mesh_controls", b"_castellated_mesh_controls", "_feature_edges", b"_feature_edges", "_snap_controls", b"_snap_controls", "add_layers_controls", b"add_layers_controls", "castellated_mesh_controls", b"castellated_mesh_controls", "feature_edges", b"feature_edges", "snap_controls", b"snap_controls"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_add_layers_controls", b"_add_layers_controls"]) -> typing_extensions.Literal["add_layers_controls"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_castellated_mesh_controls", b"_castellated_mesh_controls"]) -> typing_extensions.Literal["castellated_mesh_controls"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_feature_edges", b"_feature_edges"]) -> typing_extensions.Literal["feature_edges"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_snap_controls", b"_snap_controls"]) -> typing_extensions.Literal["snap_controls"] | None: ...

global___OpenfoamMeshShmConfig = OpenfoamMeshShmConfig

class OpenfoamMeshConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INPUT_URL_FIELD_NUMBER: builtins.int
    BACKGROUND_MESH_FIELD_NUMBER: builtins.int
    REFINEMENT_REGIONS_FIELD_NUMBER: builtins.int
    SHM_CONFIG_FIELD_NUMBER: builtins.int
    OUTPUT_INFO_FIELD_NUMBER: builtins.int
    MESH_ID_FIELD_NUMBER: builtins.int
    input_url: builtins.str
    @property
    def background_mesh(self) -> global___BackgroundMesh: ...
    @property
    def refinement_regions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RefinementRegionParams]: ...
    @property
    def shm_config(self) -> global___OpenfoamMeshShmConfig:
        """In case we want to support CfMesh."""
    @property
    def output_info(self) -> global___OutputInfo: ...
    mesh_id: builtins.str
    """We are being lazy and not creating a DB relation here, so store the mesh
    id in the config.
    """
    def __init__(
        self,
        *,
        input_url: builtins.str = ...,
        background_mesh: global___BackgroundMesh | None = ...,
        refinement_regions: collections.abc.Iterable[global___RefinementRegionParams] | None = ...,
        shm_config: global___OpenfoamMeshShmConfig | None = ...,
        output_info: global___OutputInfo | None = ...,
        mesh_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_background_mesh", b"_background_mesh", "background_mesh", b"background_mesh", "config", b"config", "output_info", b"output_info", "shm_config", b"shm_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_background_mesh", b"_background_mesh", "background_mesh", b"background_mesh", "config", b"config", "input_url", b"input_url", "mesh_id", b"mesh_id", "output_info", b"output_info", "refinement_regions", b"refinement_regions", "shm_config", b"shm_config"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_background_mesh", b"_background_mesh"]) -> typing_extensions.Literal["background_mesh"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["config", b"config"]) -> typing_extensions.Literal["shm_config"] | None: ...

global___OpenfoamMeshConfig = OpenfoamMeshConfig

class HexMeshSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILE_URL_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    BACKGROUND_MESH_FIELD_NUMBER: builtins.int
    REFINEMENT_REGIONS_FIELD_NUMBER: builtins.int
    SHM_CONFIG_FIELD_NUMBER: builtins.int
    file_url: builtins.str
    """Input file (STL or obj)."""
    name: builtins.str
    @property
    def background_mesh(self) -> global___BackgroundMesh: ...
    @property
    def refinement_regions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RefinementRegionParams]: ...
    @property
    def shm_config(self) -> global___OpenfoamMeshShmConfig:
        """In case we want to support CfMesh."""
    def __init__(
        self,
        *,
        file_url: builtins.str = ...,
        name: builtins.str = ...,
        background_mesh: global___BackgroundMesh | None = ...,
        refinement_regions: collections.abc.Iterable[global___RefinementRegionParams] | None = ...,
        shm_config: global___OpenfoamMeshShmConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_background_mesh", b"_background_mesh", "background_mesh", b"background_mesh", "config", b"config", "shm_config", b"shm_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_background_mesh", b"_background_mesh", "background_mesh", b"background_mesh", "config", b"config", "file_url", b"file_url", "name", b"name", "refinement_regions", b"refinement_regions", "shm_config", b"shm_config"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_background_mesh", b"_background_mesh"]) -> typing_extensions.Literal["background_mesh"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["config", b"config"]) -> typing_extensions.Literal["shm_config"] | None: ...

global___HexMeshSpec = HexMeshSpec
