Metadata-Version: 2.4
Name: fortepyan
Version: 0.4.3
Summary: Process MIDI piano with (almost) no pain
Author-email: Piano For AI <roszcz+fortepyan@gmail.com>
Project-URL: Homepage, https://github.com/Nospoko/fortepyan
Keywords: midi,music,piano
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: appdirs>=1.4.4
Requires-Dist: pandas
Requires-Dist: midi2audio>=0.1.1
Requires-Dist: numpy>=1.23.4
Requires-Dist: pretty-midi>=0.2.9
Requires-Dist: pydub>=0.25
Requires-Dist: matplotlib>=3.6.2
Requires-Dist: Levenshtein>=0.20.9
Requires-Dist: cmcrameri>=1.5
Provides-Extra: dev
Requires-Dist: pre-commit~=3.8.0; extra == "dev"
Requires-Dist: pytest-watch==4.2.0; extra == "dev"
Requires-Dist: streamlit-pianoroll==0.7.1; extra == "dev"

# Fortepyan :musical_keyboard:
![GitHub CI](https://github.com/Nospoko/Fortepyan/actions/workflows/ci_tests.yaml/badge.svg?branch=master) [![Python 3.9](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads) [![PyPI version](https://img.shields.io/pypi/v/fortepyan.svg)](https://pypi.org/project/fortepyan/) [![PyPI download month](https://img.shields.io/pypi/dm/fortepyan.svg)](https://pypi.org/project/fortepyan/)

### Usage

```python
import fortepyan as ff

piece = ff.MidiPiece.from_file("mymidi.mid")

ff.view.draw_pianoroll_with_velocities(piece)
ff.view.make_piano_roll_video(piece, "tmp.mp4")
```

### Development

Pre-commit hooks with forced python formatting ([black](https://github.com/psf/black), [flake8](https://flake8.pycqa.org/en/latest/), and [isort](https://pycqa.github.io/isort/)):

```sh
pip install pre-commit
pre-commit install
```

Whenever you execute `git commit` the files altered / added within the commit will be checked and corrected. `black` and `isort` can modify files locally - if that happens you have to `git add` them again.
You might also be prompted to introduce some fixes manually.

To run the hooks against all files without running `git commit`:

```sh
pre-commit run --all-files
```

Package release:
```sh
# from the root directory with clean working tree
# replace patch with one of: [major, minor, patch]
./scripts/release/start_release.sh patch

# Make any additional changes to the release commit
./scripts/release/finish_release.sh
```

#### Tests

Recommended way to run and monitor tests is using pytest-watch:

```sh
ptw
```
