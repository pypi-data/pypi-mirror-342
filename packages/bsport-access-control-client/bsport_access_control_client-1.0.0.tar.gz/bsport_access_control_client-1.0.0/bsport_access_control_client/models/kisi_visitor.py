
"""
    Access Control API

    One Ring to rule them all, One ring to find them; One ring to integrate them all and in a short time, generate a lot of money ðŸ¤‘.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr


class KisiVisitor(BaseModel):
    """
    This serializer maps the kisi \"Visitor\" properties to our Visitor model.
    """ # noqa: E501
    id: StrictStr
    organization_id: StrictStr | None = Field(description="Returns the kisi organization_id corresponding to the provider_config.")
    email: StrictStr = Field(description="Email of the visitor.")
    name: StrictStr
    confirm: StrictStr
    send_emails: StrictStr
    access_enabled: StrictStr
    password_flow_enabled: StrictStr
    __properties: ClassVar[list[str]] = ["id", "organization_id", "email", "name", "confirm", "send_emails", "access_enabled", "password_flow_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of KisiVisitor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: set[str] = set([
            "id",
            "organization_id",
            "email",
            "name",
            "confirm",
            "send_emails",
            "access_enabled",
            "password_flow_enabled",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organization_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of KisiVisitor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "organization_id": obj.get("organization_id"),
            "email": obj.get("email"),
            "name": obj.get("name"),
            "confirm": obj.get("confirm"),
            "send_emails": obj.get("send_emails"),
            "access_enabled": obj.get("access_enabled"),
            "password_flow_enabled": obj.get("password_flow_enabled")
        })
        return _obj


