
"""
    Access Control API

    One Ring to rule them all, One ring to find them; One ring to integrate them all and in a short time, generate a lot of money ðŸ¤‘.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr

from bsport_access_control_client.models.provider_type_enum import ProviderTypeEnum


class ProviderConfig(BaseModel):
    """
    Serializer for the ProviderConfiguration model.
    """ # noqa: E501
    id: StrictStr
    api_key: Annotated[str, Field(strict=True, max_length=100)] | None = None
    provider_type: ProviderTypeEnum = Field(description="Identifier of the third-party access control provider.  * `kisi` - Kisi * `brivo` - Brivo * `unknown` - Unknown")
    timezone: Annotated[str, Field(strict=True, max_length=100)] | None = Field(default=None, description="Default timezone to be used.")
    user: StrictInt
    __properties: ClassVar[list[str]] = ["id", "api_key", "provider_type", "timezone", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ProviderConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: set[str] = set([
            "id",
            "provider_type",
            "user",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ProviderConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "api_key": obj.get("api_key"),
            "provider_type": obj.get("provider_type"),
            "timezone": obj.get("timezone"),
            "user": obj.get("user")
        })
        return _obj


