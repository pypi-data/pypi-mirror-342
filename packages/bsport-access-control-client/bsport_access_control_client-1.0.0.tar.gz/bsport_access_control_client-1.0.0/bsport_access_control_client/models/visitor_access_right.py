
"""
    Access Control API

    One Ring to rule them all, One ring to find them; One ring to integrate them all and in a short time, generate a lot of money ðŸ¤‘.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr


class VisitorAccessRight(BaseModel):
    """
    Basic serializer for VisitorAccessRight model.
    """ # noqa: E501
    id: StrictInt
    start_datetime: datetime | None = Field(default=None, description="Date and time the effect begins at.")
    end_datetime: datetime | None = Field(default=None, description="Date and time the effect ends at.")
    from_time: StrictStr | None = Field(default=None, description="Time the effect begins at on a given day.")
    to_time: StrictStr | None = Field(default=None, description="Time the effect ends at on a given day.")
    monday: StrictBool | None = Field(default=None, description="If True, the effect will be applied on Mondays.")
    tuesday: StrictBool | None = Field(default=None, description="If True, the effect will be applied on Tuesdays.")
    wednesday: StrictBool | None = Field(default=None, description="If True, the effect will be applied on Wednesdays.")
    thursday: StrictBool | None = Field(default=None, description="If True, the effect will be applied on Thursdays.")
    friday: StrictBool | None = Field(default=None, description="If True, the effect will be applied on Fridays.")
    saturday: StrictBool | None = Field(default=None, description="If True, the effect will be applied on Saturdays.")
    sunday: StrictBool | None = Field(default=None, description="If True, the effect will be applied on Sundays.")
    purpose_id: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Generic key of the entity that created the instance.")
    purpose_name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Log of the entity that created the instance.")
    created_at: datetime
    updated_at: datetime
    place: StrictInt | None = Field(default=None, description="Scope of the acccess right. If null, it is considered valid at all the provider organization's scale")
    provider_config: StrictStr = Field(description="Related provider configuration. This field determines to which API this access will be synchronized.")
    visitor: StrictInt = Field(description="The visitor the access right is for.")
    __properties: ClassVar[list[str]] = ["id", "start_datetime", "end_datetime", "from_time", "to_time", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "purpose_id", "purpose_name", "created_at", "updated_at", "place", "provider_config", "visitor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of VisitorAccessRight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: set[str] = set([
            "id",
            "created_at",
            "updated_at",
            "provider_config",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if start_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.start_datetime is None and "start_datetime" in self.model_fields_set:
            _dict['start_datetime'] = None

        # set to None if end_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.end_datetime is None and "end_datetime" in self.model_fields_set:
            _dict['end_datetime'] = None

        # set to None if from_time (nullable) is None
        # and model_fields_set contains the field
        if self.from_time is None and "from_time" in self.model_fields_set:
            _dict['from_time'] = None

        # set to None if to_time (nullable) is None
        # and model_fields_set contains the field
        if self.to_time is None and "to_time" in self.model_fields_set:
            _dict['to_time'] = None

        # set to None if place (nullable) is None
        # and model_fields_set contains the field
        if self.place is None and "place" in self.model_fields_set:
            _dict['place'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of VisitorAccessRight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "start_datetime": obj.get("start_datetime"),
            "end_datetime": obj.get("end_datetime"),
            "from_time": obj.get("from_time"),
            "to_time": obj.get("to_time"),
            "monday": obj.get("monday"),
            "tuesday": obj.get("tuesday"),
            "wednesday": obj.get("wednesday"),
            "thursday": obj.get("thursday"),
            "friday": obj.get("friday"),
            "saturday": obj.get("saturday"),
            "sunday": obj.get("sunday"),
            "purpose_id": obj.get("purpose_id"),
            "purpose_name": obj.get("purpose_name"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "place": obj.get("place"),
            "provider_config": obj.get("provider_config"),
            "visitor": obj.get("visitor")
        })
        return _obj


