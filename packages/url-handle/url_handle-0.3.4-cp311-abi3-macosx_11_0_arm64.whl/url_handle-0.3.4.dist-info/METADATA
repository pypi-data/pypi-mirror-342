Metadata-Version: 2.4
Name: url_handle
Version: 0.3.4
Classifier: Programming Language :: Rust
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Requires-Dist: pytest ; extra == 'tests'
Provides-Extra: tests
Requires-Python: >=3.8
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM

⚡ A Simple Language
Focus on debugging your application rather than debugging your programming language knowledge.

No hidden control flow.
No hidden memory allocations.
No preprocessor, no macros.
⚡ Comptime
A fresh approach to metaprogramming based on compile-time code execution and lazy evaluation.

Call any function at compile-time.
Manipulate types as values without runtime overhead.
Comptime emulates the target architecture.
⚡ Maintain it with Zig
Incrementally improve your C/C++/Zig codebase.

Use Zig as a zero-dependency, drop-in C/C++ compiler that supports cross-compilation out-of-the-box.
Leverage zig build to create a consistent development environment across all platforms.
Add a Zig compilation unit to C/C++ projects, exposing the rich standard library to your C/C++ code.

```

const std = @import("std");
const parseInt = std.fmt.parseInt;

test "parse integers" {
    const input = "123 67 89,99";
    const ally = std.testing.allocator;

    var list = std.ArrayList(u32).init(ally);
    // Ensure the list is freed at scope exit.
    // Try commenting out this line!
    defer list.deinit();

    var it = std.mem.tokenizeAny(u8, input, " ,");
    while (it.next()) |num| {
        const n = try parseInt(u32, num, 10);
        try list.append(n);
    }

    const expected = [_]u32{ 123, 67, 89, 99 };

    for (expected, list.items) |exp, actual| {
        try std.testing.expectEqual(exp, actual);
    }
}
```
