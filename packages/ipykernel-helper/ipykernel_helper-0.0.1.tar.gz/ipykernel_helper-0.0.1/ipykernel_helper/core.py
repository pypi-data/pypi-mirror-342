"""API for ipykernel-helper"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['safe_repr', 'user_items']

# %% ../nbs/00_core.ipynb
import typing
from types import ModuleType, FunctionType, MethodType, BuiltinFunctionType
from inspect import signature

# %% ../nbs/00_core.ipynb
def safe_repr(obj, max_len=200):
    "Safely get the repr() of an object, truncating if it exceeds max_len."
    try:
        s = str(obj)
        return s[:max_len] + ("â€¦" if len(s)>max_len else "")
    except Exception as e: return f"<repr error: {str(e)}>"

# %% ../nbs/00_core.ipynb
def user_items(ns, max_len=200, xtra_skip=()):
    "Get user-defined vars & funcs from namespace."
    ignore = {'In', 'Out', 'exit', 'quit', 'open', 'nbmeta', 'receive_nbmeta'}
    ignore.add(xtra_skip)
    rm_types = (
        type, FunctionType, ModuleType, MethodType, BuiltinFunctionType,
        getattr(typing, '_SpecialGenericAlias', ()),
        getattr(typing, '_GenericAlias', ()),
        getattr(typing, '_SpecialForm', ())
    )
    user_items = {k: v for k, v in ns.items() if not (k.startswith('_') or k in ignore)}
    user_vars = {k:safe_repr(v, max_len=max_len) for k, v in user_items.items() if not isinstance(v, rm_types)}
    user_fns = {k:str(signature(v)) for k, v in user_items.items()
                if isinstance(v, FunctionType) and v.__module__ == '__main__' and not k.startswith('__')}
    return user_vars,user_fns
