from libuseful.exception import *
from libuseful.lib_logger import *
from .ParsedEvts import RawEvts as RawEvts
from _typeshed import Incomplete

logger: Incomplete

class Touch:
    class Key:
        SLEEP_PRE: str
        ACTION: str
        DATA: str
        SLEEP_POST: str
        REPEAT: str
        @staticmethod
        def all(): ...
    class Act:
        NONE: Incomplete
        CLICK: Incomplete
        LONG_CLICK: Incomplete
        DRAG: Incomplete
        @staticmethod
        def all(): ...
    class Data:
        X: str
        Y: str
        DUR: str
        START: str
        END: str
        @staticmethod
        def all(): ...

class CPropSheet:
    class PostType:
        NONE: str
        RANDOM: str
        NEXT_TC: str
    @property
    def id(self): ...
    @property
    def app(self): ...
    @property
    def next_id(self): ...
    @property
    def post_proc(self): ...
    @property
    def tc(self): ...
    def set_tail(self, post: PostType, next_sheet: str = None): ...
    def append(self, activity: str, scene: str, touch_data: dict): ...
    def __init__(self, seq: int, app: str, post: PostType = ..., next_sheet: str = None) -> None: ...
    def __del__(self) -> None: ...

class CPropTouch:
    class TouchType:
        SINGLE: str
        MULTI: str
    DEF_TEST_TARGET: str
    @property
    def touch_type(self): ...
    @property
    def dev(self): ...
    @property
    def test_target(self): ...
    @property
    def timestamp(self): ...
    @property
    def sheet_cnt(self): ...
    def get_sheet(self, id: str = None) -> CPropSheet: ...
    def get_sheet_name(self, sheet: CPropSheet): ...
    def create_sheet(self, app: str) -> CPropSheet: ...
    def set_option(self, dev_name: str = None, test_target: str = None): ...
    def __init__(self, touch_type: TouchType) -> None: ...
    def __del__(self) -> None: ...
