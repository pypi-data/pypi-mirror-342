from libuseful.exception import *
from libuseful.lib_logger import *
from _typeshed import Incomplete
from touch_android.recorder.CTProperty import TouchType as TouchType

logger: Incomplete

class RawEvts:
    class Key:
        START: str
        STOP: str
        TOUCHES: str
        SLOT: str
        TYPE: str
        X: str
        Y: str
        UPTIME: str
        PKG: str
        ACTIVITY: str
        SCENE: str
        @staticmethod
        def all(): ...
    class Act:
        CLICK: str
        LCLICK: str
        DRAG: str
        NONE: str
        @staticmethod
        def all(): ...

class ParsedEvts:
    class CValue:
        down_pos: tuple
        down_uptime: float
        up_pos: tuple
        up_uptime: float
        x_list: list
        y_list: list
        def __init__(self, point: tuple, uptime: float) -> None: ...
        def __del__(self) -> None: ...
        def __clear__(self) -> None: ...
        def update(self, point: tuple): ...
        def done(self, point: tuple, uptime: float): ...
    class CSleep:
        pre: float
        post: float
        def __init__(self) -> None: ...
    is_done: bool
    @property
    def app(self): ...
    @property
    def activity(self): ...
    @property
    def scene(self): ...
    @property
    def evts(self): ...
    @property
    def sleep(self): ...
    @property
    def result(self): ...
    def is_related_with(self, app: str, slot: int): ...
    def append(self, raw_json: dict): ...
    def done(self, limit_duration: float, limit_posSD: tuple): ...
    def set_option(self, pre_sleep: float = None, post_sleep: float = None): ...
    def __init__(self, raw_json: dict) -> None: ...
    def __del__(self) -> None: ...
    def __clear__(self) -> None: ...
