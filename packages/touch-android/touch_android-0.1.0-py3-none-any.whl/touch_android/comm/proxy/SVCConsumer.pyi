from .service import *
from libuseful.lib_logger import *
from .ProxyGRPC import ProxyGRPC, ProxyGRPC_ASync, ProxyGRPC_Sync, ServiceDesp
from typing import Callable

__all__ = ['create_SVCConsumer', 'SVCConsumer']

class SVCConsumer(ProxyGRPC):
    svc_status: SVCstatus
    def start(self, cb_connection: Callable[[str, bool], None] = None): ...
    def stop(self) -> None: ...
    def unsubscribe_all(self) -> None: ...
    def connected(self, server_addr: str, client: str): ...
    def disconnected(self, server_addr: str, client: str): ...
    def append_service(self, svc: ServiceDesp): ...
    def __init__(self, client_name: str, async_mode: bool = False) -> None: ...
    def __del__(self) -> None: ...

class SVCConsumer_Sync(SVCConsumer, ProxyGRPC_Sync):
    def f_keep_alive(self) -> bool: ...
    def __init__(self, client_name: str, server_ip: str = None, server_port: int = None, async_mode: bool = False) -> None: ...

class SVCConsumer_ASync(SVCConsumer, ProxyGRPC_ASync):
    async def f_keep_alive(self) -> bool: ...
    def __init__(self, client_name: str, server_ip: str = None, server_port: int = None, async_mode: bool = False) -> None: ...

def create_SVCConsumer(client_name: str, server_ip: str = None, server_port: int = None, async_mode: bool = False) -> SVCConsumer: ...
