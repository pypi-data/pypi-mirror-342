from touch_android.policy.POLICY import *
from libuseful.lib_logger import *
import grpc
from typing import Any, Callable

__all__ = ['ProxyGRPC_Sync', 'ProxyGRPC_ASync', 'ProxyGRPC', 'ServiceDesp']

class ProxyGRPC:
    DEF_SERVER_IP: str
    DEF_SERVER_PORT: int
    @property
    def trans_id(self): ...
    def start(self) -> None: ...
    def connected(self, server_addr: str, client: str): ...
    def disconnected(self, server_addr: str, client: str): ...
    def f_reg_subscriber(self, svc_name: str, func_init: Callable[[grpc.Channel], Any], func_cb: Callable[[str, Any], None], func_unsub: Callable[[], None]): ...
    def f_unreg_subscriber(self, svc_name: str = None): ...
    def f_start_req(self, svc_name: str, func: Callable[[grpc.Channel], Any], func_cb: Callable[[str, Any], None], *args, **kwargs): ...
    def __init__(self, cli_name: str, server_ip: str = None, server_port: int = None) -> None: ...
    def __del__(self) -> None: ...

class ProxyGRPC_Sync(ProxyGRPC):
    RUNNER_THR: str
    @property
    def runner(self): ...
    def start(self) -> None: ...
    def f_keep_alive(self) -> bool: ...
    def __init__(self, client_name: str, server_ip: str, server_port: int) -> None: ...
    def __del__(self) -> None: ...

class ProxyGRPC_ASync(ProxyGRPC):
    def start(self) -> None: ...
    async def f_keep_alive(self) -> bool: ...
    def __init__(self, client_name: str, server_ip: str, server_port: int) -> None: ...
    def __del__(self) -> None: ...

class ServiceDesp:
    SVC_NAME: str
    @property
    def name(self): ...
    def __init__(self, proxy: ProxyGRPC, user_id: str) -> None: ...
    def __del__(self) -> None: ...
    def disconnected(self) -> None: ...
    def register(self, func_cb: Callable[[str, Any], None]): ...
    def unregister(self) -> None: ...
