from libuseful.lib_usermng import *
from touch_android.data.EnumDefine import *
from libuseful.lib_logger import *
import grpc
import touch_android.comm.proto.touchRP_pb2 as cApiMsg
import touch_android.comm.proto.touchRP_pb2_grpc as cApi
from ..SVCProvider import SVCProvider
from ..StubGRPC import StubGRPC
from touch_android.data.CStatus import CStatus

__all__ = ['add_service_StatusPvd']

class StatusPvd(cApi.CommenderServicer, SVCProvider):
    SVC_NAME: str
    @property
    def procs(self): ...
    def stop(self) -> None: ...
    def make_ErrorDataMsg(self, errno: EErrorDesp = None, msg: str = 'None'): ...
    def unsubscribe(self, req: cApiMsg.BasicReq, context: grpc.aio.ServicerContext) -> cApiMsg.BoolResp: ...
    def Ping(self, req: cApiMsg.BasicReq, context: grpc.aio.ServicerContext) -> cApiMsg.BoolResp: ...
    def StartRecord(self, req: cApiMsg.BasicReq, context: grpc.aio.ServicerContext) -> cApiMsg.BoolResp: ...
    def StopRecord(self, req: cApiMsg.RecordReq, context: grpc.aio.ServicerContext) -> cApiMsg.RecordResp: ...
    def StartPlay(self, req: cApiMsg.PlayReq, context: grpc.aio.ServicerContext) -> cApiMsg.PlayResp: ...
    def StopPlay(self, req: cApiMsg.BasicReq, context: grpc.aio.ServicerContext) -> cApiMsg.BoolResp: ...
    def Exit(self, req: cApiMsg.BasicReq, context: grpc.aio.ServicerContext) -> cApiMsg.BoolResp: ...
    def Reset(self, req: cApiMsg.BasicReq, context: grpc.aio.ServicerContext) -> cApiMsg.BoolResp: ...
    def __init__(self, user_mng: UserManager, status: CStatus, procs: dict) -> None: ...
    def __del__(self) -> None: ...

class StatusPvd_Sync(StatusPvd):
    def subscribe(self, req: cApiMsg.BasicReq, context: grpc.aio.ServicerContext): ...

class StatusPvd_ASync(StatusPvd):
    async def subscribe(self, req: cApiMsg.BasicReq, context: grpc.aio.ServicerContext): ...

def add_service_StatusPvd(server: grpc.Server, stub: StubGRPC, user_mng: UserManager, status: CStatus, procs: dict, async_mode: bool = False): ...
