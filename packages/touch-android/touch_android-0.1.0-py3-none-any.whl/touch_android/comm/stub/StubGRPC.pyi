from libuseful.lib_logger import *
import grpc
from libuseful.lib_usermng import UserManager
from typing import Any, Callable

__all__ = ['create_grpc_stub', 'StubGRPC']

class StubGRPC:
    DEF_GRPC_PORT: int
    @property
    def is_running(self): ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def reg_service_instance(self, inst) -> None: ...
    def wait_for_termination(self) -> None: ...
    def __init__(self, max_client: int, func_register_svc: Callable[[grpc.Server, Any, UserManager], bool], port: int = None) -> None: ...
    def __del__(self) -> None: ...

class StubGRPC_Sync(StubGRPC):
    def wait_for_termination(self) -> None: ...
    def __init__(self, max_client: int, func: Callable[[grpc.Server, UserManager], bool], port: int = None) -> None: ...

class StubGRPC_ASync(StubGRPC):
    def wait_for_termination(self) -> None: ...
    def __init__(self, max_client: int, func: Callable[[grpc.Server, UserManager], bool], port: int = None) -> None: ...
    def __del__(self) -> None: ...

def create_grpc_stub(max_client: int, func_register_svc: Callable[[grpc.Server, UserManager], bool], port: int = None, async_mode: bool = False) -> StubGRPC: ...
