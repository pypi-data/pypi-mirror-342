from libuseful.exception import *
from libuseful.lib_logger import *
import threading
from .CParseEvt import CParseEvt as CParseEvt
from .CSummaryEvt import CSummaryEvt as CSummaryEvt
from _typeshed import Incomplete
from libuseful.lib_singleton import Singleton
from typing import Any, Callable

logger: Incomplete

class CTRecorder(Singleton):
    RT_COMMAND: str
    CMD_PREFIX: str
    FP_REALTIME_CB: Callable[[str], Any]
    FP_PARSER: Callable[[Any], tuple[str, str, str]]
    class CUptime:
        start: float
        stop: float
        mutex: threading.Lock
        def __init__(self) -> None: ...
        def clear(self) -> None: ...
        @property
        def is_continue(self): ...
    @property
    def is_recording(self): ...
    @property
    def is_init(self): ...
    @property
    def is_terminated(self): ...
    def init(self, func_rt_cb_hook: Callable[[str], Any] = None, func_parse_custom: Callable[[Any], tuple[str, str, str]] = None): ...
    def start(self) -> None: ...
    def stop(self, filepath: str = None): ...
    def reset(self) -> None: ...
    def terminate(self) -> None: ...
    def __init__(self, cmd_prefix: str = '') -> None: ...
    def __del__(self) -> None: ...
