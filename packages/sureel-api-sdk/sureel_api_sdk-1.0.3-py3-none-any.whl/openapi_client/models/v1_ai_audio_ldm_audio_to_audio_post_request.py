# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.opt_out_analysis import OptOutAnalysis
from typing import Optional, Set
from typing_extensions import Self

class V1AiAudioLdmAudioToAudioPostRequest(BaseModel):
    """
    V1AiAudioLdmAudioToAudioPostRequest
    """ # noqa: E501
    prompt: StrictStr = Field(description="Text input to condition the audio synthesis.     More details improve the resulting audio quality, although repeating concepts and overly long prompts should be avoided.")
    content_audio_path: StrictStr = Field(description=" The `contentAudioPath` can either be an audio URL, a YouTube URL, or the audio path returned from the `/audio-ldm/upload-audio` or `/artist/post-upload-urls` endpoint.         Supported formats include .mp3 and .wav", alias="contentAudioPath")
    audio_length: Annotated[int, Field(le=60, strict=True, ge=5)] = Field(description="Length of generated audio in seconds.", alias="audioLength")
    genre: Optional[StrictStr] = Field(default=None, description="The main category of music that the song belongs to, such as Rock, Jazz, Pop, etc.")
    sub_genre: Optional[StrictStr] = Field(default=None, description="A more specific classification within the main genre, such as Hard Rock, Bebop, Trap, etc.", alias="subGenre")
    mood: Optional[StrictStr] = Field(default=None, description="The emotional tone or atmosphere of the song, such as happy, sad, energetic, mellow, etc.")
    song_key: Optional[StrictStr] = Field(default=None, description="The key in which the song is composed, indicating the scale and tonal center, such as G major, A minor, etc.", alias="songKey")
    tempo: Optional[StrictStr] = Field(default=None, description="The speed or pace of the song, typically measured in beats per minute (BPM).")
    split_stem: Optional[StrictBool] = Field(default=None, description="Flag to split the audio into stems or not.", alias="splitStem")
    inference_steps: Optional[Annotated[int, Field(le=50, strict=True, ge=10)]] = Field(default=None, description="Number of diffusion steps that iteratively improve the audio files generated by the model.", alias="inferenceSteps")
    cfg: Optional[Union[Annotated[float, Field(le=15, strict=True, ge=0)], Annotated[int, Field(le=15, strict=True, ge=0)]]] = Field(default=None, description="Classifier-free guidance: This scale determines how strictly the diffusion process adheres to the prompt.             Higher values keep the audio closer to the prompt.")
    seed: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(default=None, description="Seed to control randomness in the generation process and enable reproducibility.             If not specified, the generation process is random.             If the seed is fixed to the same number, the generation will always yield the same result.")
    batch_size: Optional[Annotated[int, Field(le=4, strict=True, ge=1)]] = Field(default=None, description="Number of audio files that are generated in a single request.", alias="batchSize")
    webhook: Optional[StrictStr] = Field(default=None, description="Webhook URL where you receive notifications regarding completed requests.")
    generate_attribution: Optional[StrictBool] = Field(default=None, description="Flag whether to enable the attribution calculation. Attribution describes the influence of training data on content generated using AI.     When training an AI model with different collections of data, each collection has a certain amount of influence on the resulting model.     When generating new content with the resulting model, the influence each collection has on the new content is referred to as the attribution of the new content.", alias="generateAttribution")
    generate_provenance: Optional[StrictBool] = Field(default=None, description="Flag whether to enable the provenance calculation. Provenance describes the entire influence history of a piece of content generated using AI.     It can be seen as the content's attribution over time.     Whenever any data is used to generate new content using AI, the provenance of that new content is extended to include the influence of that data.     In  summary, the provenance of a piece of content is obtained by computing the full attribution to all training and input data each time AI is used to generate or alter that piece of content.", alias="generateProvenance")
    surprise_me: Optional[StrictBool] = Field(default=None, description="Flag whether to create a surprise text description fitting any given presets.", alias="surpriseMe")
    opt_out_analysis: Optional[OptOutAnalysis] = Field(default=None, alias="OptOutAnalysis")
    __properties: ClassVar[List[str]] = ["prompt", "contentAudioPath", "audioLength", "genre", "subGenre", "mood", "songKey", "tempo", "splitStem", "inferenceSteps", "cfg", "seed", "batchSize", "webhook", "generateAttribution", "generateProvenance", "surpriseMe", "OptOutAnalysis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1AiAudioLdmAudioToAudioPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of opt_out_analysis
        if self.opt_out_analysis:
            _dict['OptOutAnalysis'] = self.opt_out_analysis.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1AiAudioLdmAudioToAudioPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "prompt": obj.get("prompt"),
            "contentAudioPath": obj.get("contentAudioPath"),
            "audioLength": obj.get("audioLength"),
            "genre": obj.get("genre"),
            "subGenre": obj.get("subGenre"),
            "mood": obj.get("mood"),
            "songKey": obj.get("songKey"),
            "tempo": obj.get("tempo"),
            "splitStem": obj.get("splitStem"),
            "inferenceSteps": obj.get("inferenceSteps"),
            "cfg": obj.get("cfg"),
            "seed": obj.get("seed"),
            "batchSize": obj.get("batchSize"),
            "webhook": obj.get("webhook"),
            "generateAttribution": obj.get("generateAttribution"),
            "generateProvenance": obj.get("generateProvenance"),
            "surpriseMe": obj.get("surpriseMe"),
            "OptOutAnalysis": OptOutAnalysis.from_dict(obj["OptOutAnalysis"]) if obj.get("OptOutAnalysis") is not None else None
        })
        return _obj


