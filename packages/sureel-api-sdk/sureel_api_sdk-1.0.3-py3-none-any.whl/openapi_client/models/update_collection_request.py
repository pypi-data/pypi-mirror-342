# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.ai_influence import AiInfluence
from openapi_client.models.create_collection_request_synthesis_rules import CreateCollectionRequestSynthesisRules
from typing import Optional, Set
from typing_extensions import Self

class UpdateCollectionRequest(BaseModel):
    """
    UpdateCollectionRequest
    """ # noqa: E501
    collection_name: Optional[StrictStr] = Field(default=None, description="Name for the artwork collection.", alias="collectionName")
    collection_description: Optional[StrictStr] = Field(default=None, description="A description of the images in this collection.             Please describe your Collection as appropriate as possible.             This helps to train our AI to get the best results.", alias="collectionDescription")
    styles: Optional[StrictStr] = Field(default=None, description="Genre of the songs or styles of the images, such as “painting”, “photography”, “anime” or “digital art”.             It must be a comma-separated list of styles.")
    use_for_training: Optional[StrictBool] = Field(default=None, description="Indicates whether to opt in to AI training or opt out. Set to true to allow data to be used for training, or false to decline.", alias="useForTraining")
    audio_language: Optional[StrictStr] = Field(default=None, description="For music, you can set the audio language of the songs.", alias="audioLanguage")
    release_date: Optional[StrictStr] = Field(default=None, description="The release date of the album/single/release/compilation. The format is YYYY-MM-DD.", alias="releaseDate")
    recording_studio: Optional[StrictStr] = Field(default=None, description="For music, you can set the recording studio.", alias="recordingStudio")
    publisher: Optional[StrictStr] = Field(default=None, description="For music, you can set the publisher.")
    producer: Optional[StrictStr] = Field(default=None, description="For music, you can set the producer.")
    composer: Optional[StrictStr] = Field(default=None, description="The person who writes the music for a song.")
    song_writer: Optional[StrictStr] = Field(default=None, description="The person who writes the lyrics and melody of a song.", alias="songWriter")
    rights_administrator: Optional[StrictStr] = Field(default=None, description="A publishing administrator or specialized entity responsible for handling administrative tasks related to rights.", alias="rightsAdministrator")
    rights_owner: Optional[StrictStr] = Field(default=None, description="The owner of a copyrighted work who has rights to reproduce, distribute, publicly perform, display, and adapt the copyrighted material.", alias="rightsOwner")
    original_cover_art: Optional[StrictStr] = Field(default=None, description="The `originalCoverArt` can either be an image URL or an image path returned from the `/ldm/upload-images` or `/artist/post-upload-urls` endpoint.                 Supported formats include JPG & PNG.", alias="originalCoverArt")
    ai_influence: Optional[AiInfluence] = Field(default=None, alias="aiInfluence")
    knowledge_acquisition_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="If `useForTraining` is set to true, the `knowledgeAcquisitionRatio` parameter can be used to adapt the AI model’s knowledge acquisition based on your data.", alias="knowledgeAcquisitionRatio")
    synthesis_rules: Optional[CreateCollectionRequestSynthesisRules] = Field(default=None, alias="synthesisRules")
    __properties: ClassVar[List[str]] = ["collectionName", "collectionDescription", "styles", "useForTraining", "audioLanguage", "releaseDate", "recordingStudio", "publisher", "producer", "composer", "songWriter", "rightsAdministrator", "rightsOwner", "originalCoverArt", "aiInfluence", "knowledgeAcquisitionRatio", "synthesisRules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateCollectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ai_influence
        if self.ai_influence:
            _dict['aiInfluence'] = self.ai_influence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of synthesis_rules
        if self.synthesis_rules:
            _dict['synthesisRules'] = self.synthesis_rules.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateCollectionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collectionName": obj.get("collectionName"),
            "collectionDescription": obj.get("collectionDescription"),
            "styles": obj.get("styles"),
            "useForTraining": obj.get("useForTraining"),
            "audioLanguage": obj.get("audioLanguage"),
            "releaseDate": obj.get("releaseDate"),
            "recordingStudio": obj.get("recordingStudio"),
            "publisher": obj.get("publisher"),
            "producer": obj.get("producer"),
            "composer": obj.get("composer"),
            "songWriter": obj.get("songWriter"),
            "rightsAdministrator": obj.get("rightsAdministrator"),
            "rightsOwner": obj.get("rightsOwner"),
            "originalCoverArt": obj.get("originalCoverArt"),
            "aiInfluence": AiInfluence.from_dict(obj["aiInfluence"]) if obj.get("aiInfluence") is not None else None,
            "knowledgeAcquisitionRatio": obj.get("knowledgeAcquisitionRatio"),
            "synthesisRules": CreateCollectionRequestSynthesisRules.from_dict(obj["synthesisRules"]) if obj.get("synthesisRules") is not None else None
        })
        return _obj


