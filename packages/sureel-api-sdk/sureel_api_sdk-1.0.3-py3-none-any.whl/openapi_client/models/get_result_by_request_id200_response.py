# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.analysis_history_entry_image_attribution_analysis import AnalysisHistoryEntryImageAttributionAnalysis
from openapi_client.models.analysis_history_entry_request_data_any_of import AnalysisHistoryEntryRequestDataAnyOf
from openapi_client.models.analysis_history_entry_status_any_of import AnalysisHistoryEntryStatusAnyOf
from openapi_client.models.artist_profile_picture import ArtistProfilePicture
from openapi_client.models.attribution import Attribution
from typing import Optional, Set
from typing_extensions import Self

class GetResultByRequestId200Response(BaseModel):
    """
    GetResultByRequestId200Response
    """ # noqa: E501
    status: Optional[AnalysisHistoryEntryStatusAnyOf] = None
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    endpoint: Optional[StrictStr] = None
    request_id: StrictStr = Field(alias="requestId")
    request_body: Optional[Any] = None
    created_at: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="createdAt")
    images_signed_urls: Optional[List[StrictStr]] = Field(default=None, alias="imagesSignedUrls")
    preview_images_signed_urls: Optional[List[StrictStr]] = Field(default=None, alias="previewImagesSignedUrls")
    attribution: Optional[List[Attribution]] = None
    provenance: Optional[List[Attribution]] = None
    content_image: Optional[StrictStr] = Field(default=None, alias="contentImage")
    style_image: Optional[StrictStr] = Field(default=None, alias="styleImage")
    mask_image: Optional[StrictStr] = Field(default=None, alias="maskImage")
    artist_profile_pictures: Optional[List[ArtistProfilePicture]] = Field(default=None, alias="artistProfilePictures")
    seed: Optional[Union[StrictFloat, StrictInt]] = None
    request_data: Optional[AnalysisHistoryEntryRequestDataAnyOf] = Field(default=None, alias="requestData")
    image_attribution_analysis: Optional[AnalysisHistoryEntryImageAttributionAnalysis] = Field(default=None, alias="imageAttributionAnalysis")
    __properties: ClassVar[List[str]] = ["status", "errorMessage", "endpoint", "requestId", "request_body", "createdAt", "imagesSignedUrls", "previewImagesSignedUrls", "attribution", "provenance", "contentImage", "styleImage", "maskImage", "artistProfilePictures", "seed", "requestData", "imageAttributionAnalysis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetResultByRequestId200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attribution (list)
        _items = []
        if self.attribution:
            for _item_attribution in self.attribution:
                if _item_attribution:
                    _items.append(_item_attribution.to_dict())
            _dict['attribution'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in provenance (list)
        _items = []
        if self.provenance:
            for _item_provenance in self.provenance:
                if _item_provenance:
                    _items.append(_item_provenance.to_dict())
            _dict['provenance'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in artist_profile_pictures (list)
        _items = []
        if self.artist_profile_pictures:
            for _item_artist_profile_pictures in self.artist_profile_pictures:
                if _item_artist_profile_pictures:
                    _items.append(_item_artist_profile_pictures.to_dict())
            _dict['artistProfilePictures'] = _items
        # override the default output from pydantic by calling `to_dict()` of request_data
        if self.request_data:
            _dict['requestData'] = self.request_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_attribution_analysis
        if self.image_attribution_analysis:
            _dict['imageAttributionAnalysis'] = self.image_attribution_analysis.to_dict()
        # set to None if request_body (nullable) is None
        # and model_fields_set contains the field
        if self.request_body is None and "request_body" in self.model_fields_set:
            _dict['request_body'] = None

        # set to None if attribution (nullable) is None
        # and model_fields_set contains the field
        if self.attribution is None and "attribution" in self.model_fields_set:
            _dict['attribution'] = None

        # set to None if provenance (nullable) is None
        # and model_fields_set contains the field
        if self.provenance is None and "provenance" in self.model_fields_set:
            _dict['provenance'] = None

        # set to None if artist_profile_pictures (nullable) is None
        # and model_fields_set contains the field
        if self.artist_profile_pictures is None and "artist_profile_pictures" in self.model_fields_set:
            _dict['artistProfilePictures'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetResultByRequestId200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": AnalysisHistoryEntryStatusAnyOf.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "errorMessage": obj.get("errorMessage"),
            "endpoint": obj.get("endpoint"),
            "requestId": obj.get("requestId"),
            "request_body": obj.get("request_body"),
            "createdAt": obj.get("createdAt"),
            "imagesSignedUrls": obj.get("imagesSignedUrls"),
            "previewImagesSignedUrls": obj.get("previewImagesSignedUrls"),
            "attribution": [Attribution.from_dict(_item) for _item in obj["attribution"]] if obj.get("attribution") is not None else None,
            "provenance": [Attribution.from_dict(_item) for _item in obj["provenance"]] if obj.get("provenance") is not None else None,
            "contentImage": obj.get("contentImage"),
            "styleImage": obj.get("styleImage"),
            "maskImage": obj.get("maskImage"),
            "artistProfilePictures": [ArtistProfilePicture.from_dict(_item) for _item in obj["artistProfilePictures"]] if obj.get("artistProfilePictures") is not None else None,
            "seed": obj.get("seed"),
            "requestData": AnalysisHistoryEntryRequestDataAnyOf.from_dict(obj["requestData"]) if obj.get("requestData") is not None else None,
            "imageAttributionAnalysis": AnalysisHistoryEntryImageAttributionAnalysis.from_dict(obj["imageAttributionAnalysis"]) if obj.get("imageAttributionAnalysis") is not None else None
        })
        return _obj


