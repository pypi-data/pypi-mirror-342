# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.ai_influence import AiInfluence
from typing import Optional, Set
from typing_extensions import Self

class CreateCollectionRequestFilesInner(BaseModel):
    """
    CreateCollectionRequestFilesInner
    """ # noqa: E501
    file_path: Optional[StrictStr] = Field(default=None, description="The file path can either be an image/audio/video URL or a file path returned from the `/ldm/upload-images`, `/audio-ldm/upload-audios`, or `/artist/post-upload-urls` endpoint. Supported formats include JPG & PNG for image, WAV & MP3 for audio, and MP4 for video.", alias="filePath")
    track_title: Optional[StrictStr] = Field(default=None, description="The title of the song.", alias="trackTitle")
    isrc: Optional[StrictStr] = Field(default=None, description="The ISRC (International Standard Recording Code) is a unique identifier for a sound recording.")
    external_track_id: Optional[StrictStr] = Field(default=None, description="The external ID is the ID of the collection/release/album/compilation in another system, e.g. OpenPlay. This ID can be used to reference the content.", alias="externalTrackId")
    artist_names: Optional[List[StrictStr]] = Field(default=None, description="The name of the artists that contributed to the song.", alias="artistNames")
    labels: Optional[List[StrictStr]] = Field(default=None, description="The name of the label that published the song.")
    cover: Optional[StrictBool] = Field(default=None, description="Indicates whether the song is a cover.")
    instrumental: Optional[StrictBool] = Field(default=None, description="Indicates whether the song is instrumental.")
    acapella: Optional[StrictBool] = Field(default=None, description="Indicates whether the song is acapella.")
    stem: Optional[StrictBool] = Field(default=None, description="Indicates whether the file is a stem.")
    genres: Optional[List[StrictStr]] = Field(default=None, description="The genres and subgenres of the song.")
    duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The duration of the song in milliseconds.")
    bpm: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The tempo of the song in beats per minute.")
    key: Optional[StrictStr] = Field(default=None, description="The key of the song.")
    pitch: Optional[StrictStr] = Field(default=None, description="The pitch of the song.")
    mood: Optional[StrictStr] = Field(default=None, description="The mood of the song.")
    danceability: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The danceability of the song.")
    instruments: Optional[List[StrictStr]] = Field(default=None, description="The instruments used in the song.")
    time_signature: Optional[StrictStr] = Field(default=None, description="The time signature of the song.", alias="timeSignature")
    song_characteristics: Optional[StrictStr] = Field(default=None, description="The characteristics of the song.", alias="songCharacteristics")
    themes: Optional[List[StrictStr]] = Field(default=None, description="The themes of the song.")
    age_group: Optional[StrictStr] = Field(default=None, description="The age group the song is intended for.", alias="ageGroup")
    gender: Optional[StrictStr] = Field(default=None, description="The gender the song is intended for.")
    personality: Optional[StrictStr] = Field(default=None, description="The personality of the song.")
    audio_language: Optional[StrictStr] = Field(default=None, description="For music, you can set the audio language of the songs.", alias="audioLanguage")
    release_date: Optional[StrictStr] = Field(default=None, description="The release date of the song. The format is YYYY-MM-DD.", alias="releaseDate")
    explicit: Optional[StrictBool] = Field(default=None, description="Indicates whether the song contains explicit content.")
    lyrics: Optional[StrictStr] = Field(default=None, description="The lyrics of a song.")
    recording_studio: Optional[StrictStr] = Field(default=None, description="For music, you can set the recording studio.", alias="recordingStudio")
    publisher: Optional[StrictStr] = Field(default=None, description="For music, you can set the publisher.")
    producer: Optional[StrictStr] = Field(default=None, description="For music, you can set the producer.")
    composer: Optional[StrictStr] = Field(default=None, description="The person who writes the music for a song.")
    song_writer: Optional[StrictStr] = Field(default=None, description="The person who writes the lyrics and melody of a song.", alias="songWriter")
    rights_administrator: Optional[StrictStr] = Field(default=None, description="A publishing administrator or specialized entity responsible for handling administrative tasks related to rights.", alias="rightsAdministrator")
    rights_owner: Optional[StrictStr] = Field(default=None, description="The owner of a copyrighted work who has rights to reproduce, distribute, publicly perform, display, and adapt the copyrighted material.", alias="rightsOwner")
    ai_influence: Optional[AiInfluence] = Field(default=None, alias="aiInfluence")
    __properties: ClassVar[List[str]] = ["filePath", "trackTitle", "isrc", "externalTrackId", "artistNames", "labels", "cover", "instrumental", "acapella", "stem", "genres", "duration", "bpm", "key", "pitch", "mood", "danceability", "instruments", "timeSignature", "songCharacteristics", "themes", "ageGroup", "gender", "personality", "audioLanguage", "releaseDate", "explicit", "lyrics", "recordingStudio", "publisher", "producer", "composer", "songWriter", "rightsAdministrator", "rightsOwner", "aiInfluence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateCollectionRequestFilesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ai_influence
        if self.ai_influence:
            _dict['aiInfluence'] = self.ai_influence.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateCollectionRequestFilesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filePath": obj.get("filePath"),
            "trackTitle": obj.get("trackTitle"),
            "isrc": obj.get("isrc"),
            "externalTrackId": obj.get("externalTrackId"),
            "artistNames": obj.get("artistNames"),
            "labels": obj.get("labels"),
            "cover": obj.get("cover"),
            "instrumental": obj.get("instrumental"),
            "acapella": obj.get("acapella"),
            "stem": obj.get("stem"),
            "genres": obj.get("genres"),
            "duration": obj.get("duration"),
            "bpm": obj.get("bpm"),
            "key": obj.get("key"),
            "pitch": obj.get("pitch"),
            "mood": obj.get("mood"),
            "danceability": obj.get("danceability"),
            "instruments": obj.get("instruments"),
            "timeSignature": obj.get("timeSignature"),
            "songCharacteristics": obj.get("songCharacteristics"),
            "themes": obj.get("themes"),
            "ageGroup": obj.get("ageGroup"),
            "gender": obj.get("gender"),
            "personality": obj.get("personality"),
            "audioLanguage": obj.get("audioLanguage"),
            "releaseDate": obj.get("releaseDate"),
            "explicit": obj.get("explicit"),
            "lyrics": obj.get("lyrics"),
            "recordingStudio": obj.get("recordingStudio"),
            "publisher": obj.get("publisher"),
            "producer": obj.get("producer"),
            "composer": obj.get("composer"),
            "songWriter": obj.get("songWriter"),
            "rightsAdministrator": obj.get("rightsAdministrator"),
            "rightsOwner": obj.get("rightsOwner"),
            "aiInfluence": AiInfluence.from_dict(obj["aiInfluence"]) if obj.get("aiInfluence") is not None else None
        })
        return _obj


