# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from openapi_client.models.analysis_history_entry_audio_attribution_analysis_master_inner import AnalysisHistoryEntryAudioAttributionAnalysisMasterInner
from typing import Optional, Set
from typing_extensions import Self

class AnalysisHistoryEntryAudioAttributionAnalysis(BaseModel):
    """
    Audio attribution analysis extracts the analysis metrics for a given audio file. Metrics are as follows:    Attribution likelihood describes the probability that a piece of content from the registry had an influence on the creation of a new piece of content. If the duration and period are -1, it indicates that attribution for the entire song was calculated.
    """ # noqa: E501
    master: List[AnalysisHistoryEntryAudioAttributionAnalysisMasterInner]
    instrumentals: List[AnalysisHistoryEntryAudioAttributionAnalysisMasterInner]
    vocals: List[AnalysisHistoryEntryAudioAttributionAnalysisMasterInner]
    bass: List[AnalysisHistoryEntryAudioAttributionAnalysisMasterInner]
    drums: List[AnalysisHistoryEntryAudioAttributionAnalysisMasterInner]
    __properties: ClassVar[List[str]] = ["master", "instrumentals", "vocals", "bass", "drums"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalysisHistoryEntryAudioAttributionAnalysis from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in master (list)
        _items = []
        if self.master:
            for _item_master in self.master:
                if _item_master:
                    _items.append(_item_master.to_dict())
            _dict['master'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in instrumentals (list)
        _items = []
        if self.instrumentals:
            for _item_instrumentals in self.instrumentals:
                if _item_instrumentals:
                    _items.append(_item_instrumentals.to_dict())
            _dict['instrumentals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vocals (list)
        _items = []
        if self.vocals:
            for _item_vocals in self.vocals:
                if _item_vocals:
                    _items.append(_item_vocals.to_dict())
            _dict['vocals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bass (list)
        _items = []
        if self.bass:
            for _item_bass in self.bass:
                if _item_bass:
                    _items.append(_item_bass.to_dict())
            _dict['bass'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in drums (list)
        _items = []
        if self.drums:
            for _item_drums in self.drums:
                if _item_drums:
                    _items.append(_item_drums.to_dict())
            _dict['drums'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalysisHistoryEntryAudioAttributionAnalysis from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "master": [AnalysisHistoryEntryAudioAttributionAnalysisMasterInner.from_dict(_item) for _item in obj["master"]] if obj.get("master") is not None else None,
            "instrumentals": [AnalysisHistoryEntryAudioAttributionAnalysisMasterInner.from_dict(_item) for _item in obj["instrumentals"]] if obj.get("instrumentals") is not None else None,
            "vocals": [AnalysisHistoryEntryAudioAttributionAnalysisMasterInner.from_dict(_item) for _item in obj["vocals"]] if obj.get("vocals") is not None else None,
            "bass": [AnalysisHistoryEntryAudioAttributionAnalysisMasterInner.from_dict(_item) for _item in obj["bass"]] if obj.get("bass") is not None else None,
            "drums": [AnalysisHistoryEntryAudioAttributionAnalysisMasterInner.from_dict(_item) for _item in obj["drums"]] if obj.get("drums") is not None else None
        })
        return _obj


