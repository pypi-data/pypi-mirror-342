# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class OptOutInfoValuesInner(BaseModel):
    """
    OptOutInfoValuesInner
    """ # noqa: E501
    album: Optional[StrictStr] = None
    album_id: Optional[StrictStr] = None
    opt_in: Optional[StrictBool] = None
    apple_music_uri: Optional[StrictStr] = None
    artist: Optional[StrictStr] = None
    cover_art_uri: Optional[StrictStr] = None
    genre: Optional[StrictStr] = None
    isrc: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    release_date: Optional[StrictStr] = None
    score: Optional[List[Union[StrictFloat, StrictInt]]] = None
    title: Optional[StrictStr] = None
    track_id: Optional[StrictStr] = None
    track_url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["album", "album_id", "opt_in", "apple_music_uri", "artist", "cover_art_uri", "genre", "isrc", "label", "release_date", "score", "title", "track_id", "track_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OptOutInfoValuesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OptOutInfoValuesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "album": obj.get("album"),
            "album_id": obj.get("album_id"),
            "opt_in": obj.get("opt_in"),
            "apple_music_uri": obj.get("apple_music_uri"),
            "artist": obj.get("artist"),
            "cover_art_uri": obj.get("cover_art_uri"),
            "genre": obj.get("genre"),
            "isrc": obj.get("isrc"),
            "label": obj.get("label"),
            "release_date": obj.get("release_date"),
            "score": obj.get("score"),
            "title": obj.get("title"),
            "track_id": obj.get("track_id"),
            "track_url": obj.get("track_url")
        })
        return _obj


