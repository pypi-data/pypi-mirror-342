# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.v1_ai_artist_collection_collection_uuid_get200_response import V1AiArtistCollectionCollectionUuidGet200Response

class TestV1AiArtistCollectionCollectionUuidGet200Response(unittest.TestCase):
    """V1AiArtistCollectionCollectionUuidGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1AiArtistCollectionCollectionUuidGet200Response:
        """Test V1AiArtistCollectionCollectionUuidGet200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1AiArtistCollectionCollectionUuidGet200Response`
        """
        model = V1AiArtistCollectionCollectionUuidGet200Response()
        if include_optional:
            return V1AiArtistCollectionCollectionUuidGet200Response(
                collection_uuid = '',
                username = '',
                collection_name = '',
                collection_description = '',
                upc = '',
                status = None,
                status_description = '',
                file_ids = [
                    ''
                    ],
                artworks_s3_keys = [
                    ''
                    ],
                artworks = [
                    ''
                    ],
                artworks_full_res = [
                    ''
                    ],
                is_spotify_url = True,
                prompt_guidance = '',
                show_in_frontend = True,
                styles = [
                    ''
                    ],
                use_for_finetuning = True,
                use_for_training = True,
                knowledge_acquisition_ratio = 1.337,
                ai_influence = '',
                external_id = '',
                original_cover_art_s3_key = '',
                original_cover_art = '',
                audio_language = '',
                release_date = '',
                recording_studio = '',
                publisher = '',
                producer = '',
                composer = '',
                song_writer = '',
                rights_administrator = '',
                rights_owner = '',
                created_at = 1.337,
                updated_at = 1.337,
                collection_published_email_sent = 1.337,
                customer_name = '',
                lora_weights_s3_key = '',
                content_type = '',
                attribution_setup_status = '',
                suno_analysis_request_ids = [
                    ''
                    ],
                suno_analysis_result = [
                    openapi_client.models.artist_collections_inner_suno_analysis_result_inner.ArtistCollections_inner_suno_analysis_result_inner(
                        artist_name = '', 
                        album_name = '', 
                        track_name = '', 
                        original_song = '', 
                        histogram_values = openapi_client.models.artist_collections_inner_suno_analysis_result_inner_histogram_values.ArtistCollections_inner_suno_analysis_result_inner_histogramValues(
                            master = [
                                openapi_client.models.artist_collections_inner_suno_analysis_result_inner_histogram_values_master_inner.ArtistCollections_inner_suno_analysis_result_inner_histogramValues_master_inner(
                                    duration = 1.337, 
                                    period = 1.337, 
                                    values = [
                                        openapi_client.models.artist_collections_inner_suno_analysis_result_inner_histogram_values_master_inner_values_inner.ArtistCollections_inner_suno_analysis_result_inner_histogramValues_master_inner_values_inner(
                                            bin_start = 1.337, 
                                            bin_end = 1.337, 
                                            count = [
                                                1.337
                                                ], )
                                        ], )
                                ], ), )
                    ],
                embeddings_s3_key = '',
                embeddings_s3_keys = [
                    ''
                    ],
                external_check_results = openapi_client.models.opt_out_analysis.OptOutAnalysis(
                    master = [
                        openapi_client.models.opt_out_analysis_master_inner.OptOutAnalysis_master_inner(
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                openapi_client.models.opt_out_info.OptOutInfo(
                                    filename = '', 
                                    values = [
                                        openapi_client.models.opt_out_info_values_inner.OptOutInfo_values_inner(
                                            album = '', 
                                            album_id = '', 
                                            opt_in = True, 
                                            apple_music_uri = '', 
                                            artist = '', 
                                            cover_art_uri = '', 
                                            genre = '', 
                                            isrc = '', 
                                            label = '', 
                                            release_date = '', 
                                            score = [
                                                1.337
                                                ], 
                                            title = '', 
                                            track_id = '', 
                                            track_url = '', )
                                        ], )
                                ], )
                        ], ),
                internal_check_results = openapi_client.models.opt_out_analysis.OptOutAnalysis(
                    master = [
                        openapi_client.models.opt_out_analysis_master_inner.OptOutAnalysis_master_inner(
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                openapi_client.models.opt_out_info.OptOutInfo(
                                    filename = '', 
                                    values = [
                                        openapi_client.models.opt_out_info_values_inner.OptOutInfo_values_inner(
                                            album = '', 
                                            album_id = '', 
                                            opt_in = True, 
                                            apple_music_uri = '', 
                                            artist = '', 
                                            cover_art_uri = '', 
                                            genre = '', 
                                            isrc = '', 
                                            label = '', 
                                            release_date = '', 
                                            score = [
                                                1.337
                                                ], 
                                            title = '', 
                                            track_id = '', 
                                            track_url = '', )
                                        ], )
                                ], )
                        ], ),
                ai_check_results = openapi_client.models.artist_collections_inner_ai_check_results.ArtistCollections_inner_ai_check_results(
                    master = [
                        openapi_client.models.artist_collections_inner_ai_check_results_master_inner.ArtistCollections_inner_ai_check_results_master_inner(
                            filename = '', 
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                1.337
                                ], 
                            average_value = 1.337, 
                            max_value = 1.337, )
                        ], 
                    instrumentals = [
                        openapi_client.models.artist_collections_inner_ai_check_results_master_inner.ArtistCollections_inner_ai_check_results_master_inner(
                            filename = '', 
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                1.337
                                ], 
                            average_value = 1.337, 
                            max_value = 1.337, )
                        ], 
                    vocals = [
                        
                        ], 
                    bass = [
                        
                        ], 
                    drums = [
                        
                        ], ),
                synthesis_rules = openapi_client.models.artist_collections_inner_synthesis_rules.ArtistCollections_inner_synthesis_rules(
                    no_attribution_greater_than = 1.337, 
                    no_attribution_smaller_than = 1.337, 
                    no_shared_attribution_with_artist = '', 
                    no_shared_attribution_with_genre = '', ),
                label = '',
                use_for_training_timestamp = 1.337,
                ai_company_notication_status = '',
                stems = openapi_client.models._v1_ai_artist_collection__collection_uuid__get_200_response_stems._v1_ai_artist_collection__collectionUuid__get_200_response_stems(
                    instrumentals = [
                        ''
                        ], 
                    vocals = [
                        ''
                        ], 
                    drums = [
                        ''
                        ], 
                    bass = [
                        ''
                        ], ),
                lyrics = [
                    openapi_client.models._v1_ai_artist_collection__collection_uuid__get_200_response_lyrics_inner._v1_ai_artist_collection__collectionUuid__get_200_response_lyrics_inner(
                        filename = '', 
                        lyrics = '', )
                    ]
            )
        else:
            return V1AiArtistCollectionCollectionUuidGet200Response(
                collection_uuid = '',
                username = '',
                status = None,
                stems = openapi_client.models._v1_ai_artist_collection__collection_uuid__get_200_response_stems._v1_ai_artist_collection__collectionUuid__get_200_response_stems(
                    instrumentals = [
                        ''
                        ], 
                    vocals = [
                        ''
                        ], 
                    drums = [
                        ''
                        ], 
                    bass = [
                        ''
                        ], ),
                lyrics = [
                    openapi_client.models._v1_ai_artist_collection__collection_uuid__get_200_response_lyrics_inner._v1_ai_artist_collection__collectionUuid__get_200_response_lyrics_inner(
                        filename = '', 
                        lyrics = '', )
                    ],
        )
        """

    def testV1AiArtistCollectionCollectionUuidGet200Response(self):
        """Test V1AiArtistCollectionCollectionUuidGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
