# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_result_by_request_id200_response import GetResultByRequestId200Response

class TestGetResultByRequestId200Response(unittest.TestCase):
    """GetResultByRequestId200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetResultByRequestId200Response:
        """Test GetResultByRequestId200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetResultByRequestId200Response`
        """
        model = GetResultByRequestId200Response()
        if include_optional:
            return GetResultByRequestId200Response(
                status = None,
                error_message = '',
                endpoint = '',
                request_id = '',
                request_body = None,
                created_at = 1.337,
                images_signed_urls = [
                    ''
                    ],
                preview_images_signed_urls = [
                    ''
                    ],
                attribution = [
                    openapi_client.models.attribution.Attribution(
                        filename = '', 
                        values = [
                            openapi_client.models.attribution_values_inner.Attribution_values_inner(
                                artist = '', 
                                value = 1.337, 
                                username = '', 
                                collection_name = '', 
                                collection_uuid = '', )
                            ], )
                    ],
                provenance = [
                    openapi_client.models.attribution.Attribution(
                        filename = '', 
                        values = [
                            openapi_client.models.attribution_values_inner.Attribution_values_inner(
                                artist = '', 
                                value = 1.337, 
                                username = '', 
                                collection_name = '', 
                                collection_uuid = '', )
                            ], )
                    ],
                content_image = '',
                style_image = '',
                mask_image = '',
                artist_profile_pictures = [
                    openapi_client.models.artist_profile_picture.ArtistProfilePicture(
                        artist_name = '', 
                        picture = '', 
                        collection_name = '', 
                        collection_uuid = '', )
                    ],
                seed = 1.337,
                request_data = openapi_client.models.analysis_history_entry_request_data_any_of.AnalysisHistoryEntry_requestData_anyOf(
                    user_id = '', 
                    request_id = '', 
                    apply_watermark = True, 
                    custom_watermark = '', 
                    artist_preset = [
                        openapi_client.models.analysis_history_entry_request_data_any_of_artist_preset_inner.AnalysisHistoryEntry_requestData_anyOf_artist_preset_inner(
                            collection_uuid = '', 
                            preset_attribution = 1.337, 
                            username = '', 
                            collection_name = '', 
                            artist = '', )
                        ], 
                    batch_size = 1.337, 
                    negative_prompt = '', 
                    remove_bg = True, 
                    resolution = '', 
                    seed = 1.337, 
                    style_preset = '', 
                    upscale = 1.337, 
                    controlnet = openapi_client.models.analysis_history_entry_request_data_any_of_controlnet.AnalysisHistoryEntry_requestData_anyOf_controlnet(
                        conditioning_scale = null, 
                        guidance_start = 1.337, 
                        guidance_end = 1.337, ), 
                    artist_uuid = '', 
                    train_text_encoder = True, 
                    num_train_steps = 56, 
                    learning_rate = 1.337, 
                    creative_inpainting = True, 
                    text_prompt = '', ),
                image_attribution_analysis = openapi_client.models.analysis_history_entry_image_attribution_analysis.AnalysisHistoryEntry_imageAttributionAnalysis(
                    similar_files = [
                        openapi_client.models.analysis_history_entry_image_attribution_analysis_similar_files_inner.AnalysisHistoryEntry_imageAttributionAnalysis_similarFiles_inner(
                            attribution_likelihood = 1.337, 
                            cross_correlation = 1.337, 
                            color_matching = openapi_client.models.analysis_history_entry_image_attribution_analysis_similar_files_inner_color_matching.AnalysisHistoryEntry_imageAttributionAnalysis_similarFiles_inner_color_matching(
                                g_channel = 1.337, 
                                r_channel = 1.337, 
                                b_channel = 1.337, ), 
                            color_matching_combined = 1.337, 
                            pixelwise_similarity = 1.337, 
                            filename = '', 
                            signed_url = '', 
                            signed_url_thumbnail = '', 
                            username = '', 
                            collection_name = '', 
                            collection_uuid = '', )
                        ], 
                    top_metrics = openapi_client.models.analysis_history_entry_image_attribution_analysis_top_metrics.AnalysisHistoryEntry_imageAttributionAnalysis_topMetrics(
                        attribution_likelihood = openapi_client.models.analysis_history_entry_image_attribution_analysis_top_metrics_attribution_likelihood.AnalysisHistoryEntry_imageAttributionAnalysis_topMetrics_attribution_likelihood(
                            value = 1.337, 
                            signed_url = '', 
                            signed_url_thumbnail = '', 
                            username = '', 
                            collection_name = '', 
                            collection_uuid = '', 
                            track_name = '', ), 
                        cross_correlation = openapi_client.models.analysis_history_entry_image_attribution_analysis_top_metrics_attribution_likelihood.AnalysisHistoryEntry_imageAttributionAnalysis_topMetrics_attribution_likelihood(
                            value = 1.337, 
                            signed_url = '', 
                            signed_url_thumbnail = '', 
                            username = '', 
                            collection_name = '', 
                            collection_uuid = '', 
                            track_name = '', ), 
                        color_matching = openapi_client.models.analysis_history_entry_image_attribution_analysis_top_metrics_color_matching.AnalysisHistoryEntry_imageAttributionAnalysis_topMetrics_color_matching(
                            g_channel = , 
                            r_channel = , 
                            b_channel = , ), 
                        color_matching_combined = , 
                        pixelwise_similarity = , 
                        identical_matches = openapi_client.models.analysis_history_entry_image_attribution_analysis_top_metrics_identical_matches.AnalysisHistoryEntry_imageAttributionAnalysis_topMetrics_identical_matches(
                            value = 1.337, 
                            signed_urls = [
                                null
                                ], 
                            signed_urls_thumbnails = [
                                null
                                ], ), ), )
            )
        else:
            return GetResultByRequestId200Response(
                request_id = '',
        )
        """

    def testGetResultByRequestId200Response(self):
        """Test GetResultByRequestId200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
