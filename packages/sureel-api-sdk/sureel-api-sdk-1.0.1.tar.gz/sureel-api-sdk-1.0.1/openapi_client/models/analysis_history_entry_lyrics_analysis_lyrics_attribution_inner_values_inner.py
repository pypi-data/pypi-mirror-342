# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AnalysisHistoryEntryLyricsAnalysisLyricsAttributionInnerValuesInner(BaseModel):
    """
    AnalysisHistoryEntryLyricsAnalysisLyricsAttributionInnerValuesInner
    """ # noqa: E501
    score: List[Union[StrictFloat, StrictInt]] = Field(description="The degree of copyright infringement per chunk related to the lyrics.")
    mean_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The mean degree of copyright infringement over the whole lyrics.")
    similar_lyrics_inspected: List[StrictStr] = Field(description="The corresponding lyrics from the new song that match the original lyrics.")
    similar_lyrics_original: List[StrictStr] = Field(description="The most similar lyrics from the original song.")
    track_name: Optional[StrictStr] = Field(default=None, description="The name of the song.")
    track: StrictStr = Field(description="The track associated with the original lyrics.")
    is_spotify_url: StrictBool = Field(description="Whether the returned track URL is a Spotify URL or not.")
    __properties: ClassVar[List[str]] = ["score", "mean_score", "similar_lyrics_inspected", "similar_lyrics_original", "track_name", "track", "is_spotify_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalysisHistoryEntryLyricsAnalysisLyricsAttributionInnerValuesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalysisHistoryEntryLyricsAnalysisLyricsAttributionInnerValuesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "score": obj.get("score"),
            "mean_score": obj.get("mean_score"),
            "similar_lyrics_inspected": obj.get("similar_lyrics_inspected"),
            "similar_lyrics_original": obj.get("similar_lyrics_original"),
            "track_name": obj.get("track_name"),
            "track": obj.get("track"),
            "is_spotify_url": obj.get("is_spotify_url")
        })
        return _obj


