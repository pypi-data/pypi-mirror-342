# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.v1_ai_audio_ldm_request_id_get200_response import V1AiAudioLdmRequestIdGet200Response

class TestV1AiAudioLdmRequestIdGet200Response(unittest.TestCase):
    """V1AiAudioLdmRequestIdGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1AiAudioLdmRequestIdGet200Response:
        """Test V1AiAudioLdmRequestIdGet200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1AiAudioLdmRequestIdGet200Response`
        """
        model = V1AiAudioLdmRequestIdGet200Response()
        if include_optional:
            return V1AiAudioLdmRequestIdGet200Response(
                status = None,
                error_message = '',
                endpoint = '',
                request_id = '',
                request_body = None,
                created_at = 1.337,
                audios_signed_urls = [
                    ''
                    ],
                stem_splitted_audios_signed_urls = [
                    ''
                    ],
                content_audio = '',
                seed = 1.337,
                attribution = [
                    openapi_client.models.attribution.Attribution(
                        filename = '', 
                        values = [
                            openapi_client.models.attribution_1_values_inner.Attribution_1_values_inner(
                                artist = '', 
                                value = 1.337, 
                                username = '', 
                                collection_name = '', 
                                collection_uuid = '', 
                                track_name = '', )
                            ], )
                    ],
                attribution_per_collection = openapi_client.models.attribution_with_stems.AttributionWithStems(
                    master = [
                        openapi_client.models.attribution_with_stems_master_inner.AttributionWithStems_master_inner(
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                openapi_client.models.attribution.Attribution(
                                    filename = '', 
                                    values = [
                                        openapi_client.models.attribution_1_values_inner.Attribution_1_values_inner(
                                            artist = '', 
                                            value = 1.337, 
                                            username = '', 
                                            collection_name = '', 
                                            collection_uuid = '', 
                                            track_name = '', )
                                        ], )
                                ], )
                        ], 
                    instrumentals = [
                        openapi_client.models.attribution_with_stems_master_inner.AttributionWithStems_master_inner(
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                openapi_client.models.attribution.Attribution(
                                    filename = '', 
                                    values = [
                                        openapi_client.models.attribution_1_values_inner.Attribution_1_values_inner(
                                            artist = '', 
                                            value = 1.337, 
                                            username = '', 
                                            collection_name = '', 
                                            collection_uuid = '', 
                                            track_name = '', )
                                        ], )
                                ], )
                        ], 
                    vocals = [
                        
                        ], 
                    bass = [
                        
                        ], 
                    drums = [
                        
                        ], ),
                attribution_per_track = openapi_client.models.attribution_with_stems.AttributionWithStems(
                    master = [
                        openapi_client.models.attribution_with_stems_master_inner.AttributionWithStems_master_inner(
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                openapi_client.models.attribution.Attribution(
                                    filename = '', 
                                    values = [
                                        openapi_client.models.attribution_1_values_inner.Attribution_1_values_inner(
                                            artist = '', 
                                            value = 1.337, 
                                            username = '', 
                                            collection_name = '', 
                                            collection_uuid = '', 
                                            track_name = '', )
                                        ], )
                                ], )
                        ], 
                    instrumentals = [
                        openapi_client.models.attribution_with_stems_master_inner.AttributionWithStems_master_inner(
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                openapi_client.models.attribution.Attribution(
                                    filename = '', 
                                    values = [
                                        openapi_client.models.attribution_1_values_inner.Attribution_1_values_inner(
                                            artist = '', 
                                            value = 1.337, 
                                            username = '', 
                                            collection_name = '', 
                                            collection_uuid = '', 
                                            track_name = '', )
                                        ], )
                                ], )
                        ], 
                    vocals = [
                        
                        ], 
                    bass = [
                        
                        ], 
                    drums = [
                        
                        ], ),
                provenance = [
                    openapi_client.models.attribution.Attribution(
                        filename = '', 
                        values = [
                            openapi_client.models.attribution_1_values_inner.Attribution_1_values_inner(
                                artist = '', 
                                value = 1.337, 
                                username = '', 
                                collection_name = '', 
                                collection_uuid = '', 
                                track_name = '', )
                            ], )
                    ],
                artist_profile_pictures = [
                    openapi_client.models.artist_profile_picture.ArtistProfilePicture(
                        artist_name = '', 
                        picture = '', 
                        collection_name = '', 
                        collection_uuid = '', )
                    ],
                request_data = openapi_client.models.audio_ldm_request_data.AudioLdmRequestData(
                    user_id = '', 
                    request_id = '', 
                    batch_size = 1.337, 
                    seed = 1.337, 
                    num_train_steps = 56, 
                    text_prompt = '', 
                    artist_preset = [
                        openapi_client.models.analysis_history_entry_request_data_any_of_artist_preset_inner.AnalysisHistoryEntry_requestData_anyOf_artist_preset_inner(
                            collection_uuid = '', 
                            preset_attribution = 1.337, 
                            username = '', 
                            collection_name = '', 
                            artist = '', )
                        ], ),
                audio_attribution_analysis = openapi_client.models.analysis_history_entry_audio_attribution_analysis.AnalysisHistoryEntry_audioAttributionAnalysis(
                    master = [
                        openapi_client.models.analysis_history_entry_audio_attribution_analysis_master_inner.AnalysisHistoryEntry_audioAttributionAnalysis_master_inner(
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                openapi_client.models.analysis_history_entry_audio_attribution_analysis_master_inner_values_inner.AnalysisHistoryEntry_audioAttributionAnalysis_master_inner_values_inner(
                                    filename = '', 
                                    values = [
                                        openapi_client.models.analysis_history_entry_audio_attribution_analysis_master_inner_values_inner_values_inner.AnalysisHistoryEntry_audioAttributionAnalysis_master_inner_values_inner_values_inner(
                                            attribution_likelihood = [
                                                1.337
                                                ], 
                                            max_attribution = [
                                                1.337
                                                ], 
                                            average_attribution = [
                                                1.337
                                                ], 
                                            track = '', 
                                            filename = '', 
                                            signed_url = '', 
                                            is_spotify_url = True, 
                                            username = '', 
                                            collection_name = '', 
                                            collection_uuid = '', 
                                            track_name = '', )
                                        ], 
                                    top_metrics = openapi_client.models.analysis_history_entry_audio_attribution_analysis_master_inner_values_inner_top_metrics.AnalysisHistoryEntry_audioAttributionAnalysis_master_inner_values_inner_topMetrics(
                                        attribution_likelihood = openapi_client.models.analysis_history_entry_image_attribution_analysis_top_metrics_attribution_likelihood.AnalysisHistoryEntry_imageAttributionAnalysis_topMetrics_attribution_likelihood(
                                            value = 1.337, 
                                            signed_url = '', 
                                            signed_url_thumbnail = '', 
                                            username = '', 
                                            collection_name = '', 
                                            collection_uuid = '', 
                                            track_name = '', ), 
                                        identical_matches = openapi_client.models.analysis_history_entry_audio_attribution_analysis_master_inner_values_inner_top_metrics_identical_matches.AnalysisHistoryEntry_audioAttributionAnalysis_master_inner_values_inner_topMetrics_identical_matches(
                                            value = 1.337, 
                                            signed_urls = [
                                                null
                                                ], ), 
                                        max_attribution = openapi_client.models.analysis_history_entry_image_attribution_analysis_top_metrics_attribution_likelihood.AnalysisHistoryEntry_imageAttributionAnalysis_topMetrics_attribution_likelihood(
                                            value = 1.337, 
                                            signed_url = '', 
                                            signed_url_thumbnail = '', 
                                            username = '', 
                                            collection_name = '', 
                                            collection_uuid = '', 
                                            track_name = '', ), 
                                        average_attribution = , ), )
                                ], )
                        ], 
                    instrumentals = [
                        openapi_client.models.analysis_history_entry_audio_attribution_analysis_master_inner.AnalysisHistoryEntry_audioAttributionAnalysis_master_inner(
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                openapi_client.models.analysis_history_entry_audio_attribution_analysis_master_inner_values_inner.AnalysisHistoryEntry_audioAttributionAnalysis_master_inner_values_inner(
                                    filename = '', 
                                    values = [
                                        openapi_client.models.analysis_history_entry_audio_attribution_analysis_master_inner_values_inner_values_inner.AnalysisHistoryEntry_audioAttributionAnalysis_master_inner_values_inner_values_inner(
                                            attribution_likelihood = [
                                                1.337
                                                ], 
                                            max_attribution = [
                                                1.337
                                                ], 
                                            average_attribution = [
                                                1.337
                                                ], 
                                            track = '', 
                                            filename = '', 
                                            signed_url = '', 
                                            is_spotify_url = True, 
                                            username = '', 
                                            collection_name = '', 
                                            collection_uuid = '', 
                                            track_name = '', )
                                        ], )
                                ], )
                        ], 
                    vocals = [
                        
                        ], 
                    bass = [
                        
                        ], 
                    drums = [
                        
                        ], ),
                opt_out_analysis = openapi_client.models.opt_out_analysis.OptOutAnalysis(
                    master = [
                        openapi_client.models.opt_out_analysis_master_inner.OptOutAnalysis_master_inner(
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                openapi_client.models.opt_out_info.OptOutInfo(
                                    filename = '', 
                                    values = [
                                        openapi_client.models.opt_out_info_values_inner.OptOutInfo_values_inner(
                                            album = '', 
                                            album_id = '', 
                                            opt_in = True, 
                                            apple_music_uri = '', 
                                            artist = '', 
                                            cover_art_uri = '', 
                                            genre = '', 
                                            isrc = '', 
                                            label = '', 
                                            release_date = '', 
                                            score = [
                                                1.337
                                                ], 
                                            title = '', 
                                            track_id = '', 
                                            track_url = '', )
                                        ], )
                                ], )
                        ], ),
                lyrics_analysis = openapi_client.models.analysis_history_entry_lyrics_analysis.AnalysisHistoryEntry_lyricsAnalysis(
                    filename = '', 
                    lyrics = '', 
                    lyrics_attribution = [
                        openapi_client.models.analysis_history_entry_lyrics_analysis_lyrics_attribution_inner.AnalysisHistoryEntry_lyricsAnalysis_lyrics_attribution_inner(
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                openapi_client.models.analysis_history_entry_lyrics_analysis_lyrics_attribution_inner_values_inner.AnalysisHistoryEntry_lyricsAnalysis_lyrics_attribution_inner_values_inner(
                                    score = [
                                        1.337
                                        ], 
                                    mean_score = 1.337, 
                                    similar_lyrics_inspected = [
                                        ''
                                        ], 
                                    similar_lyrics_original = [
                                        ''
                                        ], 
                                    track_name = '', 
                                    track = '', 
                                    is_spotify_url = True, )
                                ], )
                        ], 
                    translated_lyrics = '', ),
                ai_generated_likelihood = openapi_client.models.artist_collections_inner_ai_check_results.ArtistCollections_inner_ai_check_results(
                    master = [
                        openapi_client.models.artist_collections_inner_ai_check_results_master_inner.ArtistCollections_inner_ai_check_results_master_inner(
                            filename = '', 
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                1.337
                                ], 
                            average_value = 1.337, 
                            max_value = 1.337, )
                        ], 
                    instrumentals = [
                        openapi_client.models.artist_collections_inner_ai_check_results_master_inner.ArtistCollections_inner_ai_check_results_master_inner(
                            filename = '', 
                            duration = 1.337, 
                            period = 1.337, 
                            values = [
                                1.337
                                ], 
                            average_value = 1.337, 
                            max_value = 1.337, )
                        ], 
                    vocals = [
                        
                        ], 
                    bass = [
                        
                        ], 
                    drums = [
                        
                        ], ),
                similar_tracks = [
                    openapi_client.models.analysis_history_entry_similar_tracks_inner.AnalysisHistoryEntry_similarTracks_inner(
                        track = '', 
                        signed_url = '', 
                        is_spotify_url = True, 
                        username = '', 
                        collection_name = '', 
                        collection_uuid = '', 
                        track_name = '', )
                    ],
                artist_uuid = ''
            )
        else:
            return V1AiAudioLdmRequestIdGet200Response(
                request_id = '',
        )
        """

    def testV1AiAudioLdmRequestIdGet200Response(self):
        """Test V1AiAudioLdmRequestIdGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
