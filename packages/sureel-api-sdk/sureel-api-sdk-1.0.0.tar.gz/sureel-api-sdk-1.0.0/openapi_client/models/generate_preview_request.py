# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GeneratePreviewRequest(BaseModel):
    """
    GeneratePreviewRequest
    """ # noqa: E501
    content_image_path: StrictStr = Field(description="The `contentImagePath` can either be an image URL or the image path returned from the `/ldm/upload-images` or `/artist/post-upload-urls` endpoint.         Supported formats include JPG and PNG.", alias="contentImagePath")
    apply_watermark: Optional[StrictBool] = Field(default=None, description="Flag whether to apply a watermark to the images or not.     The watermark can be either the Sureel watermark or a custom watermark provided through the `customWatermark` parameter.", alias="applyWatermark")
    custom_watermark: Optional[StrictStr] = Field(default=None, description="Define a custom watermark image to be applied to the images.             It should be square and must have an alpha channel.             The watermark should be oriented towards the lower left corner of the watermark image.             The `customWatermark` can either be an image URL or the image path returned from the `/ldm/upload-images` or `/artist/post-upload-urls` endpoint.             Supported formats include PNG.", alias="customWatermark")
    remove_bg: Optional[StrictBool] = Field(default=None, description="Flag whether to remove the semantic background of the image.", alias="removeBg")
    webhook: Optional[StrictStr] = Field(default=None, description="Webhook URL where you receive notifications regarding completed requests.")
    __properties: ClassVar[List[str]] = ["contentImagePath", "applyWatermark", "customWatermark", "removeBg", "webhook"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GeneratePreviewRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GeneratePreviewRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentImagePath": obj.get("contentImagePath"),
            "applyWatermark": obj.get("applyWatermark"),
            "customWatermark": obj.get("customWatermark"),
            "removeBg": obj.get("removeBg"),
            "webhook": obj.get("webhook")
        })
        return _obj


