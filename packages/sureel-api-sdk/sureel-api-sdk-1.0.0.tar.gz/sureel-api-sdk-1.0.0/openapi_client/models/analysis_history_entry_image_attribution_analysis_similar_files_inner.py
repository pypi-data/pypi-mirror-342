# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.analysis_history_entry_image_attribution_analysis_similar_files_inner_color_matching import AnalysisHistoryEntryImageAttributionAnalysisSimilarFilesInnerColorMatching
from typing import Optional, Set
from typing_extensions import Self

class AnalysisHistoryEntryImageAttributionAnalysisSimilarFilesInner(BaseModel):
    """
    AnalysisHistoryEntryImageAttributionAnalysisSimilarFilesInner
    """ # noqa: E501
    attribution_likelihood: Union[StrictFloat, StrictInt]
    cross_correlation: Optional[Union[StrictFloat, StrictInt]] = None
    color_matching: AnalysisHistoryEntryImageAttributionAnalysisSimilarFilesInnerColorMatching
    color_matching_combined: Optional[Union[StrictFloat, StrictInt]] = None
    pixelwise_similarity: Union[StrictFloat, StrictInt]
    filename: Optional[StrictStr] = None
    signed_url: Optional[StrictStr] = None
    signed_url_thumbnail: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    collection_name: Optional[StrictStr] = None
    collection_uuid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["attribution_likelihood", "cross_correlation", "color_matching", "color_matching_combined", "pixelwise_similarity", "filename", "signed_url", "signed_url_thumbnail", "username", "collection_name", "collection_uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalysisHistoryEntryImageAttributionAnalysisSimilarFilesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of color_matching
        if self.color_matching:
            _dict['color_matching'] = self.color_matching.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalysisHistoryEntryImageAttributionAnalysisSimilarFilesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attribution_likelihood": obj.get("attribution_likelihood"),
            "cross_correlation": obj.get("cross_correlation"),
            "color_matching": AnalysisHistoryEntryImageAttributionAnalysisSimilarFilesInnerColorMatching.from_dict(obj["color_matching"]) if obj.get("color_matching") is not None else None,
            "color_matching_combined": obj.get("color_matching_combined"),
            "pixelwise_similarity": obj.get("pixelwise_similarity"),
            "filename": obj.get("filename"),
            "signed_url": obj.get("signed_url"),
            "signed_url_thumbnail": obj.get("signed_url_thumbnail"),
            "username": obj.get("username"),
            "collection_name": obj.get("collection_name"),
            "collection_uuid": obj.get("collection_uuid")
        })
        return _obj


