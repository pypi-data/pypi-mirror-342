# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.artist_collections_inner import ArtistCollectionsInner
from openapi_client.models.artist_collections_inner_suno_analysis_result_inner import ArtistCollectionsInnerSunoAnalysisResultInner
from openapi_client.models.get_own_collections200_response_user_role import GetOwnCollections200ResponseUserRole
from openapi_client.models.subscription_tier import SubscriptionTier
from openapi_client.models.updated_at import UpdatedAt
from typing import Optional, Set
from typing_extensions import Self

class GetOwnCollections200Response(BaseModel):
    """
    GetOwnCollections200Response
    """ # noqa: E501
    username: StrictStr
    auth0_id: Optional[StrictStr] = None
    profile_picture_s3_key: Optional[StrictStr] = None
    cover_image_s3_key: Optional[StrictStr] = None
    picture: Optional[StrictStr] = None
    cover_image: Optional[StrictStr] = None
    family_name: Optional[StrictStr] = None
    given_name: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    profile_description: Optional[StrictStr] = None
    url_external_website: Optional[StrictStr] = None
    updated_at: Optional[UpdatedAt] = None
    user_role: Optional[GetOwnCollections200ResponseUserRole] = None
    stripe_customer_id: Optional[StrictStr] = None
    subscription_tier: Optional[SubscriptionTier] = None
    customer_name: Optional[StrictStr] = None
    connected_api_user: Optional[StrictStr] = None
    logo: Optional[StrictStr] = None
    api_terms_and_conditions: Optional[StrictBool] = None
    created_at: Optional[Union[StrictFloat, StrictInt]] = None
    zero_balance_email_sent: Optional[StrictBool] = None
    low_balance_email_sent: Optional[StrictBool] = None
    balance_treshold: Optional[Union[StrictFloat, StrictInt]] = None
    sub_labels: Optional[List[StrictStr]] = None
    spotify_user_id: Optional[StrictStr] = None
    spotify_display_name: Optional[StrictStr] = None
    terms_and_conditions: Optional[StrictBool] = None
    show_in_frontend: Optional[StrictBool] = None
    collection_uuids: Optional[List[StrictStr]] = None
    collections: Optional[List[ArtistCollectionsInner]] = None
    attribution_setup_status: Optional[StrictStr] = None
    suno_analysis_request_ids: Optional[List[StrictStr]] = None
    suno_analysis_result: Optional[List[ArtistCollectionsInnerSunoAnalysisResultInner]] = None
    __properties: ClassVar[List[str]] = ["username", "auth0_id", "profile_picture_s3_key", "cover_image_s3_key", "picture", "cover_image", "family_name", "given_name", "email", "profile_description", "url_external_website", "updated_at", "user_role", "stripe_customer_id", "subscription_tier", "customer_name", "connected_api_user", "logo", "api_terms_and_conditions", "created_at", "zero_balance_email_sent", "low_balance_email_sent", "balance_treshold", "sub_labels", "spotify_user_id", "spotify_display_name", "terms_and_conditions", "show_in_frontend", "collection_uuids", "collections", "attribution_setup_status", "suno_analysis_request_ids", "suno_analysis_result"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOwnCollections200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict['updated_at'] = self.updated_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_role
        if self.user_role:
            _dict['user_role'] = self.user_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_tier
        if self.subscription_tier:
            _dict['subscription_tier'] = self.subscription_tier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in collections (list)
        _items = []
        if self.collections:
            for _item_collections in self.collections:
                if _item_collections:
                    _items.append(_item_collections.to_dict())
            _dict['collections'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in suno_analysis_result (list)
        _items = []
        if self.suno_analysis_result:
            for _item_suno_analysis_result in self.suno_analysis_result:
                if _item_suno_analysis_result:
                    _items.append(_item_suno_analysis_result.to_dict())
            _dict['suno_analysis_result'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOwnCollections200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "username": obj.get("username"),
            "auth0_id": obj.get("auth0_id"),
            "profile_picture_s3_key": obj.get("profile_picture_s3_key"),
            "cover_image_s3_key": obj.get("cover_image_s3_key"),
            "picture": obj.get("picture"),
            "cover_image": obj.get("cover_image"),
            "family_name": obj.get("family_name"),
            "given_name": obj.get("given_name"),
            "email": obj.get("email"),
            "profile_description": obj.get("profile_description"),
            "url_external_website": obj.get("url_external_website"),
            "updated_at": UpdatedAt.from_dict(obj["updated_at"]) if obj.get("updated_at") is not None else None,
            "user_role": GetOwnCollections200ResponseUserRole.from_dict(obj["user_role"]) if obj.get("user_role") is not None else None,
            "stripe_customer_id": obj.get("stripe_customer_id"),
            "subscription_tier": SubscriptionTier.from_dict(obj["subscription_tier"]) if obj.get("subscription_tier") is not None else None,
            "customer_name": obj.get("customer_name"),
            "connected_api_user": obj.get("connected_api_user"),
            "logo": obj.get("logo"),
            "api_terms_and_conditions": obj.get("api_terms_and_conditions"),
            "created_at": obj.get("created_at"),
            "zero_balance_email_sent": obj.get("zero_balance_email_sent"),
            "low_balance_email_sent": obj.get("low_balance_email_sent"),
            "balance_treshold": obj.get("balance_treshold"),
            "sub_labels": obj.get("sub_labels"),
            "spotify_user_id": obj.get("spotify_user_id"),
            "spotify_display_name": obj.get("spotify_display_name"),
            "terms_and_conditions": obj.get("terms_and_conditions"),
            "show_in_frontend": obj.get("show_in_frontend"),
            "collection_uuids": obj.get("collection_uuids"),
            "collections": [ArtistCollectionsInner.from_dict(_item) for _item in obj["collections"]] if obj.get("collections") is not None else None,
            "attribution_setup_status": obj.get("attribution_setup_status"),
            "suno_analysis_request_ids": obj.get("suno_analysis_request_ids"),
            "suno_analysis_result": [ArtistCollectionsInnerSunoAnalysisResultInner.from_dict(_item) for _item in obj["suno_analysis_result"]] if obj.get("suno_analysis_result") is not None else None
        })
        return _obj


