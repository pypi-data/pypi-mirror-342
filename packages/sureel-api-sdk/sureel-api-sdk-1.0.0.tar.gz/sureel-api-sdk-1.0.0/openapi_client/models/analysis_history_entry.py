# coding: utf-8

"""
    Sureel API

    API for the Sureel network.

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analysis_history_entry_artist_profile_pictures import AnalysisHistoryEntryArtistProfilePictures
from openapi_client.models.analysis_history_entry_attribution import AnalysisHistoryEntryAttribution
from openapi_client.models.analysis_history_entry_audio_attribution_analysis import AnalysisHistoryEntryAudioAttributionAnalysis
from openapi_client.models.analysis_history_entry_created_at import AnalysisHistoryEntryCreatedAt
from openapi_client.models.analysis_history_entry_error_message import AnalysisHistoryEntryErrorMessage
from openapi_client.models.analysis_history_entry_image_attribution_analysis import AnalysisHistoryEntryImageAttributionAnalysis
from openapi_client.models.analysis_history_entry_lyrics_analysis import AnalysisHistoryEntryLyricsAnalysis
from openapi_client.models.analysis_history_entry_request_data import AnalysisHistoryEntryRequestData
from openapi_client.models.analysis_history_entry_similar_tracks_inner import AnalysisHistoryEntrySimilarTracksInner
from openapi_client.models.analysis_history_entry_status import AnalysisHistoryEntryStatus
from openapi_client.models.artist_collections_inner_ai_check_results import ArtistCollectionsInnerAiCheckResults
from openapi_client.models.attribution_with_stems import AttributionWithStems
from openapi_client.models.opt_out_analysis import OptOutAnalysis
from typing import Optional, Set
from typing_extensions import Self

class AnalysisHistoryEntry(BaseModel):
    """
    AnalysisHistoryEntry
    """ # noqa: E501
    status: Optional[AnalysisHistoryEntryStatus] = None
    error_message: Optional[AnalysisHistoryEntryErrorMessage] = Field(default=None, alias="errorMessage")
    endpoint: Optional[AnalysisHistoryEntryErrorMessage] = None
    request_id: AnalysisHistoryEntryErrorMessage = Field(alias="requestId")
    request_body: Optional[Any] = None
    created_at: Optional[AnalysisHistoryEntryCreatedAt] = Field(default=None, alias="createdAt")
    images_signed_urls: Optional[List[StrictStr]] = Field(default=None, alias="imagesSignedUrls")
    preview_images_signed_urls: Optional[List[StrictStr]] = Field(default=None, alias="previewImagesSignedUrls")
    attribution: Optional[AnalysisHistoryEntryAttribution] = None
    provenance: Optional[AnalysisHistoryEntryAttribution] = None
    content_image: Optional[StrictStr] = Field(default=None, alias="contentImage")
    style_image: Optional[StrictStr] = Field(default=None, alias="styleImage")
    mask_image: Optional[StrictStr] = Field(default=None, alias="maskImage")
    artist_profile_pictures: Optional[AnalysisHistoryEntryArtistProfilePictures] = Field(default=None, alias="artistProfilePictures")
    seed: Optional[AnalysisHistoryEntryCreatedAt] = None
    request_data: Optional[AnalysisHistoryEntryRequestData] = Field(default=None, alias="requestData")
    image_attribution_analysis: Optional[AnalysisHistoryEntryImageAttributionAnalysis] = Field(default=None, alias="imageAttributionAnalysis")
    audios_signed_urls: Optional[List[StrictStr]] = Field(default=None, alias="audiosSignedUrls")
    stem_splitted_audios_signed_urls: Optional[List[StrictStr]] = Field(default=None, alias="stemSplittedAudiosSignedUrls")
    content_audio: Optional[StrictStr] = Field(default=None, alias="contentAudio")
    attribution_per_collection: Optional[AttributionWithStems] = Field(default=None, alias="attributionPerCollection")
    attribution_per_track: Optional[AttributionWithStems] = Field(default=None, alias="attributionPerTrack")
    audio_attribution_analysis: Optional[AnalysisHistoryEntryAudioAttributionAnalysis] = Field(default=None, alias="audioAttributionAnalysis")
    opt_out_analysis: Optional[OptOutAnalysis] = Field(default=None, alias="optOutAnalysis")
    lyrics_analysis: Optional[AnalysisHistoryEntryLyricsAnalysis] = Field(default=None, alias="lyricsAnalysis")
    ai_generated_likelihood: Optional[ArtistCollectionsInnerAiCheckResults] = Field(default=None, alias="aiGeneratedLikelihood")
    similar_tracks: Optional[List[AnalysisHistoryEntrySimilarTracksInner]] = Field(default=None, alias="similarTracks")
    artist_uuid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["status", "errorMessage", "endpoint", "requestId", "request_body", "createdAt", "imagesSignedUrls", "previewImagesSignedUrls", "attribution", "provenance", "contentImage", "styleImage", "maskImage", "artistProfilePictures", "seed", "requestData", "imageAttributionAnalysis", "audiosSignedUrls", "stemSplittedAudiosSignedUrls", "contentAudio", "attributionPerCollection", "attributionPerTrack", "audioAttributionAnalysis", "optOutAnalysis", "lyricsAnalysis", "aiGeneratedLikelihood", "similarTracks", "artist_uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalysisHistoryEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_message
        if self.error_message:
            _dict['errorMessage'] = self.error_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of endpoint
        if self.endpoint:
            _dict['endpoint'] = self.endpoint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_id
        if self.request_id:
            _dict['requestId'] = self.request_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_body
        if self.request_body:
            _dict['request_body'] = self.request_body.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['createdAt'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attribution
        if self.attribution:
            _dict['attribution'] = self.attribution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of artist_profile_pictures
        if self.artist_profile_pictures:
            _dict['artistProfilePictures'] = self.artist_profile_pictures.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seed
        if self.seed:
            _dict['seed'] = self.seed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_data
        if self.request_data:
            _dict['requestData'] = self.request_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_attribution_analysis
        if self.image_attribution_analysis:
            _dict['imageAttributionAnalysis'] = self.image_attribution_analysis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attribution_per_collection
        if self.attribution_per_collection:
            _dict['attributionPerCollection'] = self.attribution_per_collection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attribution_per_track
        if self.attribution_per_track:
            _dict['attributionPerTrack'] = self.attribution_per_track.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audio_attribution_analysis
        if self.audio_attribution_analysis:
            _dict['audioAttributionAnalysis'] = self.audio_attribution_analysis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opt_out_analysis
        if self.opt_out_analysis:
            _dict['optOutAnalysis'] = self.opt_out_analysis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lyrics_analysis
        if self.lyrics_analysis:
            _dict['lyricsAnalysis'] = self.lyrics_analysis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ai_generated_likelihood
        if self.ai_generated_likelihood:
            _dict['aiGeneratedLikelihood'] = self.ai_generated_likelihood.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in similar_tracks (list)
        _items = []
        if self.similar_tracks:
            for _item_similar_tracks in self.similar_tracks:
                if _item_similar_tracks:
                    _items.append(_item_similar_tracks.to_dict())
            _dict['similarTracks'] = _items
        # set to None if request_body (nullable) is None
        # and model_fields_set contains the field
        if self.request_body is None and "request_body" in self.model_fields_set:
            _dict['request_body'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalysisHistoryEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": AnalysisHistoryEntryStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "errorMessage": AnalysisHistoryEntryErrorMessage.from_dict(obj["errorMessage"]) if obj.get("errorMessage") is not None else None,
            "endpoint": AnalysisHistoryEntryErrorMessage.from_dict(obj["endpoint"]) if obj.get("endpoint") is not None else None,
            "requestId": AnalysisHistoryEntryErrorMessage.from_dict(obj["requestId"]) if obj.get("requestId") is not None else None,
            "request_body": AnyOf.from_dict(obj["request_body"]) if obj.get("request_body") is not None else None,
            "createdAt": AnalysisHistoryEntryCreatedAt.from_dict(obj["createdAt"]) if obj.get("createdAt") is not None else None,
            "imagesSignedUrls": obj.get("imagesSignedUrls"),
            "previewImagesSignedUrls": obj.get("previewImagesSignedUrls"),
            "attribution": AnalysisHistoryEntryAttribution.from_dict(obj["attribution"]) if obj.get("attribution") is not None else None,
            "provenance": AnalysisHistoryEntryAttribution.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None,
            "contentImage": obj.get("contentImage"),
            "styleImage": obj.get("styleImage"),
            "maskImage": obj.get("maskImage"),
            "artistProfilePictures": AnalysisHistoryEntryArtistProfilePictures.from_dict(obj["artistProfilePictures"]) if obj.get("artistProfilePictures") is not None else None,
            "seed": AnalysisHistoryEntryCreatedAt.from_dict(obj["seed"]) if obj.get("seed") is not None else None,
            "requestData": AnalysisHistoryEntryRequestData.from_dict(obj["requestData"]) if obj.get("requestData") is not None else None,
            "imageAttributionAnalysis": AnalysisHistoryEntryImageAttributionAnalysis.from_dict(obj["imageAttributionAnalysis"]) if obj.get("imageAttributionAnalysis") is not None else None,
            "audiosSignedUrls": obj.get("audiosSignedUrls"),
            "stemSplittedAudiosSignedUrls": obj.get("stemSplittedAudiosSignedUrls"),
            "contentAudio": obj.get("contentAudio"),
            "attributionPerCollection": AttributionWithStems.from_dict(obj["attributionPerCollection"]) if obj.get("attributionPerCollection") is not None else None,
            "attributionPerTrack": AttributionWithStems.from_dict(obj["attributionPerTrack"]) if obj.get("attributionPerTrack") is not None else None,
            "audioAttributionAnalysis": AnalysisHistoryEntryAudioAttributionAnalysis.from_dict(obj["audioAttributionAnalysis"]) if obj.get("audioAttributionAnalysis") is not None else None,
            "optOutAnalysis": OptOutAnalysis.from_dict(obj["optOutAnalysis"]) if obj.get("optOutAnalysis") is not None else None,
            "lyricsAnalysis": AnalysisHistoryEntryLyricsAnalysis.from_dict(obj["lyricsAnalysis"]) if obj.get("lyricsAnalysis") is not None else None,
            "aiGeneratedLikelihood": ArtistCollectionsInnerAiCheckResults.from_dict(obj["aiGeneratedLikelihood"]) if obj.get("aiGeneratedLikelihood") is not None else None,
            "similarTracks": [AnalysisHistoryEntrySimilarTracksInner.from_dict(_item) for _item in obj["similarTracks"]] if obj.get("similarTracks") is not None else None,
            "artist_uuid": obj.get("artist_uuid")
        })
        return _obj


