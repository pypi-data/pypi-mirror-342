[build-system]
build-backend = "setuptools.build_meta"

requires = [ "setuptools>=61" ]

[project]
name = "ai-assistant-multi"
version = "1.0.0"
description = "A multi-provider CLI assistant for interacting with AI models (OpenAI, Google Gemini)."
readme = "README.md"
keywords = [ "ai", "assistant", "cli", "gemini", "gpt", "llm", "multi-provider", "openai", "terminal" ]

# Use the SPDX identifier for your license directly as a string
license = "MIT"
authors = [
  { name = "Sudharshan V", email = "sudarshan61kv@gmail.com" },
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: End Users/Desktop",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Utilities",
]
# Runtime dependencies
dependencies = [
  "google-generativeai>=0.8.5",
  "openai>=1.75",
  "questionary>=2.1",
  "rich>=14",
  "typer[all]>=0.15.2",
]

# Define the command-line script entry point
urls.Homepage = "https://github.com/Sudharshan1409/assistant-cli"
urls.Repository = "https://github.com/Sudharshan1409/assistant-cli"
# Optional: Add URLs for your project
scripts.ai-cli = "main:app"

[tool.setuptools]
# List top-level Python modules (like constants.py)
py-modules = [ "constants" ]
# List package directories to include
packages = [ "commands", "core", "utils" ]

# --- Alternative using find (more flexible if structure changes): ---
# [tool.setuptools.packages.find]
# # Tells setuptools to look in the current directory (.) for packages
# where = ["."]
# # Explicitly include these directories as packages
# include = ["commands*", "core*", "utils*"]
# # You might exclude tests if they existed: exclude = ["tests*"]
