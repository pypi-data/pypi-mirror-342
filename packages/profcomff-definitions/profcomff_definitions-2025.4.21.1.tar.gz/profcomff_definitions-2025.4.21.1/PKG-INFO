Metadata-Version: 2.4
Name: profcomff_definitions
Version: 2025.4.21.1
Summary: Data warehouse definitions and schemas
Author-email: "profcomff.com" <admin@profcomff.com>, Roman Dyakov <roman@dyakov.space>, Stanislav Roslavtsev <roslavtzev.stanislaw@yandex.ru>
License: BSD 3-Clause License
        
        Copyright (c) 2023, Профком студентов физфака МГУ
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        1. Redistributions of source code must retain the above copyright notice, this
           list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        
        3. Neither the name of the copyright holder nor the names of its
           contributors may be used to endorse or promote products derived from
           this software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
Project-URL: Homepage, https://app.profcomff.com
Project-URL: Documentation, https://github.com/profcomff/dwh-definitions/blob/main/README.md
Project-URL: Repository, https://github.com/profcomff/dwh-definitions
Project-URL: Issues, https://github.com/profcomff/dwh-definitions/issues
Project-URL: Changelog, https://github.com/profcomff/dwh-definitions/releases
Classifier: Development Status :: 5 - Production/Stable
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: SQLAlchemy
Requires-Dist: psycopg2-binary
Requires-Dist: alembic
Provides-Extra: airflow
Requires-Dist: apache-airflow; extra == "airflow"
Provides-Extra: testing
Requires-Dist: pytest; extra == "testing"
Requires-Dist: pytest-cov; extra == "testing"
Requires-Dist: pytest-mock; extra == "testing"
Requires-Dist: httpx; extra == "testing"
Requires-Dist: requests; extra == "testing"
Provides-Extra: style
Requires-Dist: black; extra == "style"
Requires-Dist: isort; extra == "style"
Requires-Dist: pydocstyle; extra == "style"
Requires-Dist: autoflake; extra == "style"
Dynamic: license-file

# dwh-definitions

Библиотека, описывающая структуру всех баз данных профкома ФФ. Реализована с помощью разделения всех баз данных в 4 категории - [STG](https://github.com/profcomff/dwh-definitions/blob/main/profcomff_definitions/STG/README.md), [DWH](https://github.com/profcomff/dwh-definitions/blob/main/profcomff_definitions/DWH/README.md), [ODS](https://github.com/profcomff/dwh-definitions/blob/main/profcomff_definitions/ODS/README.md) и [DM](https://github.com/profcomff/dwh-definitions/blob/main/profcomff_definitions/DM/README.md).

[<img src="https://cdn.profcomff.com/easycode/easycode.svg" width="200"></img>](https://easycode.profcomff.com/templates/docker-airflow/workspace?mode=manual)

## Функционал
- Удобное и структурированное хранение данных
- Разграничение и удобное управление правами доступа

## Разработка
- Backend разработка – https://github.com/profcomff/.github/wiki/%5Bdev%5D-Backend-разработка
- Работа с данными -https://github.com/profcomff/.github/wiki/%5Bdev%5D-Работа-с-данными

## Quick start
1. Перейдите в папку проекта
2. Создайте виртуальное окружение командой:
```commandline
python3 -m venv ./venv/
```
3. Установите библиотеки
```commandline
pip install -r requirements.txt
```

## Использование
В своих базах данных мы используем postgres базы данных. Для того чтобы использовать данный репозиторий необходимо сделать несколько предварительных шагов
1. Проделай пункты из "Как начать работу локально" отсюда: https://github.com/profcomff/dwh-airflow
2. Склонируй этот репозиторий на свой компьютер командой `git clone https://github.com/profcomff/dwh-definitions`
3. Создай виртуальное окружение Python. Для этого нужно:
    - Установить python3.11 (если еще не установлен): https://www.python.org/downloads/
    - Установить pip (если еще не установлен, команда в консоли `python -m ensurepip --upgrade`)
    - Создать в папке `dwh-definitions` новое виртуальное окружение python3.11 (команда в консоли `python3.11 -m venv venv` или `python -m venv venv`)
    - Подключиться к этому виртуальному окружению (команда консоли на windows: `venv\Scripts\activate.bat`, на мак/линукс: `source venv/bin/activate`)
    - Установить библиотеки командой `pip install -U -r requirements.dev.txt -r requirements.txt`

    Теперь у тебя на компьютере есть база данных, Airflow, описание базы данных в виде питона

4. Обнови схему базы данных командой `alembic upgrade head`. Это создаст в базе данных все те же таблицы, что есть в production базе данных.

5. После этого в папках из /ddl можно создавать свои схемы таблиц. Пример таблицы можно посмотреть в /ddl/STG/union_member.py


### Дальнейшие шаги:

Рассмотрим дальнейшие действия на примере тестовой таблицы Test. Допустим, что она лежит в /ddl/STG/test_table.py

1. Импортировать созданную таблицу в \_\_init__.py файл соответствующей папки. В нашем случае в /ddl/STG/\_\_init__.py необходимо дописать строчку:
```python
from .test_table import Test
```
2. В строчку c \_\_all__ = [] необходимо добавить название импортированной таблицы в кавычках. В нашем случае файл \_\_init__.py будет выглядеть так:
```python
from .test_table import Test

__all__ = ["Test"]
```
3. Если у вас несколько таблиц, то в \_\_all__ их надо перечислять через запятую. К примеру:
```python
from .test_file_first import TestFirst, TestTrird
from .test_file_second import TestSecond

__all__ = ["TestFirst", "TestSecond", "TestTrird"]
```
При этом порядок перечисления таблиц в \_\_all__ не важен

4. После импортирования всех таблиц проведите миграцию, чтобы создались новые таблицы. Миграцию можно провести командами:
```commandline
alembic revision --autogenerate -m "название_вашей_миграции"
alembic upgrade head
```
Перва команда создает ревизию - скрипт для перехода на новую версию базы данных.
Вторая команда обновляет базу данных (в данном случае создает новую таблицу Test)

## Параметризация и плагины
Никаких настроек кроме стандартных нет

## Ссылки
- Backend разработка – https://github.com/profcomff/.github/wiki/%5Bdev%5D-Backend-разработка
- Работа с данными -https://github.com/profcomff/.github/wiki/%5Bdev%5D-Работа-с-данными
