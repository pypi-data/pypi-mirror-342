# Template Tasks Example
#
# This example demonstrates template task features:
# - Variable interpolation with filters
# - Error handling with StrictUndefined
# - Conditional blocks and loops
# - Multiple output formats
# - Template inheritance
#
# Usage:
# yaml-workflow run template_tasks.yaml --user_data='{"name": "Alice", "role": "admin"}'

name: Template Tasks
description: Demonstrates template task features and best practices

settings:
  error_handling:
    undefined_variables: strict
    show_available: true

params:
  user_data:
    description: User information in JSON format
    type: object
    properties:
      name:
        type: string
        minLength: 2
      role:
        type: string
        enum: ["admin", "user", "guest"]
    required: ["name", "role"]
  template_format:
    description: Output format (html, markdown, text)
    type: string
    enum: ["html", "markdown", "text"]
    default: "html"

steps:
  # Step 1: Validate and parse user data
  - name: validate_input
    task: python_code
    inputs:
      code: |
        import json
        from typing import Dict, Any
        
        # Validate user data
        try:
          user_data = json.loads(args.user_data)
        except json.JSONDecodeError:
          raise ValueError("Invalid JSON format for user_data")
          
        if not isinstance(user_data, dict):
          raise ValueError("user_data must be a dictionary")
          
        required_fields = ["name", "age", "interests"]
        for field in required_fields:
          if field not in user_data:
            raise ValueError(f"Missing required field: {field}")
            
        if not isinstance(user_data["interests"], list):
          raise ValueError("interests must be a list")
          
        result = user_data
        result_variable: result

  # Step 2: Create base templates
  - name: create_templates
    task: write_file
    params:
      file_path: output/templates/base.html
      content: |
        <!DOCTYPE html>
        <html>
        <head>
          <title>{% block title %}User Profile{% endblock %}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 2em; }
            .profile { border: 1px solid #ccc; padding: 1em; }
            .admin { background-color: #fff3e0; }
            .permissions { margin-top: 1em; }
          </style>
        </head>
        <body>
          {% block content %}{% endblock %}
        </body>
        </html>
    condition: "steps.validate_input.status == 'completed'"

  # Step 3: Generate user profile
  - name: generate_profile
    task: template
    template: |
      {%- if args.template_format == "html" %}
      {% extends "output/templates/base.html" %}
      
      {% block title %}Profile: {{ steps.validate_input.output.name }}{% endblock %}
      
      {% block content %}
      <div class="profile {% if steps.validate_input.output.is_admin %}admin{% endif %}">
        <h1>User Profile</h1>
        <p><strong>Name:</strong> {{ steps.validate_input.output.name }}</p>
        <p><strong>Role:</strong> {{ steps.validate_input.output.role|title }}</p>
        
        <div class="permissions">
          <h2>Permissions</h2>
          <ul>
          {%- for perm, enabled in steps.validate_input.output.permissions.items() %}
            <li>{{ perm|title }}: {% if enabled %}✓{% else %}✗{% endif %}</li>
          {%- endfor %}
          </ul>
        </div>
      </div>
      {% endblock %}
      
      {%- elif args.template_format == "markdown" %}
      # User Profile: {{ steps.validate_input.output.name }}
      
      **Role:** {{ steps.validate_input.output.role|title }}
      
      ## Permissions
      {% for perm, enabled in steps.validate_input.output.permissions.items() %}
      - {{ perm|title }}: {{ "✓" if enabled else "✗" }}
      {%- endfor %}
      
      {%- else %}
      USER PROFILE
      ============
      Name: {{ steps.validate_input.output.name }}
      Role: {{ steps.validate_input.output.role|upper }}
      
      Permissions:
      {%- for perm, enabled in steps.validate_input.output.permissions.items() %}
      - {{ "%-6s"|format(perm|title) }}: {{ "[X]" if enabled else "[ ]" }}
      {%- endfor %}
      {%- endif %}
    output: "output/profile.{{ args.template_format }}"
    condition: "steps.create_templates.status == 'completed'"

  # Step 4: Display generated profile
  - name: show_profile
    task: shell
    command: |
      echo "=== Generated Profile ({{ args.template_format }}) ==="
      echo
      cat "output/profile.{{ args.template_format }}"
      echo
      echo "=== End of Profile ==="
    condition: "steps.generate_profile.status == 'completed'" 