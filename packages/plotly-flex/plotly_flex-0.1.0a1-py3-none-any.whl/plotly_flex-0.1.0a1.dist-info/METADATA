Metadata-Version: 2.4
Name: plotly-flex
Version: 0.1.0a1
Summary: Visualize large datasets interactively with Plotly by using polars as backend.
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: dash>=2.18.2
Requires-Dist: orjson>=3.10.15
Requires-Dist: plotly>=6.0.0
Requires-Dist: polars>=1.27.1
Provides-Extra: widget
Requires-Dist: anywidget>=0.9.13; extra == "widget"
Dynamic: license-file

# plotly-flex
Make plotly scalable - visualize large data with [plotly.py](https://github.com/plotly/plotly.py)!

This library aims to make plotly scalable by *aggregating data in the backend* before sending it to the frontend. This avoids loading all data into the frontend, which is how vanilla plotly works. This library is built on top of [polars](https://github.com/pola-rs/polars) to provide efficient data handling in the backend.


## Features

1. ‚ö° **Making existing plotly traces scalable**
2. ü™Ñ **Aggregating data on events** (e.g. zooming, selection)  
    => support for cross-filtering
3. üóÉÔ∏è **Efficient handling of multiple lazyframes**

### Scalable Visualization Support

Overview of the supported trace types and their scalable support.
- Update on zoom = update the view when zooming in/out (e.g. by aggregating data)
- Update on selection (cross-filtering) = update the view when selecting related data (in another subplot)

| Plot Type  | Scalable Support | Update on Zoom | Update on Selection in other trace | Allow Selection |
|------------|------------------|----------------|---------------------|----------------|
| Scatter    | Supported        | Supported      | Supported           | Supported      |
| Scattergl  | Supported        | Supported      | Supported           | Supported      |
| Histogram  | Supported        | Supported      | Supported           | Supported      |
| Box        | Supported        | Not sensible   | Supported           | Supported      |
| Bar        | Supported        | Not sensible   | Supported           | Supported      |
| Pie        | Supported        | Not sensible   | Not possible        | Not supported  |


---

### Dependency management

This project uses [uv](https://github.com/astral-sh/uv) as dependency manager.

Dependencies are automatically installed when you run the `uv sync` command. The virtualenv is created in the `.venv` folder.

- Running scripts / commands in the virtualenv is as simple as running `uv run <command>`. This will automatically activate the virtualenv and run the command.
- Adding a dependency is as simple as running `uv add <package>`. Make sure to add `--dev` if the package is only needed for development.

> [!NOTE]  
> When developing, to [update the dependencies](https://github.com/astral-sh/uv/issues/1419#issuecomment-2457314237), run: `uv lock --upgrade; uv sync`
