Metadata-Version: 2.4
Name: lang_custom
Version: 1.1.1
Summary: A simple language manager for Python projects.
Home-page: https://github.com/GauCandy/lang_custom
Author: G·∫•u K·∫πo
Author-email: gaulolipop@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python
Dynamic: summary

# Lang Custom v1.1.1

**Lang Custom** is a Python library designed to manage and load translations from JSON files, powered by **SQLite** for blazing-fast performance and reduced memory usage. Say goodbye to messy JSON parsing and hello to a standardized, headache-free language system!

## Why Lang Custom?

Lang Custom was born to simplify multilingual support for bots and applications. Managing translations can be chaotic without a proper system‚Äîscattered JSON files, inconsistent parsing, and no standardization. This library brings order with a clean API, SQLite-backed storage, and customizable language files. Whether you're building a small bot or a large-scale app, Lang Custom makes language management reliable and efficient.

## Installation

Install the library using pip:
```sh
pip install lang_custom
```

**Note**: This version is **not backward compatible** with v1.0.14 or earlier due to major changes in the API and database integration. Upgrade with caution!

## Usage Guide

### 1. Import the library
```python
import lang_custom
```

### 2. Initialize the database
Call `language_setup()` in your main script to set up the SQLite database and load data from JSON files in the `import_language/` directory:
```python
lang_custom.language_setup()
```

This creates:
- `import_language/` directory with a default `en.json` if no JSON files exist.
- `data_language/DO_NOT_DELETE.db` with tables for each language (e.g., `en`, `vi`).
- Clears all existing tables and reloads data from JSON files.

**Important**: 
- Only call `language_setup()` once in your main script. Sub-modules can use `get()` or `get_lang()` without re-initializing.
- **Do not delete** the `data_language/` directory or `DO_NOT_DELETE.db` file, especially while your bot or application is running, as this will cause data loss and errors.

### 3. Get the list of supported languages
To see available languages (based on JSON files or SQLite tables):
```python
languages = lang_custom.get_lang()
print(languages)  # Example: ['en', 'vi', 'jp']
```

### 4. Retrieve language data
Use `get(language, group, type, name)` to fetch data from SQLite:
- `language`: Name of the language (e.g., `"en"`, `"vi"`).
- `group`: Data group in the JSON structure (e.g., `"reply"`, `"error"`).
- `type`: `"text"` for a fixed string or `"random"` for a random item from a list.
- `name`: Key within the group (e.g., `"greeting"`, `"greetings"`).

Examples:
```python
# Get a fixed text
text = lang_custom.get(language="en", group="error", type="text", name="not_found")
print(text)  # Output: Resource not found

# Get a random text from a list
random_text = lang_custom.get(language="en", group="reply", type="random", name="greetings")
print(random_text)  # Output: hello :D or hi :3 or hey there!
```

If `language`, `group`, or `name` doesn‚Äôt exist, or if `type` is invalid (not `"text"` or `"random"`), it returns `None`. Invalid `type` also triggers a console warning:
```
lang_custom/language_loader.py:XXX: UserWarning: Invalid type: test. Must be 'text' or 'random'
```

### 5. File structure
Language files are stored in `import_language/` (user-added translations). Example `import_language/en.json`:
```json
{
    "reply": {
        "text": {
            "greeting": "hello :D",
            "welcome": "hi :3"
        },
        "random": {
            "greetings": ["hello :D", "hi :3", "hey there!"]
        }
    },
    "error": {
        "text": {
            "not_found": "Resource not found",
            "invalid": "Invalid input"
        },
        "random": {
            "errors": ["Oops, something went wrong!", "Uh-oh, try again!"]
        }
    }
}
```

Add your own JSON files (e.g., `vi.json`, `jp.json`) to `import_language/` with the same structure. Run `language_setup()` to load them into SQLite.

## Performance Benefits
- **SQLite Storage**: Language data is stored in `data_language/DO_NOT_DELETE.db`, reducing memory usage compared to parsing JSON files repeatedly.
- **Fast Queries**: SQLite queries are faster than JSON parsing, especially for large datasets or frequent access.
- **Single Initialization**: `language_setup()` loads data once, and sub-modules query the database directly.

## Compatibility
**v1.1.1 is not backward compatible** with v1.0.14 or earlier due to:
- New SQLite-based architecture.
- Replaced `lang()`, `group()`, `get_text()`, `random_text()` with `get()`.
- Removed caching mechanism (SQLite handles performance).

Update your code to use the new API. Check the [Usage Guide](#usage-guide) for details.

## Important Notes
- **Do not delete** the `data_language/` directory or `DO_NOT_DELETE.db` file while your bot or application is running. This file contains all language data, and deleting it will cause your application to fail.
- If you need to reset the database, call `language_setup()` again, but be aware it will clear and reload all data from JSON files.

## Feedback & Issues
Found a bug or have feedback? Reach out to me:
[Discord me](https://discord.gg/pGcSyr2bcY)

Thank you for using Lang Custom! üöÄ

![Thank you](https://github.com/GauCandy/WhiteCat/blob/main/thank.gif)

---

# Lang Custom v1.1.1 (Vietnamese)

**Lang Custom** l√† m·ªôt th∆∞ vi·ªán Python gi√∫p qu·∫£n l√Ω v√† t·∫£i b·∫£n d·ªãch t·ª´ c√°c t·ªáp JSON, s·ª≠ d·ª•ng **SQLite** ƒë·ªÉ ƒë·∫°t hi·ªáu su·∫•t cao v√† gi·∫£m ti√™u t·ªën b·ªô nh·ªõ. T·∫°m bi·ªát vi·ªác parse JSON l·∫±ng nh·∫±ng v√† ch√†o ƒë√≥n m·ªôt h·ªá th·ªëng ng√¥n ng·ªØ chu·∫©n h√≥a, kh√¥ng c√≤n ƒëau ƒë·∫ßu!

## T·∫°i sao d√πng Lang Custom?

Lang Custom ra ƒë·ªùi ƒë·ªÉ ƒë∆°n gi·∫£n h√≥a h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ cho bot v√† ·ª©ng d·ª•ng. Qu·∫£n l√Ω b·∫£n d·ªãch c√≥ th·ªÉ tr·ªü n√™n h·ªón lo·∫°n n·∫øu kh√¥ng c√≥ h·ªá th·ªëng chu·∫©n‚Äît·ªáp JSON r·∫£i r√°c, parse kh√¥ng ƒë·ªìng nh·∫•t, kh√¥ng c√≥ ti√™u chu·∫©n. Th∆∞ vi·ªán n√†y mang l·∫°i tr·∫≠t t·ª± v·ªõi API r√µ r√†ng, l∆∞u tr·ªØ b·∫±ng SQLite, v√† c√°c t·ªáp ng√¥n ng·ªØ t√πy ch·ªânh. D√π b·∫°n x√¢y d·ª±ng bot nh·ªè hay ·ª©ng d·ª•ng l·ªõn, Lang Custom gi√∫p qu·∫£n l√Ω ng√¥n ng·ªØ ƒë√°ng tin c·∫≠y v√† hi·ªáu qu·∫£.

## C√†i ƒë·∫∑t

C√†i ƒë·∫∑t th∆∞ vi·ªán b·∫±ng pip:
```sh
pip install lang_custom
```

**L∆∞u √Ω**: Phi√™n b·∫£n n√†y **kh√¥ng t∆∞∆°ng th√≠ch ng∆∞·ª£c** v·ªõi v1.0.14 ho·∫∑c c≈© h∆°n do thay ƒë·ªïi l·ªõn trong API v√† t√≠ch h·ª£p database. H√£y c·∫©n th·∫≠n khi n√¢ng c·∫•p!

## H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng

### 1. Nh·∫≠p th∆∞ vi·ªán
```python
import lang_custom
```

### 2. Kh·ªüi t·∫°o database
G·ªçi `language_setup()` trong script ch√≠nh ƒë·ªÉ thi·∫øt l·∫≠p database SQLite v√† t·∫£i d·ªØ li·ªáu t·ª´ t·ªáp JSON trong th∆∞ m·ª•c `import_language/`:
```python
lang_custom.language_setup()
```

H√†m n√†y:
- T·∫°o th∆∞ m·ª•c `import_language/` v√† t·ªáp `en.json` m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ t·ªáp JSON n√†o.
- T·∫°o `data_language/DO_NOT_DELETE.db` v·ªõi b·∫£ng cho m·ªói ng√¥n ng·ªØ (v√≠ d·ª•: `en`, `vi`).
- X√≥a s·∫°ch t·∫•t c·∫£ b·∫£ng hi·ªán c√≥ v√† t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ t·ªáp JSON.

**Quan tr·ªçng**:
- Ch·ªâ g·ªçi `language_setup()` m·ªôt l·∫ßn trong script ch√≠nh. C√°c module con c√≥ th·ªÉ d√πng `get()` ho·∫∑c `get_lang()` m√† kh√¥ng c·∫ßn kh·ªüi t·∫°o l·∫°i.
- **Kh√¥ng x√≥a** th∆∞ m·ª•c `data_language/` ho·∫∑c t·ªáp `DO_NOT_DELETE.db`, ƒë·∫∑c bi·ªát khi bot ho·∫∑c ·ª©ng d·ª•ng ƒëang ch·∫°y, v√¨ s·∫Ω g√¢y m·∫•t d·ªØ li·ªáu v√† l·ªói.

### 3. L·∫•y danh s√°ch ng√¥n ng·ªØ h·ªó tr·ª£
ƒê·ªÉ xem c√°c ng√¥n ng·ªØ c√≥ s·∫µn (d·ª±a tr√™n t·ªáp JSON ho·∫∑c b·∫£ng SQLite):
```python
languages = lang_custom.get_lang()
print(languages)  # V√≠ d·ª•: ['en', 'vi', 'jp']
```

### 4. L·∫•y d·ªØ li·ªáu ng√¥n ng·ªØ
D√πng `get(language, group, type, name)` ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ SQLite:
- `language`: T√™n ng√¥n ng·ªØ (v√≠ d·ª•: `"en"`, `"vi"`).
- `group`: Nh√≥m d·ªØ li·ªáu trong c·∫•u tr√∫c JSON (v√≠ d·ª•: `"reply"`, `"error"`).
- `type`: `"text"` cho chu·ªói c·ªë ƒë·ªãnh ho·∫∑c `"random"` cho ch·ªçn ng·∫´u nhi√™n t·ª´ danh s√°ch.
- `name`: Kh√≥a trong nh√≥m (v√≠ d·ª•: `"greeting"`, `"greetings"`).

V√≠ d·ª•:
```python
# L·∫•y chu·ªói c·ªë ƒë·ªãnh
text = lang_custom.get(language="en", group="error", type="text", name="not_found")
print(text)  # Output: Resource not found

# L·∫•y chu·ªói ng·∫´u nhi√™n t·ª´ danh s√°ch
random_text = lang_custom.get(language="en", group="reply", type="random", name="greetings")
print(random_text)  # Output: hello :D ho·∫∑c hi :3 ho·∫∑c hey there!
```

N·∫øu `language`, `group`, ho·∫∑c `name` kh√¥ng t·ªìn t·∫°i, ho·∫∑c `type` kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i `"text"` ho·∫∑c `"random"`), h√†m tr·∫£ v·ªÅ `None`. `type` sai s·∫Ω hi·ªán c·∫£nh b√°o tr√™n console:
```
lang_custom/language_loader.py:XXX: UserWarning: Invalid type: test. Must be 'text' or 'random'
```

### 5. C·∫•u tr√∫c t·ªáp
T·ªáp ng√¥n ng·ªØ ƒë∆∞·ª£c l∆∞u trong `import_language/` (b·∫£n d·ªãch do ng∆∞·ªùi d√πng th√™m). V√≠ d·ª• `import_language/en.json`:
```json
{
    "reply": {
        "text": {
            "greeting": "hello :D",
            "welcome": "hi :3"
        },
        "random": {
            "greetings": ["hello :D", "hi :3", "hey there!"]
        }
    },
    "error": {
        "text": {
            "not_found": "Resource not found",
            "invalid": "Invalid input"
        },
        "random": {
            "errors": ["Oops, something went wrong!", "Uh-oh, try again!"]
        }
    }
}
```

Th√™m t·ªáp JSON c·ªßa b·∫°n (v√≠ d·ª•: `vi.json`, `jp.json`) v√†o `import_language/` v·ªõi c·∫•u tr√∫c t∆∞∆°ng t·ª±. Ch·∫°y `language_setup()` ƒë·ªÉ t·∫£i ch√∫ng v√†o SQLite.

## L·ª£i √≠ch hi·ªáu su·∫•t
- **L∆∞u tr·ªØ SQLite**: D·ªØ li·ªáu ng√¥n ng·ªØ ƒë∆∞·ª£c l∆∞u trong `data_language/DO_NOT_DELETE.db`, gi·∫£m s·ª≠ d·ª•ng b·ªô nh·ªõ so v·ªõi parse JSON li√™n t·ª•c.
- **Truy v·∫•n nhanh**: Truy v·∫•n SQLite nhanh h∆°n parse JSON, ƒë·∫∑c bi·ªát v·ªõi d·ªØ li·ªáu l·ªõn ho·∫∑c truy c·∫≠p th∆∞·ªùng xuy√™n.
- **Kh·ªüi t·∫°o m·ªôt l·∫ßn**: `language_setup()` t·∫£i d·ªØ li·ªáu m·ªôt l·∫ßn, c√°c module con truy v·∫•n database tr·ª±c ti·∫øp.

## T∆∞∆°ng th√≠ch
**v1.1.1 kh√¥ng t∆∞∆°ng th√≠ch ng∆∞·ª£c** v·ªõi v1.0.14 ho·∫∑c c≈© h∆°n do:
- Ki·∫øn tr√∫c m·ªõi d·ª±a tr√™n SQLite.
- Thay `lang()`, `group()`, `get_text()`, `random_text()` b·∫±ng `get()`.
- B·ªè c∆° ch·∫ø cache (SQLite ƒë·∫£m nhi·ªám hi·ªáu su·∫•t).

C·∫≠p nh·∫≠t m√£ c·ªßa b·∫°n theo [H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng](#h∆∞·ªõng-d·∫´n-s·ª≠-d·ª•ng).

## L∆∞u √Ω quan tr·ªçng
- **Kh√¥ng x√≥a** th∆∞ m·ª•c `data_language/` ho·∫∑c t·ªáp `DO_NOT_DELETE.db` khi bot ho·∫∑c ·ª©ng d·ª•ng ƒëang ch·∫°y. T·ªáp n√†y ch·ª©a to√†n b·ªô d·ªØ li·ªáu ng√¥n ng·ªØ, v√† x√≥a n√≥ s·∫Ω khi·∫øn ·ª©ng d·ª•ng l·ªói.
- N·∫øu c·∫ßn reset database, g·ªçi l·∫°i `language_setup()`, nh∆∞ng l∆∞u √Ω h√†m n√†y s·∫Ω x√≥a v√† t·∫£i l·∫°i to√†n b·ªô d·ªØ li·ªáu t·ª´ t·ªáp JSON.

## Ph·∫£n h·ªìi & B√°o l·ªói
G·∫∑p l·ªói ho·∫∑c c√≥ √Ω ki·∫øn? Li√™n h·ªá t√¥i:
[Discord me](https://discord.gg/pGcSyr2bcY)

C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Lang Custom! üöÄ

![C·∫£m ∆°n](https://github.com/GauCandy/WhiteCat/blob/main/thank.gif)
