Metadata-Version: 2.4
Name: zencrc
Version: 0.9.9
Summary: ZenCRC command-line tool for CRC32 stuff.
Author-email: Kavintha Kulasingham <kmuthisha@gmail.com>
License-Expression: GPL-3.0-or-later
Project-URL: Homepage, https://github.com/kazuma-desu/python-zencrc
Project-URL: Issues, https://github.com/kazuma-desu/python-zencrc/issues
Platform: any
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: End Users/Desktop
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Utilities
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: click
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.1.0; extra == "dev"
Requires-Dist: isort>=5.0.0; extra == "dev"
Requires-Dist: mypy>=0.971; extra == "dev"
Requires-Dist: flake8>=5.0.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Dynamic: license-file

# ZenCRC

A modern command line tool for CRC32 checksums and verification.

## Installation

ZenCRC is packaged as a Python package and can be installed using `pip`, `pipx`, or other Python package managers.

In the package directory, run:

    pip install .

Or install from PyPI:

    pip install zencrc

## Usage

This section will explain all the functions and options available in ZenCRC:

### Basic help

    zencrc --help

A more concise version of this help can be found by using the `--help` or `-h`
option.

### Append Mode

    zencrc -a {file}
    zencrc --append {file}

You can append a CRC32 checksum to a filename by using the `--append` or `-a`
option.
Takes a positional argument {file} or {files} at the end of the command.
The CRC will be appended to the end of the file in the following format:

    filename.ext --> filename [CRC].ext

For example:
    $ zencrc -a [LNS]Gin no Saji [720p-BD-AAC].mkv

will return:
    [LNS]Gin no Saji [720p-BD-AAC] [72A89BC1].mkv

### Verify Mode

    zencrc -v {file}
    zencrc --verify {file}

You can verify a CRC32 checksum in a filename by using the `--verify` or `-v`
option.

Takes a positional argument {file} or {files} at the end of the command.

This will calculate the CRC32 checksum of the file and check it against the CRC in the filename of the said file, output the status of that file and the CRC that the program calculated.

If the filename does not contain a CRC, the program will still calculate
and output the CRC32 of that file.

Currently, no functionality exists to check files with a CRC32 in their name but it will be added to a future version.

### SFV file out

    zencrc -s {file_out.sfv} {file(s)}
    zencrc --sfv {file_out.sfv} {file(s)}

You can output the calculated checksums to a .sfv file using this option.

### SFV file in / SFV file verify

    zencrc -c {file_out.sfv} {file(s)}
    zencrc --check-sfv {file_out.sfv} {file(s)}

You can verify .sfv files using this option.

### Recursion

    zencrc -r -{a|v|s|c}

This function scans directories recursively and applies the chosen operation to all files within the directory tree. Simply add the `-r` or `--recurse` flag to any command.

## New in Version 0.9.4

### Modern Python Packaging

- Migrated to pyproject.toml for modern Python packaging
- Better dependency management
- Type hints throughout the codebase

### Improved CLI Experience

- Migrated from argparse to Click for better command-line interface
- Colorized output for better readability
- Progress bars for long-running operations
- Fixed issues when using multiple operations together

### Performance Improvements

- Optimized directory traversal for better performance with large directory trees
- More efficient file handling
- Better error handling and reporting

### Cross-Platform Support

- Fixed file structure recursion issues on Windows
- Better path handling using pathlib

## Future Development

### A GUI

- A graphical interface is planned for a future release
- Will use this CLI tool as the core engine

### Additional File Format Support

- Support for additional checksum formats
- Better integration with media management tools
