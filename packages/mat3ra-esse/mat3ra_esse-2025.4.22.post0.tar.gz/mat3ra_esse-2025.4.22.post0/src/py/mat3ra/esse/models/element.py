# generated by datamodel-codegen:
#   filename:  element.json
#   version:   0.28.5

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel


class Name(Enum):
    atomic_radius = "atomic_radius"


class Units(Enum):
    km = "km"
    m = "m"
    cm = "cm"
    mm = "mm"
    um = "um"
    nm = "nm"
    angstrom = "angstrom"
    a_u_ = "a.u."
    bohr = "bohr"
    pm = "pm"


class AtomicRadius(BaseModel):
    name: Optional[Name] = None
    units: Optional[Units] = None
    value: float


class Name23(Enum):
    electronegativity = "electronegativity"


class Electronegativity(BaseModel):
    name: Optional[Name23] = None
    value: float


class Name24(Enum):
    ionization_potential = "ionization_potential"


class Units19(Enum):
    kJ_mol = "kJ/mol"
    eV = "eV"
    J_mol = "J/mol"
    hartree = "hartree"
    cm_1 = "cm-1"
    Ry = "Ry"
    eV_atom = "eV/atom"


class IonizationPotential(BaseModel):
    name: Optional[Name24] = None
    units: Optional[Units19] = None
    value: float


class ElementSchema(BaseModel):
    symbol: Optional[str] = None
    """
    Element symbol.
    """
    properties: Optional[List[Union[AtomicRadius, Electronegativity, IonizationPotential]]] = None
    """
    list of elemental properties
    """
