[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "extended-functools"
version = "0.2.1"
description = "Additional tools for functional programming in Python."
readme = "README.md"
requires-python = ">=3.10"
dependencies = []
authors = [
    {name = "Lari Liuhamo", email = "lari.liuhamo+pypi@gmail.com"},
]
maintainers = [
    {name = "Lari Liuhamo", email = "lari.liuhamo+pypi@gmail.com"},
]
license = {file = "LICENSE"}
keywords = ["python3",]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://pypi.org/project/extended-functools/"
Repository = "https://github.com/Diapolo10/extended-functools"
Documentation = "https://github.com/Diapolo10/extended-functools/tree/main/docs"

[dependency-groups]
dev = [
    "hatch>=1.14.0",
    "mypy>=1.15.0",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-html>=4.1.1",
    "pytest-mock>=3.14.0",
    "pytest-xdist[psutil]>=3.6.1",
    "ruff>=0.11.5",
    "tox>=4.25.0",
    "tox-gh-actions>=3.3.0",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: not covered",
    "@overload",
    "if TYPE_CHECKING:",
    "def __del__",
]

[tool.coverage.run]
branch = true
relative_files = true
omit = [
    ".tox/*",
    "tests/*",
]

[tool.hatch.build.targets.wheel]
packages = ["src/extended_functools"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = """
--cov=./ \
--cov-append \
--cov-fail-under 80 \
--cov-report html:tests/reports/coverage-html \
--cov-report term:skip-covered
--cov-report xml:tests/reports/coverage.xml \
--dist worksteal \
--doctest-modules \
--junitxml=tests/reports/junit.xml \
-n logical \
-o junit_family=legacy \
--ignore=docs/
"""
testpaths = [
    "tests",
]

[tool.ruff]
lint.select = ["ALL"]
lint.ignore = [
    "COM812",  # Missing trailing comma (disabled due to formatter conflict)
    "D203",    # One blank line before class docstring
    "D212",    # Multi-line summary first line
    "ISC001",  # Single-line implicit string concatenation (disabled due to formatter conflict)
    "PLR0913", # Too many arguments
    "Q000",    # Single quotes found but double quotes preferred
]
line-length = 120
show-fixes = true
src = ["src",]
target-version = "py310"

[tool.ruff.lint.flake8-copyright]
author = "Lari Liuhamo"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
# https://beta.ruff.rs/docs/rules/
"__init__.py" = [
    "F401",  # Unused import; ignored as common practice in __init__.py files
    "F403",  # Star import; ignored as common practice in __init__.py files when combined with __all__
    "F405",  # Possibly undefined name from star import, same as above
]
"tests/*" = [
    "ANN",  # Type annotations don't need to be enforced in tests
    "ARG",  # Unused arguments are generally fixtures that apply a side-effect
    "INP001",  # Tests don't require __init__.py files
    "S101",  # Assert is used in nearly all tests
]

[tool.ruff.lint.pylint]
max-args = 15
max-branches = 20
max-returns = 10
max-statements = 80

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.tox]
legacy_tox_ini = """
[tox]
env_list = py3{10, 11, 12, 13}
skip_missing_interpreters = true

[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312
    3.12: py313

[testenv]
pass_env =
    GITHUB_*
    FORCE_COLOR
allowlist_externals = uv

commands =
    uv run --frozen pytest
    uv run --frozen coverage report
"""
