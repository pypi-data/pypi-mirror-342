
from typing import TypeAlias
Coordinates3D: TypeAlias = tuple[float, float, float]

__all__: list[str]

class Pdb:
    coordinates: list[Coordinates3D]
    atomnames: list[str]

    def __new__(cls, filename: str) -> Pdb : ...
    def parse(self) -> Pdb : ...
    def parse_by_monomers(self) -> list[Pdb]: ...


class Xyz:

    def __new__(cls, filename: str) -> Xyz : ...
    def parse(self) -> list[Coordinates3D] : ...


class CP5: 

    def __new__(cls, amplitude: float = 0. , phase_angle: float = 0. ): ...
    def from_atomnames(self, pdb: Pdb, query_names: list[str]) -> tuple[float, float] :  ...
    def from_indices(self, coordinates: list[Coordinates3D], indices: list[int])  -> tuple[float, float] :  ...
    def invert(self) -> list[Coordinates3D]: ...


class CP6: 

    def __new__(cls, amplitude: float = 0. , phase_angle: float = 0. , theta: float = 0.): ...
    def from_atomnames(self, pdb: Pdb, query_names: list[str]) -> tuple[float, float, float] :  ...
    def from_indices(self, coordinates: list[Coordinates3D], indices: list[int])  -> tuple[float, float, float] :  ...
    def invert(self) -> list[Coordinates3D]: ...


class AS:

    def __new__(cls, amplitude: float = 0. , phase_angle: float = 0. ): ...
    def from_atomnames(self, pdb: Pdb, query_names: list[str]) -> tuple[float, float] : ...
    def from_indices(self, coordinates: list[Coordinates3D], indices: list[int])  -> tuple[float, float] : ...
#    def invert(self) -> list[Coordinates3D]: ...

class SP:

    def __new__(cls) : ...
    def from_atomnames(self, pdb: Pdb, query_names: list[str]) -> tuple[Coordinates3D, Coordinates3D] : ...
    def from_indices(self, coordinates: list[Coordinates3D], indices: list[int])  -> tuple[Coordinates3D, Coordinates3D] : ...


def write_to_pdb(fname: str, coordinates: list[Coordinates3D], residuename: str) -> None : ...
def write_to_xyz(fname: str, coordinates: list[Coordinates3D]) -> None : ... 
