Metadata-Version: 2.4
Name: iziproxy
Version: 0.1.3
Summary: Gestion intelligente et discr√®te des proxys pour d√©veloppeurs Python
Author: sanjuant
License: MIT License
        
        Copyright (c) 2025 IziProxy Contributors
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/sanjuant/iziproxy
Project-URL: Bug Tracker, https://github.com/sanjuant/iziproxy/issues
Project-URL: Documentation, https://iziproxy.readthedocs.io/
Keywords: proxy,authentication,requests,configuration,development
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: PyYAML>=6.0
Requires-Dist: keyring>=23.0.0
Requires-Dist: requests>=2.25.0
Provides-Extra: pac
Requires-Dist: pypac>=0.15.0; extra == "pac"
Provides-Extra: js
Requires-Dist: dukpy>=0.3.0; extra == "js"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Requires-Dist: pytest-mock>=3.10.0; extra == "test"
Provides-Extra: dev
Requires-Dist: iziproxy[js,pac,test]; extra == "dev"
Requires-Dist: black>=23.1.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: sphinx>=6.1.3; extra == "dev"
Requires-Dist: sphinx-rtd-theme>=1.2.0; extra == "dev"
Dynamic: license-file

# IziProxy

> Gestion intelligente et discr√®te des proxys pour d√©veloppeurs Python

[![PyPI version](https://img.shields.io/pypi/v/iziproxy.svg)](https://pypi.org/project/iziproxy/)
[![Python Versions](https://img.shields.io/pypi/pyversions/iziproxy.svg)](https://pypi.org/project/iziproxy/)
[![License](https://img.shields.io/pypi/l/iziproxy.svg)](https://github.com/votre-username/iziproxy/blob/main/LICENSE)
[![Environnements](https://img.shields.io/badge/environnements-local%20%7C%20dev%20%7C%20prod-blue)](https://iziproxy.readthedocs.io/)
[![Maintenance](https://img.shields.io/badge/maintenu-actif-green.svg)](https://github.com/votre-username/iziproxy/commits/main)
[![Proxy Time Saved](https://img.shields.io/badge/temps%20√©conomis√©-‚àû%20minutes-success)](https://github.com/votre-username/iziproxy)

## Pourquoi IziProxy ?

Le d√©veloppement local avec des proxys d'entreprise authentifi√©s est souvent un v√©ritable casse-t√™te : configurations manuelles, identifiants √† saisir r√©guli√®rement, et code √† modifier lors du passage en production. 

Alors que des outils comme CNTLM offrent une solution au niveau syst√®me, **IziProxy** propose une approche diff√©rente, directement int√©gr√©e √† vos applications Python :

- **Contrairement √† CNTLM** : Pas besoin d'installer et configurer un service syst√®me
- **Plus flexible** : Change automatiquement de configuration selon l'environnement d√©tect√©
- **Sp√©cifique √† Python** : S'int√®gre directement dans votre code sans affecter les autres applications
- **Sans droits admin** : Fonctionne sans privil√®ges administrateur sur la machine
- **Z√©ro configuration** : D√©tecte automatiquement les proxys du syst√®me et les fichiers PAC

IziProxy r√©sout les d√©fis quotidiens de la gestion de proxy en environnement d'entreprise :

- **D√©tection automatique d'environnement** : Bascule automatiquement entre les configurations local/dev/prod
- **D√©tection des proxys syst√®me** : Utilise intelligemment les configurations existantes et fichiers PAC
- **S√©curit√© am√©lior√©e** : Masque les mots de passe en mode d√©bogage pour √©viter les divulgations accidentelles
- **Stockage s√©curis√©** : Int√©gration avec les gestionnaires d'identifiants du syst√®me
- **Configuration flexible** : Via fichier YAML ou variables d'environnement

## Comparaison avec d'autres approches

| Avantage | IziProxy | CNTLM (solution syst√®me) | Variables d'environnement | 
|----------|------------|--------------------------|---------------------------|
| Int√©gration directe dans le code Python | ‚úÖ | ‚ùå | ‚úÖ |
| D√©tection automatique d'environnement | ‚úÖ | ‚ùå | ‚ùå |
| Protection visuelle des mots de passe en d√©bogage | ‚úÖ | ‚ùå | ‚ùå |
| Fonctionnement sans droits administrateur | ‚úÖ | ‚ùå | ‚úÖ |
| Configuration adaptative selon le contexte | ‚úÖ | ‚ùå | ‚ùå |
| Stockage s√©curis√© des identifiants | ‚úÖ | ‚úÖ | ‚ùå |
| Pas de modification du syst√®me global | ‚úÖ | ‚ùå | ‚úÖ |
| Solution sp√©cifique pour Python | ‚úÖ | ‚ùå | ‚ùå |
| Authentification NTLM native | ‚úÖ | ‚úÖ | ‚ùå |
| Fonctionne avec toutes les applications | ‚ùå | ‚úÖ | ‚ùå |
| Acc√©l√©ration par mise en cache des requ√™tes | ‚ùå | ‚úÖ | ‚ùå |
| Facilit√© de d√©ploiement dans des projets Python | ‚úÖ | ‚ùå | ‚úÖ |

## Installation

```bash
pip install iziproxy

# Avec support complet des fichiers PAC
pip install iziproxy[pac]
```

## Utilisation simple

```python
from iziproxy import IziProxy

# Initialisation avec d√©tection automatique d'environnement et proxy
proxy = IziProxy()  # Aucune configuration requise!

# Utilisation avec requests
import requests
session = requests.Session()
proxy.configure_session(session)

# Ou r√©cup√©rer directement la configuration
proxy_config = proxy.get_proxy_config()
response = requests.get("https://api.exemple.com", proxies=proxy_config)
```

## Comment IziProxy r√©sout les probl√®mes courants

### Avant vs. Apr√®s IziProxy

**Sans IziProxy**:
```python
import requests
import os
import getpass

# Configuration manuelle selon l'environnement
if os.environ.get('ENVIRONMENT') == 'prod':
    proxy_url = "http://proxy.prod.example.com:8080"
    proxies = {"http": proxy_url, "https": proxy_url}
else:
    # En local, besoin d'authentification
    username = input("Username: ")
    password = getpass.getpass("Password: ")
    proxy_url = f"http://{username}:{password}@proxy.local.example.com:8080"
    proxies = {"http": proxy_url, "https": proxy_url}

# Le mot de passe appara√Æt en clair lors du d√©bogage
print(f"Utilisation du proxy: {proxies}")  # üò± Danger!

response = requests.get("https://api.exemple.com", proxies=proxies)
```

**Avec IziProxy**:
```python
import requests
from iziproxy import IziProxy

# Configuration automatique
proxy = IziProxy()
proxies = proxy.get_proxy_config()

# Le mot de passe est masqu√© lors du d√©bogage
print(f"Utilisation du proxy: {proxies}")  # ‚úÖ S√©curis√©!

response = requests.get("https://api.exemple.com", proxies=proxies)
```

### Probl√®mes r√©solus par IziProxy

1. **Configuration r√©p√©titive** : Plus besoin de r√©√©crire la m√™me logique de proxy dans chaque projet
   
2. **Exposition des mots de passe** : La configuration classique expose les mots de passe durant le d√©bogage :
   ```
   # Sans IziProxy - DANGEREUX durant le d√©bogage
   {"http": "http://jdupont:MonM0tDePa$$e@proxy.local.exemple.com:8080", ...}
   
   # Avec IziProxy - S√âCURIS√â
   SecureProxyConfig({"http": "http://jdupont:********@proxy.local.exemple.com:8080", ...})
   ```

3. **Code conditionnel complexe** : Simplification du code qui doit s'adapter √† diff√©rents environnements
   ```python
   # Sans IziProxy: 15+ lignes de code conditionnel complexe
   # Avec IziProxy: 2 lignes de code, quel que soit l'environnement
   ```

4. **Authentification r√©p√©titive** : Fini la saisie r√©p√©t√©e des identifiants √† chaque ex√©cution

5. **D√©tection des configurations syst√®me** : Utilise automatiquement les proxys configur√©s sur votre machine

## Configuration

IziProxy peut fonctionner sans configuration pour les cas simples, mais s'adapte √† vos besoins sp√©cifiques via un fichier YAML :

```yaml
environments:
  local:
    proxy_url: "http://proxy.local.example.com:8080"
    requires_auth: true
  
  prod:
    proxy_url: "http://proxy.prod.example.com:8080"
    requires_auth: false

environment_detection:
  method: auto  # auto, env_var, hostname, ip, ask
  hostname_patterns:
    local: ["local", "laptop", "dev-pc"]
    prod: ["prod"]
  hostname_regex:
    local: ["^dev-\\w+$", "^laptop-\\d+$"]
```

## Fonctionnalit√©s

### D√©tection d'environnement

IziProxy utilise plusieurs m√©thodes pour identifier automatiquement l'environnement d'ex√©cution :

- Variable d'environnement (ex: `ENVIRONMENT=prod`)
- Nom d'h√¥te de la machine (avec support des expressions r√©guli√®res)
- Plage d'adresses IP
- Demande interactive (en dernier recours)

### D√©tection automatique de proxy

IziProxy trouve et utilise intelligemment les configurations proxy existantes :

- D√©tection des variables d'environnement proxy standard
- Support des fichiers PAC (Proxy Auto-Configuration)
- Lecture des configurations syst√®me (Windows, macOS, Linux)
- Mise en cache des r√©sultats pour des performances optimales

### Gestion s√©curis√©e des identifiants

IziProxy utilise `keyring` pour le stockage s√©curis√© des identifiants :
- Int√©gration avec le gestionnaire de mots de passe natif du syst√®me
- Fonctionne sur Windows, macOS et Linux
- Stockage hors du code et des fichiers de configuration

### Protection visuelle en d√©bogage

IziProxy masque intelligemment les mots de passe dans toutes les repr√©sentations d'objets pendant les sessions de d√©bogage, tout en les utilisant correctement pour les requ√™tes.

### Fin des gal√®res de d√©veloppement local

Finis les probl√®mes de:
- Configuration manuelle des proxys √† chaque changement d'environnement
- Exposition accidentelle des mots de passe lors des sessions de d√©bogage partag√©es
- Saisie r√©p√©titive des identifiants de proxy
- Code diff√©rent entre environnement local et production

## D√©tection automatique de proxy

IziProxy inclut un syst√®me intelligent de d√©tection qui trouve et utilise automatiquement les configurations proxy existantes sur votre syst√®me.

### Sources de configuration d√©tect√©es

IziProxy recherche les configurations proxy dans plusieurs sources (par ordre de priorit√©) :

1. **Fichier de configuration YAML** (si fourni)
2. **Variables d'environnement** (`HTTP_PROXY`, `HTTPS_PROXY`, etc.)
3. **Fichiers PAC** (Proxy Auto-Configuration)
4. **Configuration syst√®me**
   - Windows : Param√®tres du Registre
   - macOS : Pr√©f√©rences Syst√®me r√©seau
   - Linux : Param√®tres GNOME/KDE

### Support des fichiers PAC

IziProxy peut analyser et utiliser les scripts PAC (Proxy Auto-Configuration) d√©ploy√©s dans votre organisation :

```python
# Utilisation avanc√©e avec fichiers PAC
from iziproxy import IziProxy

# Configurer avec un fichier PAC sp√©cifique
proxy = IziProxy(pac_url="http://intranet.example.com/proxy.pac")

# OU laisser IziProxy d√©tecter le PAC du syst√®me
proxy = IziProxy()  # D√©tection automatique des PAC configur√©s
```

#### D√©pendances optionnelles pour le support PAC

Pour une analyse optimale des fichiers PAC, installez les d√©pendances optionnelles :

```bash
pip install iziproxy[pac]
```

Cela installera `pypac` qui offre la meilleure compatibilit√© avec les fichiers PAC complexes.

### Performances optimis√©es

- Les r√©sultats de l'analyse PAC sont mis en cache pour √©viter des analyses r√©p√©t√©es
- Le syst√®me de cache r√©duit le temps de d√©marrage et am√©liore les performances
- Expiration automatique du cache pour s'adapter aux changements de configuration

## Compatibilit√©

- Python 3.7+
- Windows, macOS, et Linux
- Int√©gration transparente avec le module requests

## Documentation

Pour une documentation compl√®te, visitez [https://iziproxy.readthedocs.io/](https://iziproxy.readthedocs.io/)

## Contribuer

Les contributions sont les bienvenues ! Consultez [CONTRIBUTING.md](CONTRIBUTING.md) pour les directives.

## Licence

Ce projet est sous licence MIT - voir le fichier [LICENSE](LICENSE) pour plus de d√©tails.
