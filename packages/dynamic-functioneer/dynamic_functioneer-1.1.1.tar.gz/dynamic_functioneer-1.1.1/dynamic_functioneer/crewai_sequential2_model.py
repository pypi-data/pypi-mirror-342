from dynamic_functioneer.base_model_api import BaseModelAPI
from crewai import Agent, Task, Crew
from crewai import LLM
from dynamic_functioneer.crewai_llm_factory import CrewAILLMFactory



class CrewAISequential2ModelAPI(BaseModelAPI):
    """
    A hardcoded sequential CrewAI model that builds two agents:
    - CodeWriter: Writes the function/method.
    - CodeImprover: Reviews and improves it.

    The LLM model is extracted from the model string like:
    'crewai-sequential-gpt-4o-mini'
    """

    def __init__(self, model: str = "crewai-sequential2-gpt-4o-mini", **kwargs):
        super().__init__(api_key=None)
        self.llm_model = self._parse_model_name(model)
        
        print(f'self.llm_model in crew2: {self.llm_model}')
        self.crew = self._build_crew(self.llm_model)

    def get_api_key_from_env(self):
        return None  # Assumes env vars are already set by user

    def get_response(self, prompt, **kwargs):
        output = self.crew.kickoff(inputs={"code_task": prompt})
        
        print(f"Crew output type: {type(output)}")
        print(f"Crew raw output: {output}")
        
        return output.raw  # Access the raw string output    

    def _parse_model_name(self, model_string: str) -> str:
        """Extract LLM model from model string like 'crewai-sequential2-gpt-4o-mini'"""
        parts = model_string.split("-")
        if len(parts) < 3:
            raise ValueError("Model string must follow format 'crewai-sequential-<llm_model>'")
        return "-".join(parts[2:])  # gpt-4o-mini, etc.

    def _build_crew(self, llm_model: str) -> Crew:
        llm = CrewAILLMFactory.create_llm(model=llm_model)
    
        code_writer = Agent(
            role="CodeWriter",
            goal="Write the implementation for a Python function or method based on the prompt",
            backstory=(
                "You are a Python expert specialized in dynamic code generation. "
                "You write clean, correct, and idiomatic code from scratch given a description."
            ),
            allow_delegation=False,
            model=llm,
            verbose=False,
        )
    
        code_improver = Agent(
            role="CodeImprover",
            goal="Improve code quality, robustness, and edge-case handling",
            backstory=(
                "You're a senior Python engineer with a knack for writing bulletproof code. "
                "Your task is to improve and refactor code generated by another agent."
            ),
            allow_delegation=False,
            model=llm,
            verbose=False,
        )
    
        writing_task = Task(
            description="{code_task}",
            expected_output="Python function or method code.",
            agent=code_writer,
        )
    
        review_task = Task(
            description="Improve and finalize the implementation provided by the first agent.",
            expected_output="Improved Python function or method code, with better error handling and clarity.",
            agent=code_improver,
        )
    
        return Crew(
            agents=[code_writer, code_improver],
            tasks=[writing_task, review_task],
            verbose=True,
            memory=True,
        )

