initialize() {
    defineConstant("FLAG_FILE", "flag.txt");
    initializeMutationRate(1e-07);
    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, 999);
    initializeRecombinationRate(1e-08);
}

1 early() {
    sim.addSubpop("p1", 10000);
    mutRate = 1e-07;
}

900:1000 late() {
    if (community.tick % 10 == 0) {
        g = p1.sampleIndividuals(100).genomes;
        g.outputMS("state.txt", append=T);
    }
}

1001:5000 early() {
    if (community.tick % 10 == 0) {
        // ---- Bottleneck phase (tick 1001â€“2000 only) ----
        if (community.tick <= 2000) {
            newSize = asInteger(p1.individualCount * 0.95);
            if (newSize < 100) {
                newSize = 100;
            }
            p1.setSubpopulationSize(newSize);
        }

        // ---- Agent-controlled mutation rate ----
        while (fileExists(FLAG_FILE) == F) {}
        mutRateStr = readFile(FLAG_FILE);
        while (size(mutRateStr) == 0) {
            mutRateStr = readFile(FLAG_FILE);
        }
        mutRate = asFloat(mutRateStr);
        sim.chromosome.setMutationRate(mutRate);
    }
}

1001:5000 late() {
    if (community.tick % 10 == 0) {
        g = p1.sampleIndividuals(100).genomes;
        g.outputMS("state.txt", append=T);
        deleteFile(FLAG_FILE);
    }
}

5001 late() {
    while (fileExists(FLAG_FILE) == F) {}
    writeFile("generation_complete.txt", "1");
}
