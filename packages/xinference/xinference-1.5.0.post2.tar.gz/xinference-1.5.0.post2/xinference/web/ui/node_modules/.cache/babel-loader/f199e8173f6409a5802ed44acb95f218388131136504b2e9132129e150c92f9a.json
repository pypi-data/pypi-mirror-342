{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/runner/work/inference/inference/xinference/web/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"/home/runner/work/inference/inference/xinference/web/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{Button,Dialog,DialogActions,DialogContent,DialogTitle,TextField}from'@mui/material';import React,{useState}from'react';import{useTranslation}from'react-i18next';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PasteDialog=function PasteDialog(_ref){var open=_ref.open,onHandleClose=_ref.onHandleClose,onHandleCommandLine=_ref.onHandleCommandLine;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),command=_useState2[0],setCommand=_useState2[1];var handleClose=function handleClose(){onHandleClose();setCommand('');};var parseXinferenceCommand=function parseXinferenceCommand(){var params={};var peftModelConfig={lora_list:[],image_lora_load_kwargs:{},image_lora_fuse_kwargs:{}};var newcommand=command.replace('xinference launch','').trim();var args=newcommand.match(/--[\\w-]+(?:\\s+(?:\"[^\"]*\"|'[^']*'|(?:[^\\s-][^\\s]*\\s*)+))?/g)||[];var _iterator=_createForOfIteratorHelper(args),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var arg=_step.value;var match=arg.trim().match(/^--([\\w-]+)\\s+(?:\"([^\"]+)\"|'([^']+)'|(.+))?$/);if(!match)continue;var key=match[1];var value=match[2]||match[3]||match[4]||'';var normalizedKey=key.replace(/-/g,'_');if(normalizedKey==='gpu_idx'){params[normalizedKey]=value.split(',').map(Number);}else if(normalizedKey==='lora_modules'){var loraPairs=value.split(/\\s+/);for(var i=0;i<loraPairs.length;i+=2){var lora_name=loraPairs[i];var local_path=loraPairs[i+1];if(lora_name&&local_path){peftModelConfig.lora_list.push({lora_name:lora_name,local_path:local_path});}}}else if(normalizedKey==='image_lora_load_kwargs'){var _value$split=value.split(/\\s+/),_value$split2=_slicedToArray(_value$split,2),load_param=_value$split2[0],load_value=_value$split2[1];peftModelConfig.image_lora_load_kwargs[load_param]=load_value;}else if(normalizedKey==='image_lora_fuse_kwargs'){var _value$split3=value.split(/\\s+/),_value$split4=_slicedToArray(_value$split3,2),fuse_param=_value$split4[0],fuse_value=_value$split4[1];peftModelConfig.image_lora_fuse_kwargs[fuse_param]=fuse_value;}else{if(['cpu_offload','reasoning_content'].includes(normalizedKey)){params[normalizedKey]=value==='true'?true:false;}else if(normalizedKey==='size_in_billions'){params['model_size_in_billions']=value;}else{params[normalizedKey]=value;}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}if(peftModelConfig.lora_list.length>0||Object.keys(peftModelConfig.image_lora_load_kwargs).length>0||Object.keys(peftModelConfig.image_lora_fuse_kwargs).length>0){params.peft_model_config=peftModelConfig;}onHandleCommandLine(params);handleClose();};return/*#__PURE__*/_jsxs(Dialog,{open:open,children:[/*#__PURE__*/_jsx(DialogTitle,{children:t('launchModel.commandLineParsing')}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsx(\"div\",{style:{width:'500px',height:'120px'},children:/*#__PURE__*/_jsx(TextField,{multiline:true,fullWidth:true,rows:5,placeholder:t('launchModel.placeholderTip'),value:command,onChange:function onChange(e){setCommand(e.target.value);}})})}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:handleClose,children:t('launchModel.cancel')}),/*#__PURE__*/_jsx(Button,{autoFocus:true,onClick:parseXinferenceCommand,children:t('launchModel.confirm')})]})]});};export default PasteDialog;","map":{"version":3,"names":["Button","Dialog","DialogActions","DialogContent","DialogTitle","TextField","React","useState","useTranslation","jsx","_jsx","jsxs","_jsxs","PasteDialog","_ref","open","onHandleClose","onHandleCommandLine","_useTranslation","t","_useState","_useState2","_slicedToArray","command","setCommand","handleClose","parseXinferenceCommand","params","peftModelConfig","lora_list","image_lora_load_kwargs","image_lora_fuse_kwargs","newcommand","replace","trim","args","match","_iterator","_createForOfIteratorHelper","_step","s","n","done","arg","value","key","normalizedKey","split","map","Number","loraPairs","i","length","lora_name","local_path","push","_value$split","_value$split2","load_param","load_value","_value$split3","_value$split4","fuse_param","fuse_value","includes","err","e","f","Object","keys","peft_model_config","children","style","width","height","multiline","fullWidth","rows","placeholder","onChange","target","onClick","autoFocus"],"sources":["/home/runner/work/inference/inference/xinference/web/ui/src/scenes/launch_model/components/pasteDialog.js"],"sourcesContent":["import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from '@mui/material'\nimport React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\n\nconst PasteDialog = ({ open, onHandleClose, onHandleCommandLine }) => {\n  const { t } = useTranslation()\n  const [command, setCommand] = useState('')\n\n  const handleClose = () => {\n    onHandleClose()\n    setCommand('')\n  }\n\n  const parseXinferenceCommand = () => {\n    const params = {}\n    const peftModelConfig = {\n      lora_list: [],\n      image_lora_load_kwargs: {},\n      image_lora_fuse_kwargs: {},\n    }\n    let newcommand = command.replace('xinference launch', '').trim()\n    const args =\n      newcommand.match(\n        /--[\\w-]+(?:\\s+(?:\"[^\"]*\"|'[^']*'|(?:[^\\s-][^\\s]*\\s*)+))?/g\n      ) || []\n\n    for (const arg of args) {\n      const match = arg\n        .trim()\n        .match(/^--([\\w-]+)\\s+(?:\"([^\"]+)\"|'([^']+)'|(.+))?$/)\n      if (!match) continue\n\n      const key = match[1]\n      const value = match[2] || match[3] || match[4] || ''\n      const normalizedKey = key.replace(/-/g, '_')\n\n      if (normalizedKey === 'gpu_idx') {\n        params[normalizedKey] = value.split(',').map(Number)\n      } else if (normalizedKey === 'lora_modules') {\n        const loraPairs = value.split(/\\s+/)\n        for (let i = 0; i < loraPairs.length; i += 2) {\n          const lora_name = loraPairs[i]\n          const local_path = loraPairs[i + 1]\n          if (lora_name && local_path) {\n            peftModelConfig.lora_list.push({ lora_name, local_path })\n          }\n        }\n      } else if (normalizedKey === 'image_lora_load_kwargs') {\n        const [load_param, load_value] = value.split(/\\s+/)\n        peftModelConfig.image_lora_load_kwargs[load_param] = load_value\n      } else if (normalizedKey === 'image_lora_fuse_kwargs') {\n        const [fuse_param, fuse_value] = value.split(/\\s+/)\n        peftModelConfig.image_lora_fuse_kwargs[fuse_param] = fuse_value\n      } else {\n        if (['cpu_offload', 'reasoning_content'].includes(normalizedKey)) {\n          params[normalizedKey] = value === 'true' ? true : false\n        } else if (normalizedKey === 'size_in_billions') {\n          params['model_size_in_billions'] = value\n        } else {\n          params[normalizedKey] = value\n        }\n      }\n    }\n\n    if (\n      peftModelConfig.lora_list.length > 0 ||\n      Object.keys(peftModelConfig.image_lora_load_kwargs).length > 0 ||\n      Object.keys(peftModelConfig.image_lora_fuse_kwargs).length > 0\n    ) {\n      params.peft_model_config = peftModelConfig\n    }\n\n    onHandleCommandLine(params)\n    handleClose()\n  }\n\n  return (\n    <Dialog open={open}>\n      <DialogTitle>{t('launchModel.commandLineParsing')}</DialogTitle>\n      <DialogContent>\n        <div style={{ width: '500px', height: '120px' }}>\n          <TextField\n            multiline\n            fullWidth\n            rows={5}\n            placeholder={t('launchModel.placeholderTip')}\n            value={command}\n            onChange={(e) => {\n              setCommand(e.target.value)\n            }}\n          />\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>{t('launchModel.cancel')}</Button>\n        <Button autoFocus onClick={parseXinferenceCommand}>\n          {t('launchModel.confirm')}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default PasteDialog\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}