# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from nvidia_ace import status_pb2 as nvidia__ace_dot_status__pb2
from nvidia_animation_graph import messages_pb2 as nvidia__animation__graph_dot_messages__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in nvidia_animation_graph/animgraph_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AnimationDataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PushAnimationDataStream = channel.stream_unary(
                '/nvidia_ace.services.animation_data.v1.AnimationDataService/PushAnimationDataStream',
                request_serializer=nvidia__animation__graph_dot_messages__pb2.AnimationDataStream.SerializeToString,
                response_deserializer=nvidia__ace_dot_status__pb2.Status.FromString,
                _registered_method=True)
        self.PullAnimationDataStream = channel.unary_stream(
                '/nvidia_ace.services.animation_data.v1.AnimationDataService/PullAnimationDataStream',
                request_serializer=nvidia__animation__graph_dot_messages__pb2.AnimationIds.SerializeToString,
                response_deserializer=nvidia__animation__graph_dot_messages__pb2.AnimationDataStream.FromString,
                _registered_method=True)


class AnimationDataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PushAnimationDataStream(self, request_iterator, context):
        """When the service creating the animation data is a client from the service receiving them
        This push RPC must be used.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PullAnimationDataStream(self, request, context):
        """When the service creating the animation data is a server from the service receiving them
        This pull RPC must be used.
        An example for that is the Omniverse Renderer Microservice requesting animation data to the
        Animation Graph Microservice.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnimationDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PushAnimationDataStream': grpc.stream_unary_rpc_method_handler(
                    servicer.PushAnimationDataStream,
                    request_deserializer=nvidia__animation__graph_dot_messages__pb2.AnimationDataStream.FromString,
                    response_serializer=nvidia__ace_dot_status__pb2.Status.SerializeToString,
            ),
            'PullAnimationDataStream': grpc.unary_stream_rpc_method_handler(
                    servicer.PullAnimationDataStream,
                    request_deserializer=nvidia__animation__graph_dot_messages__pb2.AnimationIds.FromString,
                    response_serializer=nvidia__animation__graph_dot_messages__pb2.AnimationDataStream.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nvidia_ace.services.animation_data.v1.AnimationDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nvidia_ace.services.animation_data.v1.AnimationDataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AnimationDataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PushAnimationDataStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/nvidia_ace.services.animation_data.v1.AnimationDataService/PushAnimationDataStream',
            nvidia__animation__graph_dot_messages__pb2.AnimationDataStream.SerializeToString,
            nvidia__ace_dot_status__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PullAnimationDataStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/nvidia_ace.services.animation_data.v1.AnimationDataService/PullAnimationDataStream',
            nvidia__animation__graph_dot_messages__pb2.AnimationIds.SerializeToString,
            nvidia__animation__graph_dot_messages__pb2.AnimationDataStream.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
