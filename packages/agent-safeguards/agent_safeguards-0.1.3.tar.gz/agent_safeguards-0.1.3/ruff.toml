# Rule selection
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "S",   # flake8-bandit (security)
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe complexity
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PL",  # pylint
    "RUF", # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E203",    # Whitespace before ':'
    "S101",    # Use of assert detected
    "PLR2004", # Magic value used in comparison
    "B904",    # Raise without from in except
    "PLR0913", # Too many arguments in function definition
    "B008",    # Function call in default argument
    "N818",    # Exception name should have Error suffix
    "S311",    # Suspicious non-cryptographic random usage
    "C901",    # Function is too complex
    "A003",    # Shadowing Python builtin names
    "PT011",   # pytest.raises without match parameter
    "PT017",   # assertion on exception in except block
    "PLR0915", # Too many statements in function
    "PLR0912", # Too many branches in function
    "RUF006",  # Store reference to asyncio.create_task
    "E501",    # Line too long
]

# Line length
line-length = 100
target-version = "py310"

# Allow unused variables when they start with an underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[per-file-ignores]
"tests/**/*.py" = ["S", "PLR2004"]
"examples/**/*.py" = ["S", "E402", "T201"]
"src/safeguards/security/auth.py" = ["C416"]  # Unnecessary set comprehension
"src/safeguards/notifications/channels.py" = ["S113"] # Request without timeout
"src/safeguards/api/**/*.py" = ["B008"]  # Function call in default argument (FastAPI pattern)
"src/safeguards/core/budget_coordination.py" = ["E501"]  # Long lines
"src/safeguards/core/safety_controller.py" = ["E501"]  # Long lines
"src/safeguards/monitoring/budget_monitor.py" = ["E501"]  # Long lines
"src/safeguards/rules/defaults.py" = ["E501"]  # Long lines

[isort]
known-third-party = ["fastapi", "pydantic", "numpy", "psutil"]
known-first-party = ["safeguards"]

[mccabe]
max-complexity = 12

[flake8-quotes]
docstring-quotes = "double"

[format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Update to new structure (fixing warning)
[lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "S",   # flake8-bandit (security)
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe complexity
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E203",    # Whitespace before ':'
    "S101",    # Use of assert detected
    "PLR2004", # Magic value used in comparison
    "B904",    # Raise without from in except
    "PLR0913", # Too many arguments in function definition
    "B008",    # Function call in default argument
    "N818",    # Exception name should have Error suffix
    "S311",    # Suspicious non-cryptographic random usage
    "C901",    # Function is too complex
    "A003",    # Shadowing Python builtin names
    "PT011",   # pytest.raises without match parameter
    "PT017",   # assertion on exception in except block
    "PLR0915", # Too many statements in function
    "PLR0912", # Too many branches in function
    "RUF006",  # Store reference to asyncio.create_task
    "E501",    # Line too long
]
