from pathlib import Path
from ..datapack import Datapack
from .items import generate_item_js
from .recipes import generate_shaped_js
from ..recipes import ShapedRecipe

def generate_kubejs(datapack: Datapack, output_dir: str):
    """生成全套KubeJS脚本"""
    output_path = Path(output_dir)
    _generate_startup_scripts(datapack, output_path)
    _generate_server_scripts(datapack, output_path)

def _generate_startup_scripts(datapack: Datapack, base_path: Path):
    """生成物品注册脚本"""
    startup_dir = base_path / "startup_scripts"
    startup_dir.mkdir(parents=True, exist_ok=True)
    
    items_js = [
        "// Auto-generated by CraftScript",
        "StartupEvents.registry('item', event => {"
    ]
    for item in datapack.custom_items.values():
        items_js.append(generate_item_js(item))
    items_js.append("});")
    
    (startup_dir / "items.js").write_text("\n".join(items_js))

def _generate_server_scripts(datapack: Datapack, base_path: Path):
    """生成配方脚本"""
    server_dir = base_path / "server_scripts"
    server_dir.mkdir(parents=True, exist_ok=True)
    
    recipes_js = [
        "// Auto-generated by CraftScript",
        "ServerEvents.recipes(event => {"
    ]
    for recipe in datapack.recipes:
        if isinstance(recipe, ShapedRecipe):
            recipes_js.append(generate_shaped_js(recipe))
    recipes_js.append("});")
    
    (server_dir / "recipes.js").write_text("\n".join(recipes_js))