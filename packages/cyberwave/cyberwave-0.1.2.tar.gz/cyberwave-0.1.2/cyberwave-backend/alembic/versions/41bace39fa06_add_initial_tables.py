"""Add initial tables

Revision ID: 41bace39fa06
Revises: c654db97ee31
Create Date: 2025-04-21 21:46:14.465356

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '41bace39fa06'
down_revision: Union[str, None] = 'c654db97ee31'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('external_auth_id', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_external_auth_id'), ['external_auth_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)

    op.create_table('workspaces',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workspaces'))
    )
    with op.batch_alter_table('workspaces', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_workspaces_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_workspaces_name'), ['name'], unique=False)

    op.create_table('projects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('workspace_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], name=op.f('fk_projects_workspace_id_workspaces')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_projects'))
    )
    with op.batch_alter_table('projects', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_projects_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_projects_name'), ['name'], unique=False)

    op.create_table('workspace_memberships',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('workspace_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.Enum('admin', 'member', 'viewer', name='roleenum'), nullable=False),
    sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_workspace_memberships_user_id_users')),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], name=op.f('fk_workspace_memberships_workspace_id_workspaces')),
    sa.PrimaryKeyConstraint('user_id', 'workspace_id', name=op.f('pk_workspace_memberships'))
    )
    op.create_table('maps',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('map_type', sa.Enum('OCCUPANCY_GRID', 'POINT_CLOUD', 'VECTOR_MAP', name='maptypeenum'), nullable=False),
    sa.Column('map_data_uri', sa.String(), nullable=True),
    sa.Column('origin_pose', sa.JSON(), nullable=True),
    sa.Column('resolution', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_maps_project_id_projects')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_maps'))
    )
    with op.batch_alter_table('maps', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_maps_id'), ['id'], unique=False)

    op.create_table('levels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('share_token', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('primary_map_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['primary_map_id'], ['maps.id'], name=op.f('fk_levels_primary_map_id_maps')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_levels_project_id_projects')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_levels'))
    )
    with op.batch_alter_table('levels', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_levels_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_levels_share_token'), ['share_token'], unique=True)

    op.create_table('map_features',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('feature_type', sa.Enum('ZONE', 'POINT_OF_INTEREST', 'PATH', 'RESTRICTED_AREA', name='featuretypeenum'), nullable=False),
    sa.Column('geometry', sa.JSON(), nullable=False),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.Column('map_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['map_id'], ['maps.id'], name=op.f('fk_map_features_map_id_maps')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_map_features'))
    )
    with op.batch_alter_table('map_features', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_map_features_id'), ['id'], unique=False)

    op.create_table('fixed_assets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('asset_type', sa.Enum('CHARGER', 'INPUT_CONVEYOR', 'OUTPUT_CONVEYOR', 'WORKSTATION', 'STORAGE_RACK', 'OTHER', name='assettypeenum'), nullable=False),
    sa.Column('status', sa.Enum('AVAILABLE', 'IN_USE', 'MAINTENANCE', 'ERROR', 'UNKNOWN', 'IDLE', name='assetstatusenum'), nullable=False),
    sa.Column('location', sa.JSON(), nullable=False),
    sa.Column('properties', sa.JSON(), nullable=True),
    sa.Column('level_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['level_id'], ['levels.id'], name=op.f('fk_fixed_assets_level_id_levels')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_fixed_assets'))
    )
    with op.batch_alter_table('fixed_assets', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_fixed_assets_id'), ['id'], unique=False)

    op.create_table('robots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('robot_type', sa.String(), nullable=False),
    sa.Column('serial_number', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('IDLE', 'CHARGING', 'MOVING', 'WORKING', 'ERROR', 'MAINTENANCE', 'OFFLINE', 'UNKNOWN', name='robotstatusenum'), nullable=False),
    sa.Column('capabilities', sa.JSON(), nullable=True),
    sa.Column('initial_pos_x', sa.Float(), nullable=True),
    sa.Column('initial_pos_y', sa.Float(), nullable=True),
    sa.Column('initial_pos_z', sa.Float(), nullable=True),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.Column('current_battery_percentage', sa.Float(), nullable=True),
    sa.Column('registration_date', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('level_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['level_id'], ['levels.id'], name=op.f('fk_robots_level_id_levels')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_robots'))
    )
    with op.batch_alter_table('robots', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_robots_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_robots_robot_type'), ['robot_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_robots_serial_number'), ['serial_number'], unique=True)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('robots', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_robots_serial_number'))
        batch_op.drop_index(batch_op.f('ix_robots_robot_type'))
        batch_op.drop_index(batch_op.f('ix_robots_id'))

    op.drop_table('robots')
    with op.batch_alter_table('fixed_assets', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_fixed_assets_id'))

    op.drop_table('fixed_assets')
    with op.batch_alter_table('map_features', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_map_features_id'))

    op.drop_table('map_features')
    with op.batch_alter_table('levels', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_levels_share_token'))
        batch_op.drop_index(batch_op.f('ix_levels_id'))

    op.drop_table('levels')
    with op.batch_alter_table('maps', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_maps_id'))

    op.drop_table('maps')
    op.drop_table('workspace_memberships')
    with op.batch_alter_table('projects', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_projects_name'))
        batch_op.drop_index(batch_op.f('ix_projects_id'))

    op.drop_table('projects')
    with op.batch_alter_table('workspaces', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_workspaces_name'))
        batch_op.drop_index(batch_op.f('ix_workspaces_id'))

    op.drop_table('workspaces')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_id'))
        batch_op.drop_index(batch_op.f('ix_users_external_auth_id'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    # ### end Alembic commands ###
