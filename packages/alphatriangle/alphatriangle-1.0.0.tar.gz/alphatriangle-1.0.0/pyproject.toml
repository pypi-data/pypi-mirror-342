# File: pyproject.toml
# File: alphatriangle/pyproject.toml
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "alphatriangle"
version = "1.0.0" # Incremented version for removing visualization
authors = [{ name="Luis Guilherme P. M.", email="lgpelin92@gmail.com" }]
description = "AlphaZero implementation for a triangle puzzle game (uses trianglengin)." # Kept description
readme = "README.md"
license = { file="LICENSE" }
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Games/Entertainment :: Puzzle Games",
    "Development Status :: 4 - Beta", # Status remains Beta
]
dependencies = [
    # --- Core Dependency ---
    "trianglengin>=1.0.6", # Depend on the engine library
    # --- RL/ML specific dependencies ---
    "numpy>=1.20.0",
    "torch>=2.0.0",
    "torchvision>=0.11.0",
    "cloudpickle>=2.0.0",
    "numba>=0.55.0", # Used in features
    "mlflow>=1.20.0",
    "ray>=2.8.0",
    "pydantic>=2.0.0",
    "typing_extensions>=4.0.0",
    "typer[all]>=0.9.0", # Still needed for the train CLI
    "tensorboard>=2.10.0",
]

[project.urls]
"Homepage" = "https://github.com/lguibr/alphatriangle"
"Bug Tracker" = "https://github.com/lguibr/alphatriangle/issues"

[project.scripts]
# Keep only the training script entry point
alphatriangle = "alphatriangle.cli:app"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.0.0",
    "ruff",
    "mypy",
    "build",
    "twine",
    "codecov",
    # REMOVE pygame and matplotlib from dev dependencies
    # "pygame>=2.1.0",
    # "matplotlib>=3.5.0",
]


[tool.setuptools.packages.find]
# No 'where' needed, find searches from the project root by default
# It will find the 'alphatriangle' directory now.

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.json"] # Include non-code files

# --- Tool Configurations (ruff, mypy, pytest, coverage) ---

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "UP", "B", "C4", "ARG", "SIM", "TCH", "PTH", "NPY"]
ignore = ["E501"]

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Keep true, especially with the new dependency

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=alphatriangle --cov-report=term-missing"
testpaths = [
    "tests", # Keep testing alphatriangle specific code
]

[tool.coverage.run]
omit = [
    # Keep omissions for CLI, logging, config, types, etc.
    "alphatriangle/cli.py",
    # REMOVE visualization, interaction, app, structs, environment omissions
    "alphatriangle/training/logging_utils.py",
    "alphatriangle/config/*", # Keep omitting config
    "alphatriangle/data/schemas.py", # Keep omitting schemas
    "alphatriangle/utils/types.py", # Keep omitting utils/types
    "alphatriangle/mcts/core/types.py", # Keep omitting mcts/types
    "alphatriangle/rl/types.py", # Keep omitting rl/types
    "alphatriangle/stats/collector.py", # StatsCollectorActor is hard to test fully without Ray cluster
    # REMOVE visual_state_actor omission
    "*/__init__.py",
    "*/README.md",
    "run_*.py", # Keep omitting legacy run scripts (these should be deleted)
]

[tool.coverage.report]
fail_under = 25 # Adjust target based on remaining code
show_missing = true